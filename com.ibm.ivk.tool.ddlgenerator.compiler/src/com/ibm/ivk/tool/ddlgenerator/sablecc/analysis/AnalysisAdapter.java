/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.analysis;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAFile(AFile node)
    {
        defaultCase(node);
    }

    public void caseAAttributeDecInFileStmt(AAttributeDecInFileStmt node)
    {
        defaultCase(node);
    }

    public void caseAVarDecFileStmt(AVarDecFileStmt node)
    {
        defaultCase(node);
    }

    public void caseAVarDecInFileStmt(AVarDecInFileStmt node)
    {
        defaultCase(node);
    }

    public void caseAArrayDecFileStmt(AArrayDecFileStmt node)
    {
        defaultCase(node);
    }

    public void caseAEnumDecInFileStmt(AEnumDecInFileStmt node)
    {
        defaultCase(node);
    }

    public void caseATypeDecFileStmt(ATypeDecFileStmt node)
    {
        defaultCase(node);
    }

    public void caseASubFileStmt(ASubFileStmt node)
    {
        defaultCase(node);
    }

    public void caseAFunctionFileStmt(AFunctionFileStmt node)
    {
        defaultCase(node);
    }

    public void caseAFunctionWithoutReturnTypeFileStmt(AFunctionWithoutReturnTypeFileStmt node)
    {
        defaultCase(node);
    }

    public void caseADllFunctionFileStmt(ADllFunctionFileStmt node)
    {
        defaultCase(node);
    }

    public void caseAWaitSubFileStmt(AWaitSubFileStmt node)
    {
        defaultCase(node);
    }

    public void caseAGeneralStmtFileStmt(AGeneralStmtFileStmt node)
    {
        defaultCase(node);
    }

    public void caseAAttributeDecInFunctionStmt(AAttributeDecInFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAVarDecFunctionStmt(AVarDecFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAVarDecInFunctionStmt(AVarDecInFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAVarDecInWithDataTypeFunctionStmt(AVarDecInWithDataTypeFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAVarDecListFunctionStmt(AVarDecListFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAArrayDecFunctionStmt(AArrayDecFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAVarSetFunctionStmt(AVarSetFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAIfStmtFunctionStmt(AIfStmtFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAIfStmtOneLineFunctionStmt(AIfStmtOneLineFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAElseIfStmFunctionStmt(AElseIfStmFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAElseStmtFunctionStmt(AElseStmtFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseASelectStmtFunctionStmt(ASelectStmtFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAForEachStmtFunctionStmt(AForEachStmtFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAForEachStmtOnlyNextFunctionStmt(AForEachStmtOnlyNextFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAForStmtFunctionStmt(AForStmtFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAForStmtStepFunctionStmt(AForStmtStepFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAWhileStmtFunctionStmt(AWhileStmtFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseADoWhileFunctionStmt(ADoWhileFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseATryFunctionStmt(ATryFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAGotoCallFunctionStmt(AGotoCallFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAGotoCodeStartFunctionStmt(AGotoCodeStartFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAExitForFunctionStmt(AExitForFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAExitSubFunctionStmt(AExitSubFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAExitFunctionFunctionStmt(AExitFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallFunctionStmt(AMethodCallFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallWithoutParensFunctionStmt(AMethodCallWithoutParensFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseADllFunctionCallFunctionStmt(ADllFunctionCallFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAWaitSubCallFunctionStmt(AWaitSubCallFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAArrayResizeFunctionStmt(AArrayResizeFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAArrayResizePreserveDataFunctionStmt(AArrayResizePreserveDataFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAArraySetElementFunctionStmt(AArraySetElementFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAOpenFileFunctionFunctionStmt(AOpenFileFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseACloseFileFunctionFunctionStmt(ACloseFileFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAPrintFunctionFunctionStmt(APrintFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseADebugPrintFunctionFunctionStmt(ADebugPrintFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAKillFunctionFunctionStmt(AKillFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseARenameFileFunctionFunctionStmt(ARenameFileFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAMsgBoxFunctionWithoutParensFunctionStmt(AMsgBoxFunctionWithoutParensFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAExcelSheetFunctionStmt(AExcelSheetFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseASetHiddenFunctionFunctionStmt(ASetHiddenFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseASetVisibleFunctionFunctionStmt(ASetVisibleFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseASelectFunctionFunctionStmt(ASelectFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAMoveFunctionFunctionStmt(AMoveFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAAutoFitFunctionFunctionStmt(AAutoFitFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseASetNameExcelFunctionFunctionStmt(ASetNameExcelFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseACopyFunctionFunctionStmt(ACopyFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseADeleteFunctionFunctionStmt(ADeleteFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAActivateFunctionFunctionStmt(AActivateFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseASetCellFunctionFunctionStmt(ASetCellFunctionFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseAGeneralStmtFunctionStmt(AGeneralStmtFunctionStmt node)
    {
        defaultCase(node);
    }

    public void caseACommentGeneralStmt(ACommentGeneralStmt node)
    {
        defaultCase(node);
    }

    public void caseAEndOfLineGeneralStmt(AEndOfLineGeneralStmt node)
    {
        defaultCase(node);
    }

    public void caseAId(AId node)
    {
        defaultCase(node);
    }

    public void caseANotId(ANotId node)
    {
        defaultCase(node);
    }

    public void caseAMethodChaining(AMethodChaining node)
    {
        defaultCase(node);
    }

    public void caseAOnlyValueMethodChaining(AOnlyValueMethodChaining node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingPart(AMethodChainingPart node)
    {
        defaultCase(node);
    }

    public void caseAIdMethodChainingValue(AIdMethodChainingValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallMethodChainingValue(AMethodCallMethodChainingValue node)
    {
        defaultCase(node);
    }

    public void caseACharacterString(ACharacterString node)
    {
        defaultCase(node);
    }

    public void caseAOnlyValueCharacterString(AOnlyValueCharacterString node)
    {
        defaultCase(node);
    }

    public void caseAStringPart(AStringPart node)
    {
        defaultCase(node);
    }

    public void caseAGetNameExcelFunctionStringPartValue(AGetNameExcelFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseALenFunctionStringPartValue(ALenFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseANowFunctionStringPartValue(ANowFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelCellStringPartValue(AExcelCellStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingStringPartValue(AMethodChainingStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAStringStringPartValue(AStringStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtStringPartValue(AShortIfStmtStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionStringPartValue(AArithmeticExpressionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionInParensStringPartValue(AArithmeticExpressionInParensStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseACIntFunctionStringPartValue(ACIntFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseATrimFunctionStringPartValue(ATrimFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseARTrimFunctionStringPartValue(ARTrimFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallStringPartValue(AMethodCallStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAUCaseFunctionStringPartValue(AUCaseFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseALCaseFunctionStringPartValue(ALCaseFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseALeftFunctionStringPartValue(ALeftFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseARightFunctionStringPartValue(ARightFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionTwoParamStringPartValue(AMidFunctionTwoParamStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseACStrFunctionStringPartValue(ACStrFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseACLngFunctionStringPartValue(ACLngFunctionStringPartValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpression(AArithmeticExpression node)
    {
        defaultCase(node);
    }

    public void caseAOnlyValueArithmeticExpression(AOnlyValueArithmeticExpression node)
    {
        defaultCase(node);
    }

    public void caseANegateIdArithmeticExpression(ANegateIdArithmeticExpression node)
    {
        defaultCase(node);
    }

    public void caseANegatedArithmeticExpressionInParensArithmeticExpression(ANegatedArithmeticExpressionInParensArithmeticExpression node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionPart(AArithmeticExpressionPart node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue(AArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue(AArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue node)
    {
        defaultCase(node);
    }

    public void caseAStringTokenArithmeticExpressionPartValueNotNegated(AStringTokenArithmeticExpressionPartValueNotNegated node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingArithmeticExpressionPartValueNotNegated(AMethodChainingArithmeticExpressionPartValueNotNegated node)
    {
        defaultCase(node);
    }

    public void caseANumberArithmeticExpressionPartValueNotNegated(ANumberArithmeticExpressionPartValueNotNegated node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtArithmeticExpressionPartValueNotNegated(AShortIfStmtArithmeticExpressionPartValueNotNegated node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallArithmeticExpressionPartValueNotNegated(AMethodCallArithmeticExpressionPartValueNotNegated node)
    {
        defaultCase(node);
    }

    public void caseACIntFunctionArithmeticExpressionPartValueNotNegated(ACIntFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultCase(node);
    }

    public void caseALenFunctionArithmeticExpressionPartValueNotNegated(ALenFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultCase(node);
    }

    public void caseALBoundFunctionArithmeticExpressionPartValueNotNegated(ALBoundFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultCase(node);
    }

    public void caseAUBoundFunctionArithmeticExpressionPartValueNotNegated(AUBoundFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionPartValueNegated(AArithmeticExpressionPartValueNegated node)
    {
        defaultCase(node);
    }

    public void caseABooleanValueTrue(ABooleanValueTrue node)
    {
        defaultCase(node);
    }

    public void caseABooleanValueFalse(ABooleanValueFalse node)
    {
        defaultCase(node);
    }

    public void caseANullValue(ANullValue node)
    {
        defaultCase(node);
    }

    public void caseAInputFunctionValue(AInputFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAFreeFileFunctionValue(AFreeFileFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseALofFunctionValue(ALofFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseASplitFunctionWithLimitValue(ASplitFunctionWithLimitValue node)
    {
        defaultCase(node);
    }

    public void caseANowFunctionValue(ANowFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAFormatFunctionValue(AFormatFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseASpaceFunctionValue(ASpaceFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAIdInParensValue(AIdInParensValue node)
    {
        defaultCase(node);
    }

    public void caseACountFunctionValue(ACountFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelWorkbookValue(AExcelWorkbookValue node)
    {
        defaultCase(node);
    }

    public void caseACellValue(ACellValue node)
    {
        defaultCase(node);
    }

    public void caseASheetValue(ASheetValue node)
    {
        defaultCase(node);
    }

    public void caseAMsgBoxFunctionValue(AMsgBoxFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingValue(AMethodChainingValue node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtValue(AShortIfStmtValue node)
    {
        defaultCase(node);
    }

    public void caseACharacterStringValue(ACharacterStringValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionValue(AArithmeticExpressionValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionInParensValue(AArithmeticExpressionInParensValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodValue(AMethodValue node)
    {
        defaultCase(node);
    }

    public void caseAConditionValue(AConditionValue node)
    {
        defaultCase(node);
    }

    public void caseATrueValue(ATrueValue node)
    {
        defaultCase(node);
    }

    public void caseAFalseValue(AFalseValue node)
    {
        defaultCase(node);
    }

    public void caseACStrFunctionValue(ACStrFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseACIntFunctionValue(ACIntFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAUCaseFunctionValue(AUCaseFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseALCaseFunctionValue(ALCaseFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseALenFunctionValue(ALenFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionValue(AMidFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionTwoParamValue(AMidFunctionTwoParamValue node)
    {
        defaultCase(node);
    }

    public void caseALeftFunctionValue(ALeftFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseARightFunctionValue(ARightFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseATrimFunctionValue(ATrimFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseALBoundFunctionValue(ALBoundFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAUBoundFunctionValue(AUBoundFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseACLngFunctionValue(ACLngFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseACDblFunctionValue(ACDblFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseACSngFunctionValue(ACSngFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseARTrimFunctionValue(ARTrimFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseASplitFunctionValue(ASplitFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAChrFunctionValue(AChrFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseALofFunctionBooleanValue(ALofFunctionBooleanValue node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtBooleanValue(AShortIfStmtBooleanValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingInParensBooleanValue(AMethodChainingInParensBooleanValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingBooleanValue(AMethodChainingBooleanValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodBooleanValue(AMethodBooleanValue node)
    {
        defaultCase(node);
    }

    public void caseATrueBooleanValue(ATrueBooleanValue node)
    {
        defaultCase(node);
    }

    public void caseAFalseBooleanValue(AFalseBooleanValue node)
    {
        defaultCase(node);
    }

    public void caseACIntFunctionBooleanValue(ACIntFunctionBooleanValue node)
    {
        defaultCase(node);
    }

    public void caseAStringValueWithoutParensStringValue(AStringValueWithoutParensStringValue node)
    {
        defaultCase(node);
    }

    public void caseAStringValueWithParensStringValue(AStringValueWithParensStringValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelCellStringValueWithoutParens(AExcelCellStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingStringValueWithoutParens(AMethodChainingStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtStringValueWithoutParens(AShortIfStmtStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseACharacterStringStringValueWithoutParens(ACharacterStringStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAMethodStringValueWithoutParens(AMethodStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseACStrFunctionStringValueWithoutParens(ACStrFunctionStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAUCaseFunctionStringValueWithoutParens(AUCaseFunctionStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseALCaseFunctionStringValueWithoutParens(ALCaseFunctionStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionStringValueWithoutParens(AMidFunctionStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionTwoParamStringValueWithoutParens(AMidFunctionTwoParamStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseALeftFunctionStringValueWithoutParens(ALeftFunctionStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseARightFunctionStringValueWithoutParens(ARightFunctionStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseATrimFunctionStringValueWithoutParens(ATrimFunctionStringValueWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAStringValueWithParens(AStringValueWithParens node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionIntValue(AArithmeticExpressionIntValue node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtIntValue(AShortIfStmtIntValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingIntValue(AMethodChainingIntValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodIntValue(AMethodIntValue node)
    {
        defaultCase(node);
    }

    public void caseALenFunctionIntValue(ALenFunctionIntValue node)
    {
        defaultCase(node);
    }

    public void caseACIntFunctionIntValue(ACIntFunctionIntValue node)
    {
        defaultCase(node);
    }

    public void caseALongDataType(ALongDataType node)
    {
        defaultCase(node);
    }

    public void caseAIntegerDataType(AIntegerDataType node)
    {
        defaultCase(node);
    }

    public void caseASingleDataType(ASingleDataType node)
    {
        defaultCase(node);
    }

    public void caseAStringDataType(AStringDataType node)
    {
        defaultCase(node);
    }

    public void caseABooleanDataType(ABooleanDataType node)
    {
        defaultCase(node);
    }

    public void caseAIdDataType(AIdDataType node)
    {
        defaultCase(node);
    }

    public void caseAWorkbookDataType(AWorkbookDataType node)
    {
        defaultCase(node);
    }

    public void caseAWorksheetDataType(AWorksheetDataType node)
    {
        defaultCase(node);
    }

    public void caseAIntegerArrayDataType(AIntegerArrayDataType node)
    {
        defaultCase(node);
    }

    public void caseAByValModifier(AByValModifier node)
    {
        defaultCase(node);
    }

    public void caseAStaticModifier(AStaticModifier node)
    {
        defaultCase(node);
    }

    public void caseADeclareModifier(ADeclareModifier node)
    {
        defaultCase(node);
    }

    public void caseAGlobalModifier(AGlobalModifier node)
    {
        defaultCase(node);
    }

    public void caseAConstModifier(AConstModifier node)
    {
        defaultCase(node);
    }

    public void caseAPrivateModifier(APrivateModifier node)
    {
        defaultCase(node);
    }

    public void caseAPublicModifier(APublicModifier node)
    {
        defaultCase(node);
    }

    public void caseANotLogicalOperator(ANotLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseAEqualLogicalOperator(AEqualLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseANotEqualLogicalOperator(ANotEqualLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseALessThanLogicalOperator(ALessThanLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseAGreaterThanLogicalOperator(AGreaterThanLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseALessThanOrEqualLogicalOperator(ALessThanOrEqualLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseAGreaterThanOrEqualLogicalOperator(AGreaterThanOrEqualLogicalOperator node)
    {
        defaultCase(node);
    }

    public void caseAAdditionArithmeticOperator(AAdditionArithmeticOperator node)
    {
        defaultCase(node);
    }

    public void caseASubtractionArithmeticOperator(ASubtractionArithmeticOperator node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationArithmeticOperator(AMultiplicationArithmeticOperator node)
    {
        defaultCase(node);
    }

    public void caseADivisionArithmeticOperator(ADivisionArithmeticOperator node)
    {
        defaultCase(node);
    }

    public void caseAModuloArithmeticOperator(AModuloArithmeticOperator node)
    {
        defaultCase(node);
    }

    public void caseAModifierId(AModifierId node)
    {
        defaultCase(node);
    }

    public void caseAComment(AComment node)
    {
        defaultCase(node);
    }

    public void caseAVarDecIn(AVarDecIn node)
    {
        defaultCase(node);
    }

    public void caseAVarDecInWithDataType(AVarDecInWithDataType node)
    {
        defaultCase(node);
    }

    public void caseAEnumDecIn(AEnumDecIn node)
    {
        defaultCase(node);
    }

    public void caseAGeneralStmtEnumValue(AGeneralStmtEnumValue node)
    {
        defaultCase(node);
    }

    public void caseAVarSetEnumValue(AVarSetEnumValue node)
    {
        defaultCase(node);
    }

    public void caseAWithoutValueEnumValue(AWithoutValueEnumValue node)
    {
        defaultCase(node);
    }

    public void caseAAttributeDecIn(AAttributeDecIn node)
    {
        defaultCase(node);
    }

    public void caseAVarDec(AVarDec node)
    {
        defaultCase(node);
    }

    public void caseAVarDecList(AVarDecList node)
    {
        defaultCase(node);
    }

    public void caseAVarDecListValue(AVarDecListValue node)
    {
        defaultCase(node);
    }

    public void caseAArrayDec(AArrayDec node)
    {
        defaultCase(node);
    }

    public void caseARangeArrayDec(ARangeArrayDec node)
    {
        defaultCase(node);
    }

    public void caseAVarSet(AVarSet node)
    {
        defaultCase(node);
    }

    public void caseATrimVarSet(ATrimVarSet node)
    {
        defaultCase(node);
    }

    public void caseAAddFunctionVarSet(AAddFunctionVarSet node)
    {
        defaultCase(node);
    }

    public void caseAArrayResize(AArrayResize node)
    {
        defaultCase(node);
    }

    public void caseAArrayResizePreserveData(AArrayResizePreserveData node)
    {
        defaultCase(node);
    }

    public void caseAArraySetElement(AArraySetElement node)
    {
        defaultCase(node);
    }

    public void caseATypeDec(ATypeDec node)
    {
        defaultCase(node);
    }

    public void caseAVarDecTypeDecValue(AVarDecTypeDecValue node)
    {
        defaultCase(node);
    }

    public void caseAArrayDecTypeDecValue(AArrayDecTypeDecValue node)
    {
        defaultCase(node);
    }

    public void caseAGeneralStmtTypeDecValue(AGeneralStmtTypeDecValue node)
    {
        defaultCase(node);
    }

    public void caseASub(ASub node)
    {
        defaultCase(node);
    }

    public void caseAParamList(AParamList node)
    {
        defaultCase(node);
    }

    public void caseANoParamParamList(ANoParamParamList node)
    {
        defaultCase(node);
    }

    public void caseAParamPart(AParamPart node)
    {
        defaultCase(node);
    }

    public void caseAParamParamValue(AParamParamValue node)
    {
        defaultCase(node);
    }

    public void caseAArrayParamParamValue(AArrayParamParamValue node)
    {
        defaultCase(node);
    }

    public void caseAOptionalParamValueParamValue(AOptionalParamValueParamValue node)
    {
        defaultCase(node);
    }

    public void caseAParamWithoutDataTypeParamValue(AParamWithoutDataTypeParamValue node)
    {
        defaultCase(node);
    }

    public void caseAOptionalParamOptionalParamValue(AOptionalParamOptionalParamValue node)
    {
        defaultCase(node);
    }

    public void caseAOptionalParamAsTypeOptionalParamValue(AOptionalParamAsTypeOptionalParamValue node)
    {
        defaultCase(node);
    }

    public void caseAOptionalParamAsBooleanOptionalParamValue(AOptionalParamAsBooleanOptionalParamValue node)
    {
        defaultCase(node);
    }

    public void caseAOptionalParamAsIntegerOptionalParamValue(AOptionalParamAsIntegerOptionalParamValue node)
    {
        defaultCase(node);
    }

    public void caseAOptionalParamAsStringOptionalParamValue(AOptionalParamAsStringOptionalParamValue node)
    {
        defaultCase(node);
    }

    public void caseAOptionalParamNoDataTypeOptionalParamValue(AOptionalParamNoDataTypeOptionalParamValue node)
    {
        defaultCase(node);
    }

    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    public void caseAFunctionWithoutReturnType(AFunctionWithoutReturnType node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallInParens(AMethodCallInParens node)
    {
        defaultCase(node);
    }

    public void caseAMethodCall(AMethodCall node)
    {
        defaultCase(node);
    }

    public void caseAReplaceMethodCall(AReplaceMethodCall node)
    {
        defaultCase(node);
    }

    public void caseAInStrMethodCall(AInStrMethodCall node)
    {
        defaultCase(node);
    }

    public void caseAParamCallList(AParamCallList node)
    {
        defaultCase(node);
    }

    public void caseANoParamParamCallList(ANoParamParamCallList node)
    {
        defaultCase(node);
    }

    public void caseAParamCallPart(AParamCallPart node)
    {
        defaultCase(node);
    }

    public void caseACommaParamCallPart(ACommaParamCallPart node)
    {
        defaultCase(node);
    }

    public void caseAMoreParamCallValuesParamCallValue(AMoreParamCallValuesParamCallValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionParamCallValue(AArithmeticExpressionParamCallValue node)
    {
        defaultCase(node);
    }

    public void caseAInputFunctionMoreParamCallValues(AInputFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseALofFunctionMoreParamCallValues(ALofFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseALBoundFunctionMoreParamCallValues(ALBoundFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAConditionMoreParamCallValues(AConditionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAExcelWorkbookMoreParamCallValues(AExcelWorkbookMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAExcelSheetMoreParamCallValues(AExcelSheetMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingMoreParamCallValues(AMethodChainingMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAGetNameExcelFunctionMoreParamCallValues(AGetNameExcelFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseACellMoreParamCallValues(ACellMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAActiveWorbookFullNameFunctionMoreParamCallValues(AActiveWorbookFullNameFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseALCaseFunctionMoreParamCallValues(ALCaseFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAParamWithParamNameMoreParamCallValues(AParamWithParamNameMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtMoreParamCallValues(AShortIfStmtMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseACharacterStringMoreParamCallValues(ACharacterStringMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAMethodMoreParamCallValues(AMethodMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseATrueMoreParamCallValues(ATrueMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAFalseMoreParamCallValues(AFalseMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseACStrFunctionMoreParamCallValues(ACStrFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseACIntFunctionMoreParamCallValues(ACIntFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAUCaseFunctionMoreParamCallValues(AUCaseFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseALenFunctionMoreParamCallValues(ALenFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionMoreParamCallValues(AMidFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseALeftFunctionMoreParamCallValues(ALeftFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseARightFunctionMoreParamCallValues(ARightFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseATrimFunctionMoreParamCallValues(ATrimFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAUBoundFunctionMoreParamCallValues(AUBoundFunctionMoreParamCallValues node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallWithoutParens(AMethodCallWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseANoParamMethodCallWithoutParens(ANoParamMethodCallWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAParamCallListWithoutParens(AParamCallListWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAParamCallListWithoutParensPart(AParamCallListWithoutParensPart node)
    {
        defaultCase(node);
    }

    public void caseACommaParamCallListWithoutParensPart(ACommaParamCallListWithoutParensPart node)
    {
        defaultCase(node);
    }

    public void caseASimpelConditionParamCallListWithoutParensValue(ASimpelConditionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelWorkbookParamCallListWithoutParensValue(AExcelWorkbookParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAParamWithParamNameParamCallListWithoutParensValue(AParamWithParamNameParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtParamCallListWithoutParensValue(AShortIfStmtParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingParamCallListWithoutParensValue(AMethodChainingParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseACharacterStringParamCallListWithoutParensValue(ACharacterStringParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionParamCallListWithoutParensValue(AArithmeticExpressionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodParamCallListWithoutParensValue(AMethodParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseATrueParamCallListWithoutParensValue(ATrueParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAFalseParamCallListWithoutParensValue(AFalseParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseACStrFunctionParamCallListWithoutParensValue(ACStrFunctionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseACIntFunctionParamCallListWithoutParensValue(ACIntFunctionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAUCaseFunctionParamCallListWithoutParensValue(AUCaseFunctionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseALenFunctionParamCallListWithoutParensValue(ALenFunctionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionParamCallListWithoutParensValue(AMidFunctionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseALeftFunctionParamCallListWithoutParensValue(ALeftFunctionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseARightFunctionParamCallListWithoutParensValue(ARightFunctionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseATrimFunctionParamCallListWithoutParensValue(ATrimFunctionParamCallListWithoutParensValue node)
    {
        defaultCase(node);
    }

    public void caseAParamWithParamName(AParamWithParamName node)
    {
        defaultCase(node);
    }

    public void caseADllFunction(ADllFunction node)
    {
        defaultCase(node);
    }

    public void caseADllFunctionCall(ADllFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAWaitSub(AWaitSub node)
    {
        defaultCase(node);
    }

    public void caseAWaitSubCall(AWaitSubCall node)
    {
        defaultCase(node);
    }

    public void caseACStrFunction(ACStrFunction node)
    {
        defaultCase(node);
    }

    public void caseACIntFunction(ACIntFunction node)
    {
        defaultCase(node);
    }

    public void caseAUCaseFunction(AUCaseFunction node)
    {
        defaultCase(node);
    }

    public void caseALenFunction(ALenFunction node)
    {
        defaultCase(node);
    }

    public void caseAMidFunction(AMidFunction node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionTwoParam(AMidFunctionTwoParam node)
    {
        defaultCase(node);
    }

    public void caseALeftFunction(ALeftFunction node)
    {
        defaultCase(node);
    }

    public void caseARightFunction(ARightFunction node)
    {
        defaultCase(node);
    }

    public void caseATrimFunction(ATrimFunction node)
    {
        defaultCase(node);
    }

    public void caseAUBoundFunction(AUBoundFunction node)
    {
        defaultCase(node);
    }

    public void caseALBoundFunction(ALBoundFunction node)
    {
        defaultCase(node);
    }

    public void caseACLngFunction(ACLngFunction node)
    {
        defaultCase(node);
    }

    public void caseACDblFunction(ACDblFunction node)
    {
        defaultCase(node);
    }

    public void caseACSngFunction(ACSngFunction node)
    {
        defaultCase(node);
    }

    public void caseARTrimFunction(ARTrimFunction node)
    {
        defaultCase(node);
    }

    public void caseALTrimFunction(ALTrimFunction node)
    {
        defaultCase(node);
    }

    public void caseALCaseFunction(ALCaseFunction node)
    {
        defaultCase(node);
    }

    public void caseASplitFunction(ASplitFunction node)
    {
        defaultCase(node);
    }

    public void caseASplitFunctionWithLimit(ASplitFunctionWithLimit node)
    {
        defaultCase(node);
    }

    public void caseAFormatFunction(AFormatFunction node)
    {
        defaultCase(node);
    }

    public void caseASpaceFunction(ASpaceFunction node)
    {
        defaultCase(node);
    }

    public void caseAChrFunction(AChrFunction node)
    {
        defaultCase(node);
    }

    public void caseANowFunction(ANowFunction node)
    {
        defaultCase(node);
    }

    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    public void caseAIfStmtOneLine(AIfStmtOneLine node)
    {
        defaultCase(node);
    }

    public void caseAExitForIfStmtOneLineValue(AExitForIfStmtOneLineValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingIfStmtOneLineValue(AMethodChainingIfStmtOneLineValue node)
    {
        defaultCase(node);
    }

    public void caseAVarSetIfStmtOneLineValue(AVarSetIfStmtOneLineValue node)
    {
        defaultCase(node);
    }

    public void caseAElseStmtIfStmtOneLineValue(AElseStmtIfStmtOneLineValue node)
    {
        defaultCase(node);
    }

    public void caseAAutoFitFunctionIfStmtOneLineValue(AAutoFitFunctionIfStmtOneLineValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallIfStmtOneLineValue(AMethodCallIfStmtOneLineValue node)
    {
        defaultCase(node);
    }

    public void caseAElseIfStm(AElseIfStm node)
    {
        defaultCase(node);
    }

    public void caseAElseStmt(AElseStmt node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmt(AShortIfStmt node)
    {
        defaultCase(node);
    }

    public void caseASelectStmt(ASelectStmt node)
    {
        defaultCase(node);
    }

    public void caseADefaultSelectCaseStmt(ADefaultSelectCaseStmt node)
    {
        defaultCase(node);
    }

    public void caseAValuesSelectCaseStmt(AValuesSelectCaseStmt node)
    {
        defaultCase(node);
    }

    public void caseAConditionInParens(AConditionInParens node)
    {
        defaultCase(node);
    }

    public void caseACondition(ACondition node)
    {
        defaultCase(node);
    }

    public void caseANotCondition(ANotCondition node)
    {
        defaultCase(node);
    }

    public void caseAComparisonCondition(AComparisonCondition node)
    {
        defaultCase(node);
    }

    public void caseAConditionInParensCondition(AConditionInParensCondition node)
    {
        defaultCase(node);
    }

    public void caseANotValueCondition(ANotValueCondition node)
    {
        defaultCase(node);
    }

    public void caseAAndLogicalPart(AAndLogicalPart node)
    {
        defaultCase(node);
    }

    public void caseAOrLogicalPart(AOrLogicalPart node)
    {
        defaultCase(node);
    }

    public void caseAAndNotLogicalPart(AAndNotLogicalPart node)
    {
        defaultCase(node);
    }

    public void caseAOrNotLogicalPart(AOrNotLogicalPart node)
    {
        defaultCase(node);
    }

    public void caseAConditionInParensLogicalValue(AConditionInParensLogicalValue node)
    {
        defaultCase(node);
    }

    public void caseAComparisonLogicalValue(AComparisonLogicalValue node)
    {
        defaultCase(node);
    }

    public void caseAValueLogicalValue(AValueLogicalValue node)
    {
        defaultCase(node);
    }

    public void caseANumberLogicalValue(ANumberLogicalValue node)
    {
        defaultCase(node);
    }

    public void caseAComparison(AComparison node)
    {
        defaultCase(node);
    }

    public void caseALofFunctionComparisonValue(ALofFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAConditionInParensComparisonValue(AConditionInParensComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAGetNameExcelFunctionComparisonValue(AGetNameExcelFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAMsgBoxFunctionComparisonValue(AMsgBoxFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelCellComparisonValue(AExcelCellComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingComparisonValue(AMethodChainingComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtComparisonValue(AShortIfStmtComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseACharacterStringComparisonValue(ACharacterStringComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseACharacterStringInParanesComparisonValue(ACharacterStringInParanesComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodComparisonValue(AMethodComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallInParensComparisonValue(AMethodCallInParensComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseACStrFunctionComparisonValue(ACStrFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAUCaseFunctionComparisonValue(AUCaseFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseALCaseFunctionComparisonValue(ALCaseFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionComparisonValue(AMidFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAMidFunctionTwoParamComparisonValue(AMidFunctionTwoParamComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseALeftFunctionComparisonValue(ALeftFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseARightFunctionComparisonValue(ARightFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseATrimFunctionComparisonValue(ATrimFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionComparisonValue(AArithmeticExpressionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionInParensComparisonValue(AArithmeticExpressionInParensComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseATrueComparisonValue(ATrueComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAFalseComparisonValue(AFalseComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseACIntFunctionComparisonValue(ACIntFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseALenFunctionComparisonValue(ALenFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseAUBoundFunctionComparisonValue(AUBoundFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseALBoundFunctionComparisonValue(ALBoundFunctionComparisonValue node)
    {
        defaultCase(node);
    }

    public void caseASimpelCondition(ASimpelCondition node)
    {
        defaultCase(node);
    }

    public void caseAOrSimpelConditionPart(AOrSimpelConditionPart node)
    {
        defaultCase(node);
    }

    public void caseAIdSimpelConditionValue(AIdSimpelConditionValue node)
    {
        defaultCase(node);
    }

    public void caseAShortIfStmtSimpelConditionValue(AShortIfStmtSimpelConditionValue node)
    {
        defaultCase(node);
    }

    public void caseANotIdSimpelConditionValue(ANotIdSimpelConditionValue node)
    {
        defaultCase(node);
    }

    public void caseAForEachStmt(AForEachStmt node)
    {
        defaultCase(node);
    }

    public void caseAForEachStmtOnlyNext(AForEachStmtOnlyNext node)
    {
        defaultCase(node);
    }

    public void caseAForStmt(AForStmt node)
    {
        defaultCase(node);
    }

    public void caseAForStmtStep(AForStmtStep node)
    {
        defaultCase(node);
    }

    public void caseAWhileStmt(AWhileStmt node)
    {
        defaultCase(node);
    }

    public void caseADoWhile(ADoWhile node)
    {
        defaultCase(node);
    }

    public void caseAOpenFileFunction(AOpenFileFunction node)
    {
        defaultCase(node);
    }

    public void caseAOpenFileAppendModeOpenFileMode(AOpenFileAppendModeOpenFileMode node)
    {
        defaultCase(node);
    }

    public void caseAOpenFileInputModeOpenFileMode(AOpenFileInputModeOpenFileMode node)
    {
        defaultCase(node);
    }

    public void caseAOpenFileOutputModeOpenFileMode(AOpenFileOutputModeOpenFileMode node)
    {
        defaultCase(node);
    }

    public void caseACloseFileFunction(ACloseFileFunction node)
    {
        defaultCase(node);
    }

    public void caseAAPrintFunction(AAPrintFunction node)
    {
        defaultCase(node);
    }

    public void caseABPrintFunction(ABPrintFunction node)
    {
        defaultCase(node);
    }

    public void caseAValueCommaPrintFunctionPart(AValueCommaPrintFunctionPart node)
    {
        defaultCase(node);
    }

    public void caseAValueSemicolonPrintFunctionPart(AValueSemicolonPrintFunctionPart node)
    {
        defaultCase(node);
    }

    public void caseASemicolonPrintFunctionPart(ASemicolonPrintFunctionPart node)
    {
        defaultCase(node);
    }

    public void caseAFreeFileFunction(AFreeFileFunction node)
    {
        defaultCase(node);
    }

    public void caseADebugPrintFunction(ADebugPrintFunction node)
    {
        defaultCase(node);
    }

    public void caseAKillFunction(AKillFunction node)
    {
        defaultCase(node);
    }

    public void caseARenameFileFunction(ARenameFileFunction node)
    {
        defaultCase(node);
    }

    public void caseAInputFunction(AInputFunction node)
    {
        defaultCase(node);
    }

    public void caseALofFunction(ALofFunction node)
    {
        defaultCase(node);
    }

    public void caseAMsgBoxFunction(AMsgBoxFunction node)
    {
        defaultCase(node);
    }

    public void caseAMsgBoxFunctionWithoutParens(AMsgBoxFunctionWithoutParens node)
    {
        defaultCase(node);
    }

    public void caseAExcelActiveWindow(AExcelActiveWindow node)
    {
        defaultCase(node);
    }

    public void caseAActiveWorbookExcelWorkbook(AActiveWorbookExcelWorkbook node)
    {
        defaultCase(node);
    }

    public void caseAExcelWorkbook(AExcelWorkbook node)
    {
        defaultCase(node);
    }

    public void caseAIdExcelWorkbook(AIdExcelWorkbook node)
    {
        defaultCase(node);
    }

    public void caseAActiveWindowExcelSheet(AActiveWindowExcelSheet node)
    {
        defaultCase(node);
    }

    public void caseAWorkbookExcelSheet(AWorkbookExcelSheet node)
    {
        defaultCase(node);
    }

    public void caseAMethodChainingExcelSheet(AMethodChainingExcelSheet node)
    {
        defaultCase(node);
    }

    public void caseAIdExcelSheet(AIdExcelSheet node)
    {
        defaultCase(node);
    }

    public void caseAWorksheetsExcelSheet(AWorksheetsExcelSheet node)
    {
        defaultCase(node);
    }

    public void caseASelectedSheetsExcelSheetValue(ASelectedSheetsExcelSheetValue node)
    {
        defaultCase(node);
    }

    public void caseAActiveSheetExcelSheetValue(AActiveSheetExcelSheetValue node)
    {
        defaultCase(node);
    }

    public void caseASheetsExcelSheetValue(ASheetsExcelSheetValue node)
    {
        defaultCase(node);
    }

    public void caseASheetsWithParamsExcelSheetValue(ASheetsWithParamsExcelSheetValue node)
    {
        defaultCase(node);
    }

    public void caseAWorksheetsWithParamsExcelSheetValue(AWorksheetsWithParamsExcelSheetValue node)
    {
        defaultCase(node);
    }

    public void caseAWorksheetsExcelSheetValue(AWorksheetsExcelSheetValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelRow(AExcelRow node)
    {
        defaultCase(node);
    }

    public void caseACellExcelRow(ACellExcelRow node)
    {
        defaultCase(node);
    }

    public void caseARowsRowsExcelRow(ARowsRowsExcelRow node)
    {
        defaultCase(node);
    }

    public void caseAWithParamsExcelRow(AWithParamsExcelRow node)
    {
        defaultCase(node);
    }

    public void caseAEntireRowExcelRowValue(AEntireRowExcelRowValue node)
    {
        defaultCase(node);
    }

    public void caseACellExcelColumn(ACellExcelColumn node)
    {
        defaultCase(node);
    }

    public void caseASheetExcelColumn(ASheetExcelColumn node)
    {
        defaultCase(node);
    }

    public void caseAEntireColumnExcelColumneValue(AEntireColumnExcelColumneValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelColumneValue(AExcelColumneValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelCell(AExcelCell node)
    {
        defaultCase(node);
    }

    public void caseAWithParamsExcelCellValue(AWithParamsExcelCellValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelCellValue(AExcelCellValue node)
    {
        defaultCase(node);
    }

    public void caseAExcelRange(AExcelRange node)
    {
        defaultCase(node);
    }

    public void caseAExcelRangeValue(AExcelRangeValue node)
    {
        defaultCase(node);
    }

    public void caseAWithParamsExcelSelection(AWithParamsExcelSelection node)
    {
        defaultCase(node);
    }

    public void caseAExcelSelection(AExcelSelection node)
    {
        defaultCase(node);
    }

    public void caseACopyFunction(ACopyFunction node)
    {
        defaultCase(node);
    }

    public void caseAActiveWorbookFullNameFunction(AActiveWorbookFullNameFunction node)
    {
        defaultCase(node);
    }

    public void caseAColumnSetHiddenFunction(AColumnSetHiddenFunction node)
    {
        defaultCase(node);
    }

    public void caseARowSetHiddenFunction(ARowSetHiddenFunction node)
    {
        defaultCase(node);
    }

    public void caseASheetSetVisibleFunction(ASheetSetVisibleFunction node)
    {
        defaultCase(node);
    }

    public void caseARangeSelectFunction(ARangeSelectFunction node)
    {
        defaultCase(node);
    }

    public void caseACellSelectFunction(ACellSelectFunction node)
    {
        defaultCase(node);
    }

    public void caseASheetSelectFunction(ASheetSelectFunction node)
    {
        defaultCase(node);
    }

    public void caseASheetGetNameExcelFunction(ASheetGetNameExcelFunction node)
    {
        defaultCase(node);
    }

    public void caseAWorkbookGetNameExcelFunction(AWorkbookGetNameExcelFunction node)
    {
        defaultCase(node);
    }

    public void caseASetNameExcelFunction(ASetNameExcelFunction node)
    {
        defaultCase(node);
    }

    public void caseACountFunction(ACountFunction node)
    {
        defaultCase(node);
    }

    public void caseAMoveFunction(AMoveFunction node)
    {
        defaultCase(node);
    }

    public void caseARowAutoFitFunction(ARowAutoFitFunction node)
    {
        defaultCase(node);
    }

    public void caseAColumnAutoFitFunction(AColumnAutoFitFunction node)
    {
        defaultCase(node);
    }

    public void caseASheetAddFunction(ASheetAddFunction node)
    {
        defaultCase(node);
    }

    public void caseASheetDeleteFunction(ASheetDeleteFunction node)
    {
        defaultCase(node);
    }

    public void caseASheetActivateFunction(ASheetActivateFunction node)
    {
        defaultCase(node);
    }

    public void caseASetCellFunction(ASetCellFunction node)
    {
        defaultCase(node);
    }

    public void caseATryResumeNextTry(ATryResumeNextTry node)
    {
        defaultCase(node);
    }

    public void caseATrySetNameTry(ATrySetNameTry node)
    {
        defaultCase(node);
    }

    public void caseATryErrorExitTry(ATryErrorExitTry node)
    {
        defaultCase(node);
    }

    public void caseAGotoCall(AGotoCall node)
    {
        defaultCase(node);
    }

    public void caseAGotoCodeStart(AGotoCodeStart node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTOptionExpl(TOptionExpl node)
    {
        defaultCase(node);
    }

    public void caseTContinueMark(TContinueMark node)
    {
        defaultCase(node);
    }

    public void caseTDim(TDim node)
    {
        defaultCase(node);
    }

    public void caseTByRef(TByRef node)
    {
        defaultCase(node);
    }

    public void caseTByVal(TByVal node)
    {
        defaultCase(node);
    }

    public void caseTSet(TSet node)
    {
        defaultCase(node);
    }

    public void caseTEndOfLine(TEndOfLine node)
    {
        defaultCase(node);
    }

    public void caseTOpenParen(TOpenParen node)
    {
        defaultCase(node);
    }

    public void caseTCloseParen(TCloseParen node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTAllocation(TAllocation node)
    {
        defaultCase(node);
    }

    public void caseTBooleanTokenTrue(TBooleanTokenTrue node)
    {
        defaultCase(node);
    }

    public void caseTBooleanTokenFalse(TBooleanTokenFalse node)
    {
        defaultCase(node);
    }

    public void caseTAddition(TAddition node)
    {
        defaultCase(node);
    }

    public void caseTSubtraction(TSubtraction node)
    {
        defaultCase(node);
    }

    public void caseTMultiplication(TMultiplication node)
    {
        defaultCase(node);
    }

    public void caseTDivision(TDivision node)
    {
        defaultCase(node);
    }

    public void caseTModulo(TModulo node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTNotEqual(TNotEqual node)
    {
        defaultCase(node);
    }

    public void caseTLessThan(TLessThan node)
    {
        defaultCase(node);
    }

    public void caseTGreaterThan(TGreaterThan node)
    {
        defaultCase(node);
    }

    public void caseTLessThanOrEqual(TLessThanOrEqual node)
    {
        defaultCase(node);
    }

    public void caseTGreaterThanOrEqual(TGreaterThanOrEqual node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTDeclare(TDeclare node)
    {
        defaultCase(node);
    }

    public void caseTPrivate(TPrivate node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTGlobal(TGlobal node)
    {
        defaultCase(node);
    }

    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    public void caseTOptional(TOptional node)
    {
        defaultCase(node);
    }

    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    public void caseTAttribute(TAttribute node)
    {
        defaultCase(node);
    }

    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    public void caseTSingle(TSingle node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTArrayResizeToken(TArrayResizeToken node)
    {
        defaultCase(node);
    }

    public void caseTPreserve(TPreserve node)
    {
        defaultCase(node);
    }

    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    public void caseTEnumStart(TEnumStart node)
    {
        defaultCase(node);
    }

    public void caseTEnumEnd(TEnumEnd node)
    {
        defaultCase(node);
    }

    public void caseTTypeStart(TTypeStart node)
    {
        defaultCase(node);
    }

    public void caseTTypeEnd(TTypeEnd node)
    {
        defaultCase(node);
    }

    public void caseTSubStart(TSubStart node)
    {
        defaultCase(node);
    }

    public void caseTSubEnd(TSubEnd node)
    {
        defaultCase(node);
    }

    public void caseTFunctionStart(TFunctionStart node)
    {
        defaultCase(node);
    }

    public void caseTFunctionEnd(TFunctionEnd node)
    {
        defaultCase(node);
    }

    public void caseTDllFunctionToken(TDllFunctionToken node)
    {
        defaultCase(node);
    }

    public void caseTDllFunctionCallToken(TDllFunctionCallToken node)
    {
        defaultCase(node);
    }

    public void caseTActiveWindow(TActiveWindow node)
    {
        defaultCase(node);
    }

    public void caseTActiveWorbook(TActiveWorbook node)
    {
        defaultCase(node);
    }

    public void caseTActiveSheet(TActiveSheet node)
    {
        defaultCase(node);
    }

    public void caseTWorkbooks(TWorkbooks node)
    {
        defaultCase(node);
    }

    public void caseTWorkbook(TWorkbook node)
    {
        defaultCase(node);
    }

    public void caseTWorksheets(TWorksheets node)
    {
        defaultCase(node);
    }

    public void caseTSheets(TSheets node)
    {
        defaultCase(node);
    }

    public void caseTSelectedSheets(TSelectedSheets node)
    {
        defaultCase(node);
    }

    public void caseTWorksheet(TWorksheet node)
    {
        defaultCase(node);
    }

    public void caseTWait(TWait node)
    {
        defaultCase(node);
    }

    public void caseTCopy(TCopy node)
    {
        defaultCase(node);
    }

    public void caseTFullName(TFullName node)
    {
        defaultCase(node);
    }

    public void caseTName(TName node)
    {
        defaultCase(node);
    }

    public void caseTHidden(THidden node)
    {
        defaultCase(node);
    }

    public void caseTVisible(TVisible node)
    {
        defaultCase(node);
    }

    public void caseTCells(TCells node)
    {
        defaultCase(node);
    }

    public void caseTSelect(TSelect node)
    {
        defaultCase(node);
    }

    public void caseTCount(TCount node)
    {
        defaultCase(node);
    }

    public void caseTMove(TMove node)
    {
        defaultCase(node);
    }

    public void caseTAdd(TAdd node)
    {
        defaultCase(node);
    }

    public void caseTDelete(TDelete node)
    {
        defaultCase(node);
    }

    public void caseTActivate(TActivate node)
    {
        defaultCase(node);
    }

    public void caseTSelection(TSelection node)
    {
        defaultCase(node);
    }

    public void caseTFormatConditions(TFormatConditions node)
    {
        defaultCase(node);
    }

    public void caseTInterior(TInterior node)
    {
        defaultCase(node);
    }

    public void caseTAutoFit(TAutoFit node)
    {
        defaultCase(node);
    }

    public void caseTRange(TRange node)
    {
        defaultCase(node);
    }

    public void caseTRows(TRows node)
    {
        defaultCase(node);
    }

    public void caseTColumns(TColumns node)
    {
        defaultCase(node);
    }

    public void caseTEntireRow(TEntireRow node)
    {
        defaultCase(node);
    }

    public void caseTEntireColumn(TEntireColumn node)
    {
        defaultCase(node);
    }

    public void caseTNow(TNow node)
    {
        defaultCase(node);
    }

    public void caseTCStr(TCStr node)
    {
        defaultCase(node);
    }

    public void caseTCInt(TCInt node)
    {
        defaultCase(node);
    }

    public void caseTUCase(TUCase node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTMid(TMid node)
    {
        defaultCase(node);
    }

    public void caseTLeft(TLeft node)
    {
        defaultCase(node);
    }

    public void caseTRight(TRight node)
    {
        defaultCase(node);
    }

    public void caseTTrim(TTrim node)
    {
        defaultCase(node);
    }

    public void caseTUBound(TUBound node)
    {
        defaultCase(node);
    }

    public void caseTLBound(TLBound node)
    {
        defaultCase(node);
    }

    public void caseTCLng(TCLng node)
    {
        defaultCase(node);
    }

    public void caseTCDbl(TCDbl node)
    {
        defaultCase(node);
    }

    public void caseTCSng(TCSng node)
    {
        defaultCase(node);
    }

    public void caseTRTrim(TRTrim node)
    {
        defaultCase(node);
    }

    public void caseTLTrim(TLTrim node)
    {
        defaultCase(node);
    }

    public void caseTLCase(TLCase node)
    {
        defaultCase(node);
    }

    public void caseTSplit(TSplit node)
    {
        defaultCase(node);
    }

    public void caseTFormat(TFormat node)
    {
        defaultCase(node);
    }

    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }

    public void caseTChr(TChr node)
    {
        defaultCase(node);
    }

    public void caseTInStr(TInStr node)
    {
        defaultCase(node);
    }

    public void caseTReplace(TReplace node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTShortIf(TShortIf node)
    {
        defaultCase(node);
    }

    public void caseTElseIf(TElseIf node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTEndIf(TEndIf node)
    {
        defaultCase(node);
    }

    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    public void caseTSelectStart(TSelectStart node)
    {
        defaultCase(node);
    }

    public void caseTSelectCase(TSelectCase node)
    {
        defaultCase(node);
    }

    public void caseTSelectEnd(TSelectEnd node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTEachStart(TEachStart node)
    {
        defaultCase(node);
    }

    public void caseTForStart(TForStart node)
    {
        defaultCase(node);
    }

    public void caseTForEnd(TForEnd node)
    {
        defaultCase(node);
    }

    public void caseTForStep(TForStep node)
    {
        defaultCase(node);
    }

    public void caseTWhileStart(TWhileStart node)
    {
        defaultCase(node);
    }

    public void caseTWhileEnd(TWhileEnd node)
    {
        defaultCase(node);
    }

    public void caseTDoWhileStart(TDoWhileStart node)
    {
        defaultCase(node);
    }

    public void caseTDoWhileEnd(TDoWhileEnd node)
    {
        defaultCase(node);
    }

    public void caseTMethodChainingOperator(TMethodChainingOperator node)
    {
        defaultCase(node);
    }

    public void caseTTryResumeNext(TTryResumeNext node)
    {
        defaultCase(node);
    }

    public void caseTTrySetName(TTrySetName node)
    {
        defaultCase(node);
    }

    public void caseTTryErrorExit(TTryErrorExit node)
    {
        defaultCase(node);
    }

    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    public void caseTGotoId(TGotoId node)
    {
        defaultCase(node);
    }

    public void caseTExitFor(TExitFor node)
    {
        defaultCase(node);
    }

    public void caseTExitSub(TExitSub node)
    {
        defaultCase(node);
    }

    public void caseTExitFunction(TExitFunction node)
    {
        defaultCase(node);
    }

    public void caseTHash(THash node)
    {
        defaultCase(node);
    }

    public void caseTOpenFile(TOpenFile node)
    {
        defaultCase(node);
    }

    public void caseTOpenFileAppendMode(TOpenFileAppendMode node)
    {
        defaultCase(node);
    }

    public void caseTOpenFileInputMode(TOpenFileInputMode node)
    {
        defaultCase(node);
    }

    public void caseTOpenFileOutputMode(TOpenFileOutputMode node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTFreeFile(TFreeFile node)
    {
        defaultCase(node);
    }

    public void caseTDebugPrint(TDebugPrint node)
    {
        defaultCase(node);
    }

    public void caseTKill(TKill node)
    {
        defaultCase(node);
    }

    public void caseTClose(TClose node)
    {
        defaultCase(node);
    }

    public void caseTInput(TInput node)
    {
        defaultCase(node);
    }

    public void caseTLof(TLof node)
    {
        defaultCase(node);
    }

    public void caseTCommentToken(TCommentToken node)
    {
        defaultCase(node);
    }

    public void caseTMsgBox(TMsgBox node)
    {
        defaultCase(node);
    }

    public void caseTStringToken(TStringToken node)
    {
        defaultCase(node);
    }

    public void caseTAmpersand(TAmpersand node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTIdToken(TIdToken node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
