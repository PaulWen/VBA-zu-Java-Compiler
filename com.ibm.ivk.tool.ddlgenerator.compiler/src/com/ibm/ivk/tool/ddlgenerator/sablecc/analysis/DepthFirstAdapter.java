/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.analysis;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPFile().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAFile(AFile node)
    {
        defaultIn(node);
    }

    public void outAFile(AFile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFile(AFile node)
    {
        inAFile(node);
        {
            List<PFileStmt> copy = new ArrayList<PFileStmt>(node.getFileStmt());
            for(PFileStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAFile(node);
    }

    public void inAAttributeDecInFileStmt(AAttributeDecInFileStmt node)
    {
        defaultIn(node);
    }

    public void outAAttributeDecInFileStmt(AAttributeDecInFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributeDecInFileStmt(AAttributeDecInFileStmt node)
    {
        inAAttributeDecInFileStmt(node);
        if(node.getAttributeDecIn() != null)
        {
            node.getAttributeDecIn().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAAttributeDecInFileStmt(node);
    }

    public void inAVarDecFileStmt(AVarDecFileStmt node)
    {
        defaultIn(node);
    }

    public void outAVarDecFileStmt(AVarDecFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecFileStmt(AVarDecFileStmt node)
    {
        inAVarDecFileStmt(node);
        if(node.getVarDec() != null)
        {
            node.getVarDec().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAVarDecFileStmt(node);
    }

    public void inAVarDecInFileStmt(AVarDecInFileStmt node)
    {
        defaultIn(node);
    }

    public void outAVarDecInFileStmt(AVarDecInFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecInFileStmt(AVarDecInFileStmt node)
    {
        inAVarDecInFileStmt(node);
        if(node.getVarDecIn() != null)
        {
            node.getVarDecIn().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAVarDecInFileStmt(node);
    }

    public void inAArrayDecFileStmt(AArrayDecFileStmt node)
    {
        defaultIn(node);
    }

    public void outAArrayDecFileStmt(AArrayDecFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDecFileStmt(AArrayDecFileStmt node)
    {
        inAArrayDecFileStmt(node);
        if(node.getArrayDec() != null)
        {
            node.getArrayDec().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAArrayDecFileStmt(node);
    }

    public void inAEnumDecInFileStmt(AEnumDecInFileStmt node)
    {
        defaultIn(node);
    }

    public void outAEnumDecInFileStmt(AEnumDecInFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumDecInFileStmt(AEnumDecInFileStmt node)
    {
        inAEnumDecInFileStmt(node);
        if(node.getEnumDecIn() != null)
        {
            node.getEnumDecIn().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAEnumDecInFileStmt(node);
    }

    public void inATypeDecFileStmt(ATypeDecFileStmt node)
    {
        defaultIn(node);
    }

    public void outATypeDecFileStmt(ATypeDecFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDecFileStmt(ATypeDecFileStmt node)
    {
        inATypeDecFileStmt(node);
        if(node.getTypeDec() != null)
        {
            node.getTypeDec().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outATypeDecFileStmt(node);
    }

    public void inASubFileStmt(ASubFileStmt node)
    {
        defaultIn(node);
    }

    public void outASubFileStmt(ASubFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubFileStmt(ASubFileStmt node)
    {
        inASubFileStmt(node);
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outASubFileStmt(node);
    }

    public void inAFunctionFileStmt(AFunctionFileStmt node)
    {
        defaultIn(node);
    }

    public void outAFunctionFileStmt(AFunctionFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionFileStmt(AFunctionFileStmt node)
    {
        inAFunctionFileStmt(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAFunctionFileStmt(node);
    }

    public void inAFunctionWithoutReturnTypeFileStmt(AFunctionWithoutReturnTypeFileStmt node)
    {
        defaultIn(node);
    }

    public void outAFunctionWithoutReturnTypeFileStmt(AFunctionWithoutReturnTypeFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionWithoutReturnTypeFileStmt(AFunctionWithoutReturnTypeFileStmt node)
    {
        inAFunctionWithoutReturnTypeFileStmt(node);
        if(node.getFunctionWithoutReturnType() != null)
        {
            node.getFunctionWithoutReturnType().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAFunctionWithoutReturnTypeFileStmt(node);
    }

    public void inADllFunctionFileStmt(ADllFunctionFileStmt node)
    {
        defaultIn(node);
    }

    public void outADllFunctionFileStmt(ADllFunctionFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADllFunctionFileStmt(ADllFunctionFileStmt node)
    {
        inADllFunctionFileStmt(node);
        if(node.getDllFunction() != null)
        {
            node.getDllFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outADllFunctionFileStmt(node);
    }

    public void inAWaitSubFileStmt(AWaitSubFileStmt node)
    {
        defaultIn(node);
    }

    public void outAWaitSubFileStmt(AWaitSubFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWaitSubFileStmt(AWaitSubFileStmt node)
    {
        inAWaitSubFileStmt(node);
        if(node.getWaitSub() != null)
        {
            node.getWaitSub().apply(this);
        }
        outAWaitSubFileStmt(node);
    }

    public void inAGeneralStmtFileStmt(AGeneralStmtFileStmt node)
    {
        defaultIn(node);
    }

    public void outAGeneralStmtFileStmt(AGeneralStmtFileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralStmtFileStmt(AGeneralStmtFileStmt node)
    {
        inAGeneralStmtFileStmt(node);
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAGeneralStmtFileStmt(node);
    }

    public void inAAttributeDecInFunctionStmt(AAttributeDecInFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAAttributeDecInFunctionStmt(AAttributeDecInFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributeDecInFunctionStmt(AAttributeDecInFunctionStmt node)
    {
        inAAttributeDecInFunctionStmt(node);
        if(node.getAttributeDecIn() != null)
        {
            node.getAttributeDecIn().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAAttributeDecInFunctionStmt(node);
    }

    public void inAVarDecFunctionStmt(AVarDecFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAVarDecFunctionStmt(AVarDecFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecFunctionStmt(AVarDecFunctionStmt node)
    {
        inAVarDecFunctionStmt(node);
        if(node.getVarDec() != null)
        {
            node.getVarDec().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAVarDecFunctionStmt(node);
    }

    public void inAVarDecInFunctionStmt(AVarDecInFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAVarDecInFunctionStmt(AVarDecInFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecInFunctionStmt(AVarDecInFunctionStmt node)
    {
        inAVarDecInFunctionStmt(node);
        if(node.getVarDecIn() != null)
        {
            node.getVarDecIn().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAVarDecInFunctionStmt(node);
    }

    public void inAVarDecInWithDataTypeFunctionStmt(AVarDecInWithDataTypeFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAVarDecInWithDataTypeFunctionStmt(AVarDecInWithDataTypeFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecInWithDataTypeFunctionStmt(AVarDecInWithDataTypeFunctionStmt node)
    {
        inAVarDecInWithDataTypeFunctionStmt(node);
        if(node.getVarDecInWithDataType() != null)
        {
            node.getVarDecInWithDataType().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAVarDecInWithDataTypeFunctionStmt(node);
    }

    public void inAVarDecListFunctionStmt(AVarDecListFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAVarDecListFunctionStmt(AVarDecListFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecListFunctionStmt(AVarDecListFunctionStmt node)
    {
        inAVarDecListFunctionStmt(node);
        if(node.getVarDecList() != null)
        {
            node.getVarDecList().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAVarDecListFunctionStmt(node);
    }

    public void inAArrayDecFunctionStmt(AArrayDecFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAArrayDecFunctionStmt(AArrayDecFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDecFunctionStmt(AArrayDecFunctionStmt node)
    {
        inAArrayDecFunctionStmt(node);
        if(node.getArrayDec() != null)
        {
            node.getArrayDec().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAArrayDecFunctionStmt(node);
    }

    public void inAVarSetFunctionStmt(AVarSetFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAVarSetFunctionStmt(AVarSetFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSetFunctionStmt(AVarSetFunctionStmt node)
    {
        inAVarSetFunctionStmt(node);
        if(node.getVarSet() != null)
        {
            node.getVarSet().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAVarSetFunctionStmt(node);
    }

    public void inAIfStmtFunctionStmt(AIfStmtFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmtFunctionStmt(AIfStmtFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtFunctionStmt(AIfStmtFunctionStmt node)
    {
        inAIfStmtFunctionStmt(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAIfStmtFunctionStmt(node);
    }

    public void inAIfStmtOneLineFunctionStmt(AIfStmtOneLineFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmtOneLineFunctionStmt(AIfStmtOneLineFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtOneLineFunctionStmt(AIfStmtOneLineFunctionStmt node)
    {
        inAIfStmtOneLineFunctionStmt(node);
        if(node.getIfStmtOneLine() != null)
        {
            node.getIfStmtOneLine().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAIfStmtOneLineFunctionStmt(node);
    }

    public void inAElseIfStmFunctionStmt(AElseIfStmFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAElseIfStmFunctionStmt(AElseIfStmFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseIfStmFunctionStmt(AElseIfStmFunctionStmt node)
    {
        inAElseIfStmFunctionStmt(node);
        if(node.getElseIfStm() != null)
        {
            node.getElseIfStm().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAElseIfStmFunctionStmt(node);
    }

    public void inAElseStmtFunctionStmt(AElseStmtFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAElseStmtFunctionStmt(AElseStmtFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStmtFunctionStmt(AElseStmtFunctionStmt node)
    {
        inAElseStmtFunctionStmt(node);
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAElseStmtFunctionStmt(node);
    }

    public void inASelectStmtFunctionStmt(ASelectStmtFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outASelectStmtFunctionStmt(ASelectStmtFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectStmtFunctionStmt(ASelectStmtFunctionStmt node)
    {
        inASelectStmtFunctionStmt(node);
        if(node.getSelectStmt() != null)
        {
            node.getSelectStmt().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outASelectStmtFunctionStmt(node);
    }

    public void inAForEachStmtFunctionStmt(AForEachStmtFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAForEachStmtFunctionStmt(AForEachStmtFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForEachStmtFunctionStmt(AForEachStmtFunctionStmt node)
    {
        inAForEachStmtFunctionStmt(node);
        if(node.getForEachStmt() != null)
        {
            node.getForEachStmt().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAForEachStmtFunctionStmt(node);
    }

    public void inAForEachStmtOnlyNextFunctionStmt(AForEachStmtOnlyNextFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAForEachStmtOnlyNextFunctionStmt(AForEachStmtOnlyNextFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForEachStmtOnlyNextFunctionStmt(AForEachStmtOnlyNextFunctionStmt node)
    {
        inAForEachStmtOnlyNextFunctionStmt(node);
        if(node.getForEachStmtOnlyNext() != null)
        {
            node.getForEachStmtOnlyNext().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAForEachStmtOnlyNextFunctionStmt(node);
    }

    public void inAForStmtFunctionStmt(AForStmtFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAForStmtFunctionStmt(AForStmtFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmtFunctionStmt(AForStmtFunctionStmt node)
    {
        inAForStmtFunctionStmt(node);
        if(node.getForStmt() != null)
        {
            node.getForStmt().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAForStmtFunctionStmt(node);
    }

    public void inAForStmtStepFunctionStmt(AForStmtStepFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAForStmtStepFunctionStmt(AForStmtStepFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmtStepFunctionStmt(AForStmtStepFunctionStmt node)
    {
        inAForStmtStepFunctionStmt(node);
        if(node.getForStmtStep() != null)
        {
            node.getForStmtStep().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAForStmtStepFunctionStmt(node);
    }

    public void inAWhileStmtFunctionStmt(AWhileStmtFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtFunctionStmt(AWhileStmtFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtFunctionStmt(AWhileStmtFunctionStmt node)
    {
        inAWhileStmtFunctionStmt(node);
        if(node.getWhileStmt() != null)
        {
            node.getWhileStmt().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAWhileStmtFunctionStmt(node);
    }

    public void inADoWhileFunctionStmt(ADoWhileFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outADoWhileFunctionStmt(ADoWhileFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoWhileFunctionStmt(ADoWhileFunctionStmt node)
    {
        inADoWhileFunctionStmt(node);
        if(node.getDoWhile() != null)
        {
            node.getDoWhile().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outADoWhileFunctionStmt(node);
    }

    public void inATryFunctionStmt(ATryFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outATryFunctionStmt(ATryFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATryFunctionStmt(ATryFunctionStmt node)
    {
        inATryFunctionStmt(node);
        if(node.getTry() != null)
        {
            node.getTry().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outATryFunctionStmt(node);
    }

    public void inAGotoCallFunctionStmt(AGotoCallFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAGotoCallFunctionStmt(AGotoCallFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotoCallFunctionStmt(AGotoCallFunctionStmt node)
    {
        inAGotoCallFunctionStmt(node);
        if(node.getGotoCall() != null)
        {
            node.getGotoCall().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAGotoCallFunctionStmt(node);
    }

    public void inAGotoCodeStartFunctionStmt(AGotoCodeStartFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAGotoCodeStartFunctionStmt(AGotoCodeStartFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotoCodeStartFunctionStmt(AGotoCodeStartFunctionStmt node)
    {
        inAGotoCodeStartFunctionStmt(node);
        if(node.getGotoCodeStart() != null)
        {
            node.getGotoCodeStart().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAGotoCodeStartFunctionStmt(node);
    }

    public void inAExitForFunctionStmt(AExitForFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAExitForFunctionStmt(AExitForFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitForFunctionStmt(AExitForFunctionStmt node)
    {
        inAExitForFunctionStmt(node);
        if(node.getExitFor() != null)
        {
            node.getExitFor().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAExitForFunctionStmt(node);
    }

    public void inAExitSubFunctionStmt(AExitSubFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAExitSubFunctionStmt(AExitSubFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitSubFunctionStmt(AExitSubFunctionStmt node)
    {
        inAExitSubFunctionStmt(node);
        if(node.getExitSub() != null)
        {
            node.getExitSub().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAExitSubFunctionStmt(node);
    }

    public void inAExitFunctionFunctionStmt(AExitFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAExitFunctionFunctionStmt(AExitFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitFunctionFunctionStmt(AExitFunctionFunctionStmt node)
    {
        inAExitFunctionFunctionStmt(node);
        if(node.getExitFunction() != null)
        {
            node.getExitFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAExitFunctionFunctionStmt(node);
    }

    public void inAMethodCallFunctionStmt(AMethodCallFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAMethodCallFunctionStmt(AMethodCallFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallFunctionStmt(AMethodCallFunctionStmt node)
    {
        inAMethodCallFunctionStmt(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAMethodCallFunctionStmt(node);
    }

    public void inAMethodCallWithoutParensFunctionStmt(AMethodCallWithoutParensFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAMethodCallWithoutParensFunctionStmt(AMethodCallWithoutParensFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallWithoutParensFunctionStmt(AMethodCallWithoutParensFunctionStmt node)
    {
        inAMethodCallWithoutParensFunctionStmt(node);
        if(node.getMethodCallWithoutParens() != null)
        {
            node.getMethodCallWithoutParens().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAMethodCallWithoutParensFunctionStmt(node);
    }

    public void inADllFunctionCallFunctionStmt(ADllFunctionCallFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outADllFunctionCallFunctionStmt(ADllFunctionCallFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADllFunctionCallFunctionStmt(ADllFunctionCallFunctionStmt node)
    {
        inADllFunctionCallFunctionStmt(node);
        if(node.getDllFunctionCall() != null)
        {
            node.getDllFunctionCall().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outADllFunctionCallFunctionStmt(node);
    }

    public void inAWaitSubCallFunctionStmt(AWaitSubCallFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAWaitSubCallFunctionStmt(AWaitSubCallFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWaitSubCallFunctionStmt(AWaitSubCallFunctionStmt node)
    {
        inAWaitSubCallFunctionStmt(node);
        if(node.getWaitSubCall() != null)
        {
            node.getWaitSubCall().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAWaitSubCallFunctionStmt(node);
    }

    public void inAArrayResizeFunctionStmt(AArrayResizeFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAArrayResizeFunctionStmt(AArrayResizeFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayResizeFunctionStmt(AArrayResizeFunctionStmt node)
    {
        inAArrayResizeFunctionStmt(node);
        if(node.getArrayResize() != null)
        {
            node.getArrayResize().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAArrayResizeFunctionStmt(node);
    }

    public void inAArrayResizePreserveDataFunctionStmt(AArrayResizePreserveDataFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAArrayResizePreserveDataFunctionStmt(AArrayResizePreserveDataFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayResizePreserveDataFunctionStmt(AArrayResizePreserveDataFunctionStmt node)
    {
        inAArrayResizePreserveDataFunctionStmt(node);
        if(node.getArrayResizePreserveData() != null)
        {
            node.getArrayResizePreserveData().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAArrayResizePreserveDataFunctionStmt(node);
    }

    public void inAArraySetElementFunctionStmt(AArraySetElementFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAArraySetElementFunctionStmt(AArraySetElementFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySetElementFunctionStmt(AArraySetElementFunctionStmt node)
    {
        inAArraySetElementFunctionStmt(node);
        if(node.getArraySetElement() != null)
        {
            node.getArraySetElement().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAArraySetElementFunctionStmt(node);
    }

    public void inAOpenFileFunctionFunctionStmt(AOpenFileFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAOpenFileFunctionFunctionStmt(AOpenFileFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenFileFunctionFunctionStmt(AOpenFileFunctionFunctionStmt node)
    {
        inAOpenFileFunctionFunctionStmt(node);
        if(node.getOpenFileFunction() != null)
        {
            node.getOpenFileFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAOpenFileFunctionFunctionStmt(node);
    }

    public void inACloseFileFunctionFunctionStmt(ACloseFileFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outACloseFileFunctionFunctionStmt(ACloseFileFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACloseFileFunctionFunctionStmt(ACloseFileFunctionFunctionStmt node)
    {
        inACloseFileFunctionFunctionStmt(node);
        if(node.getCloseFileFunction() != null)
        {
            node.getCloseFileFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outACloseFileFunctionFunctionStmt(node);
    }

    public void inAPrintFunctionFunctionStmt(APrintFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintFunctionFunctionStmt(APrintFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintFunctionFunctionStmt(APrintFunctionFunctionStmt node)
    {
        inAPrintFunctionFunctionStmt(node);
        if(node.getPrintFunction() != null)
        {
            node.getPrintFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAPrintFunctionFunctionStmt(node);
    }

    public void inADebugPrintFunctionFunctionStmt(ADebugPrintFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outADebugPrintFunctionFunctionStmt(ADebugPrintFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADebugPrintFunctionFunctionStmt(ADebugPrintFunctionFunctionStmt node)
    {
        inADebugPrintFunctionFunctionStmt(node);
        if(node.getDebugPrintFunction() != null)
        {
            node.getDebugPrintFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outADebugPrintFunctionFunctionStmt(node);
    }

    public void inAKillFunctionFunctionStmt(AKillFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAKillFunctionFunctionStmt(AKillFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKillFunctionFunctionStmt(AKillFunctionFunctionStmt node)
    {
        inAKillFunctionFunctionStmt(node);
        if(node.getKillFunction() != null)
        {
            node.getKillFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAKillFunctionFunctionStmt(node);
    }

    public void inARenameFileFunctionFunctionStmt(ARenameFileFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outARenameFileFunctionFunctionStmt(ARenameFileFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARenameFileFunctionFunctionStmt(ARenameFileFunctionFunctionStmt node)
    {
        inARenameFileFunctionFunctionStmt(node);
        if(node.getRenameFileFunction() != null)
        {
            node.getRenameFileFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outARenameFileFunctionFunctionStmt(node);
    }

    public void inAMsgBoxFunctionWithoutParensFunctionStmt(AMsgBoxFunctionWithoutParensFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAMsgBoxFunctionWithoutParensFunctionStmt(AMsgBoxFunctionWithoutParensFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMsgBoxFunctionWithoutParensFunctionStmt(AMsgBoxFunctionWithoutParensFunctionStmt node)
    {
        inAMsgBoxFunctionWithoutParensFunctionStmt(node);
        if(node.getMsgBoxFunctionWithoutParens() != null)
        {
            node.getMsgBoxFunctionWithoutParens().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAMsgBoxFunctionWithoutParensFunctionStmt(node);
    }

    public void inAExcelSheetFunctionStmt(AExcelSheetFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAExcelSheetFunctionStmt(AExcelSheetFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelSheetFunctionStmt(AExcelSheetFunctionStmt node)
    {
        inAExcelSheetFunctionStmt(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAExcelSheetFunctionStmt(node);
    }

    public void inASetHiddenFunctionFunctionStmt(ASetHiddenFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outASetHiddenFunctionFunctionStmt(ASetHiddenFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetHiddenFunctionFunctionStmt(ASetHiddenFunctionFunctionStmt node)
    {
        inASetHiddenFunctionFunctionStmt(node);
        if(node.getSetHiddenFunction() != null)
        {
            node.getSetHiddenFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outASetHiddenFunctionFunctionStmt(node);
    }

    public void inASetVisibleFunctionFunctionStmt(ASetVisibleFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outASetVisibleFunctionFunctionStmt(ASetVisibleFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetVisibleFunctionFunctionStmt(ASetVisibleFunctionFunctionStmt node)
    {
        inASetVisibleFunctionFunctionStmt(node);
        if(node.getSetVisibleFunction() != null)
        {
            node.getSetVisibleFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outASetVisibleFunctionFunctionStmt(node);
    }

    public void inASelectFunctionFunctionStmt(ASelectFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outASelectFunctionFunctionStmt(ASelectFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectFunctionFunctionStmt(ASelectFunctionFunctionStmt node)
    {
        inASelectFunctionFunctionStmt(node);
        if(node.getSelectFunction() != null)
        {
            node.getSelectFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outASelectFunctionFunctionStmt(node);
    }

    public void inAMoveFunctionFunctionStmt(AMoveFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAMoveFunctionFunctionStmt(AMoveFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoveFunctionFunctionStmt(AMoveFunctionFunctionStmt node)
    {
        inAMoveFunctionFunctionStmt(node);
        if(node.getMoveFunction() != null)
        {
            node.getMoveFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAMoveFunctionFunctionStmt(node);
    }

    public void inAAutoFitFunctionFunctionStmt(AAutoFitFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAAutoFitFunctionFunctionStmt(AAutoFitFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAutoFitFunctionFunctionStmt(AAutoFitFunctionFunctionStmt node)
    {
        inAAutoFitFunctionFunctionStmt(node);
        if(node.getAutoFitFunction() != null)
        {
            node.getAutoFitFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAAutoFitFunctionFunctionStmt(node);
    }

    public void inASetNameExcelFunctionFunctionStmt(ASetNameExcelFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outASetNameExcelFunctionFunctionStmt(ASetNameExcelFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetNameExcelFunctionFunctionStmt(ASetNameExcelFunctionFunctionStmt node)
    {
        inASetNameExcelFunctionFunctionStmt(node);
        if(node.getSetNameExcelFunction() != null)
        {
            node.getSetNameExcelFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outASetNameExcelFunctionFunctionStmt(node);
    }

    public void inACopyFunctionFunctionStmt(ACopyFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outACopyFunctionFunctionStmt(ACopyFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACopyFunctionFunctionStmt(ACopyFunctionFunctionStmt node)
    {
        inACopyFunctionFunctionStmt(node);
        if(node.getCopyFunction() != null)
        {
            node.getCopyFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outACopyFunctionFunctionStmt(node);
    }

    public void inADeleteFunctionFunctionStmt(ADeleteFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outADeleteFunctionFunctionStmt(ADeleteFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeleteFunctionFunctionStmt(ADeleteFunctionFunctionStmt node)
    {
        inADeleteFunctionFunctionStmt(node);
        if(node.getDeleteFunction() != null)
        {
            node.getDeleteFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outADeleteFunctionFunctionStmt(node);
    }

    public void inAActivateFunctionFunctionStmt(AActivateFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAActivateFunctionFunctionStmt(AActivateFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActivateFunctionFunctionStmt(AActivateFunctionFunctionStmt node)
    {
        inAActivateFunctionFunctionStmt(node);
        if(node.getActivateFunction() != null)
        {
            node.getActivateFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAActivateFunctionFunctionStmt(node);
    }

    public void inASetCellFunctionFunctionStmt(ASetCellFunctionFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outASetCellFunctionFunctionStmt(ASetCellFunctionFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetCellFunctionFunctionStmt(ASetCellFunctionFunctionStmt node)
    {
        inASetCellFunctionFunctionStmt(node);
        if(node.getSetCellFunction() != null)
        {
            node.getSetCellFunction().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outASetCellFunctionFunctionStmt(node);
    }

    public void inAGeneralStmtFunctionStmt(AGeneralStmtFunctionStmt node)
    {
        defaultIn(node);
    }

    public void outAGeneralStmtFunctionStmt(AGeneralStmtFunctionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralStmtFunctionStmt(AGeneralStmtFunctionStmt node)
    {
        inAGeneralStmtFunctionStmt(node);
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAGeneralStmtFunctionStmt(node);
    }

    public void inACommentGeneralStmt(ACommentGeneralStmt node)
    {
        defaultIn(node);
    }

    public void outACommentGeneralStmt(ACommentGeneralStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommentGeneralStmt(ACommentGeneralStmt node)
    {
        inACommentGeneralStmt(node);
        if(node.getComment() != null)
        {
            node.getComment().apply(this);
        }
        outACommentGeneralStmt(node);
    }

    public void inAEndOfLineGeneralStmt(AEndOfLineGeneralStmt node)
    {
        defaultIn(node);
    }

    public void outAEndOfLineGeneralStmt(AEndOfLineGeneralStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndOfLineGeneralStmt(AEndOfLineGeneralStmt node)
    {
        inAEndOfLineGeneralStmt(node);
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        outAEndOfLineGeneralStmt(node);
    }

    public void inAId(AId node)
    {
        defaultIn(node);
    }

    public void outAId(AId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAId(AId node)
    {
        inAId(node);
        if(node.getIdToken() != null)
        {
            node.getIdToken().apply(this);
        }
        outAId(node);
    }

    public void inANotId(ANotId node)
    {
        defaultIn(node);
    }

    public void outANotId(ANotId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotId(ANotId node)
    {
        inANotId(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANotId(node);
    }

    public void inAMethodChaining(AMethodChaining node)
    {
        defaultIn(node);
    }

    public void outAMethodChaining(AMethodChaining node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChaining(AMethodChaining node)
    {
        inAMethodChaining(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            List<PMethodChainingPart> copy = new ArrayList<PMethodChainingPart>(node.getMethodChainingPart());
            for(PMethodChainingPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMethodChainingValue() != null)
        {
            node.getMethodChainingValue().apply(this);
        }
        outAMethodChaining(node);
    }

    public void inAOnlyValueMethodChaining(AOnlyValueMethodChaining node)
    {
        defaultIn(node);
    }

    public void outAOnlyValueMethodChaining(AOnlyValueMethodChaining node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOnlyValueMethodChaining(AOnlyValueMethodChaining node)
    {
        inAOnlyValueMethodChaining(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAOnlyValueMethodChaining(node);
    }

    public void inAMethodChainingPart(AMethodChainingPart node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingPart(AMethodChainingPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingPart(AMethodChainingPart node)
    {
        inAMethodChainingPart(node);
        if(node.getMethodChainingValue() != null)
        {
            node.getMethodChainingValue().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        outAMethodChainingPart(node);
    }

    public void inAIdMethodChainingValue(AIdMethodChainingValue node)
    {
        defaultIn(node);
    }

    public void outAIdMethodChainingValue(AIdMethodChainingValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdMethodChainingValue(AIdMethodChainingValue node)
    {
        inAIdMethodChainingValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdMethodChainingValue(node);
    }

    public void inAMethodCallMethodChainingValue(AMethodCallMethodChainingValue node)
    {
        defaultIn(node);
    }

    public void outAMethodCallMethodChainingValue(AMethodCallMethodChainingValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallMethodChainingValue(AMethodCallMethodChainingValue node)
    {
        inAMethodCallMethodChainingValue(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodCallMethodChainingValue(node);
    }

    public void inACharacterString(ACharacterString node)
    {
        defaultIn(node);
    }

    public void outACharacterString(ACharacterString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterString(ACharacterString node)
    {
        inACharacterString(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            List<PStringPart> copy = new ArrayList<PStringPart>(node.getStringPart());
            for(PStringPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStringPartValue() != null)
        {
            node.getStringPartValue().apply(this);
        }
        outACharacterString(node);
    }

    public void inAOnlyValueCharacterString(AOnlyValueCharacterString node)
    {
        defaultIn(node);
    }

    public void outAOnlyValueCharacterString(AOnlyValueCharacterString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOnlyValueCharacterString(AOnlyValueCharacterString node)
    {
        inAOnlyValueCharacterString(node);
        if(node.getStringToken() != null)
        {
            node.getStringToken().apply(this);
        }
        outAOnlyValueCharacterString(node);
    }

    public void inAStringPart(AStringPart node)
    {
        defaultIn(node);
    }

    public void outAStringPart(AStringPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringPart(AStringPart node)
    {
        inAStringPart(node);
        if(node.getStringPartValue() != null)
        {
            node.getStringPartValue().apply(this);
        }
        if(node.getAmpersand() != null)
        {
            node.getAmpersand().apply(this);
        }
        outAStringPart(node);
    }

    public void inAGetNameExcelFunctionStringPartValue(AGetNameExcelFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAGetNameExcelFunctionStringPartValue(AGetNameExcelFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGetNameExcelFunctionStringPartValue(AGetNameExcelFunctionStringPartValue node)
    {
        inAGetNameExcelFunctionStringPartValue(node);
        if(node.getGetNameExcelFunction() != null)
        {
            node.getGetNameExcelFunction().apply(this);
        }
        outAGetNameExcelFunctionStringPartValue(node);
    }

    public void inALenFunctionStringPartValue(ALenFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outALenFunctionStringPartValue(ALenFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenFunctionStringPartValue(ALenFunctionStringPartValue node)
    {
        inALenFunctionStringPartValue(node);
        if(node.getLenFunction() != null)
        {
            node.getLenFunction().apply(this);
        }
        outALenFunctionStringPartValue(node);
    }

    public void inANowFunctionStringPartValue(ANowFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outANowFunctionStringPartValue(ANowFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANowFunctionStringPartValue(ANowFunctionStringPartValue node)
    {
        inANowFunctionStringPartValue(node);
        if(node.getNowFunction() != null)
        {
            node.getNowFunction().apply(this);
        }
        outANowFunctionStringPartValue(node);
    }

    public void inAExcelCellStringPartValue(AExcelCellStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAExcelCellStringPartValue(AExcelCellStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelCellStringPartValue(AExcelCellStringPartValue node)
    {
        inAExcelCellStringPartValue(node);
        if(node.getExcelCell() != null)
        {
            node.getExcelCell().apply(this);
        }
        outAExcelCellStringPartValue(node);
    }

    public void inAMethodChainingStringPartValue(AMethodChainingStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingStringPartValue(AMethodChainingStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingStringPartValue(AMethodChainingStringPartValue node)
    {
        inAMethodChainingStringPartValue(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingStringPartValue(node);
    }

    public void inAStringStringPartValue(AStringStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAStringStringPartValue(AStringStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringStringPartValue(AStringStringPartValue node)
    {
        inAStringStringPartValue(node);
        if(node.getStringToken() != null)
        {
            node.getStringToken().apply(this);
        }
        outAStringStringPartValue(node);
    }

    public void inAShortIfStmtStringPartValue(AShortIfStmtStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtStringPartValue(AShortIfStmtStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtStringPartValue(AShortIfStmtStringPartValue node)
    {
        inAShortIfStmtStringPartValue(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtStringPartValue(node);
    }

    public void inAArithmeticExpressionStringPartValue(AArithmeticExpressionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionStringPartValue(AArithmeticExpressionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionStringPartValue(AArithmeticExpressionStringPartValue node)
    {
        inAArithmeticExpressionStringPartValue(node);
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        outAArithmeticExpressionStringPartValue(node);
    }

    public void inAArithmeticExpressionInParensStringPartValue(AArithmeticExpressionInParensStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionInParensStringPartValue(AArithmeticExpressionInParensStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionInParensStringPartValue(AArithmeticExpressionInParensStringPartValue node)
    {
        inAArithmeticExpressionInParensStringPartValue(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAArithmeticExpressionInParensStringPartValue(node);
    }

    public void inACIntFunctionStringPartValue(ACIntFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outACIntFunctionStringPartValue(ACIntFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACIntFunctionStringPartValue(ACIntFunctionStringPartValue node)
    {
        inACIntFunctionStringPartValue(node);
        if(node.getCIntFunction() != null)
        {
            node.getCIntFunction().apply(this);
        }
        outACIntFunctionStringPartValue(node);
    }

    public void inATrimFunctionStringPartValue(ATrimFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outATrimFunctionStringPartValue(ATrimFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrimFunctionStringPartValue(ATrimFunctionStringPartValue node)
    {
        inATrimFunctionStringPartValue(node);
        if(node.getTrimFunction() != null)
        {
            node.getTrimFunction().apply(this);
        }
        outATrimFunctionStringPartValue(node);
    }

    public void inARTrimFunctionStringPartValue(ARTrimFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outARTrimFunctionStringPartValue(ARTrimFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARTrimFunctionStringPartValue(ARTrimFunctionStringPartValue node)
    {
        inARTrimFunctionStringPartValue(node);
        if(node.getRTrimFunction() != null)
        {
            node.getRTrimFunction().apply(this);
        }
        outARTrimFunctionStringPartValue(node);
    }

    public void inAMethodCallStringPartValue(AMethodCallStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAMethodCallStringPartValue(AMethodCallStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallStringPartValue(AMethodCallStringPartValue node)
    {
        inAMethodCallStringPartValue(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodCallStringPartValue(node);
    }

    public void inAUCaseFunctionStringPartValue(AUCaseFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAUCaseFunctionStringPartValue(AUCaseFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUCaseFunctionStringPartValue(AUCaseFunctionStringPartValue node)
    {
        inAUCaseFunctionStringPartValue(node);
        if(node.getUCaseFunction() != null)
        {
            node.getUCaseFunction().apply(this);
        }
        outAUCaseFunctionStringPartValue(node);
    }

    public void inALCaseFunctionStringPartValue(ALCaseFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outALCaseFunctionStringPartValue(ALCaseFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALCaseFunctionStringPartValue(ALCaseFunctionStringPartValue node)
    {
        inALCaseFunctionStringPartValue(node);
        if(node.getLCaseFunction() != null)
        {
            node.getLCaseFunction().apply(this);
        }
        outALCaseFunctionStringPartValue(node);
    }

    public void inALeftFunctionStringPartValue(ALeftFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outALeftFunctionStringPartValue(ALeftFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftFunctionStringPartValue(ALeftFunctionStringPartValue node)
    {
        inALeftFunctionStringPartValue(node);
        if(node.getLeftFunction() != null)
        {
            node.getLeftFunction().apply(this);
        }
        outALeftFunctionStringPartValue(node);
    }

    public void inARightFunctionStringPartValue(ARightFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outARightFunctionStringPartValue(ARightFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightFunctionStringPartValue(ARightFunctionStringPartValue node)
    {
        inARightFunctionStringPartValue(node);
        if(node.getRightFunction() != null)
        {
            node.getRightFunction().apply(this);
        }
        outARightFunctionStringPartValue(node);
    }

    public void inAMidFunctionTwoParamStringPartValue(AMidFunctionTwoParamStringPartValue node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionTwoParamStringPartValue(AMidFunctionTwoParamStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionTwoParamStringPartValue(AMidFunctionTwoParamStringPartValue node)
    {
        inAMidFunctionTwoParamStringPartValue(node);
        if(node.getMidFunctionTwoParam() != null)
        {
            node.getMidFunctionTwoParam().apply(this);
        }
        outAMidFunctionTwoParamStringPartValue(node);
    }

    public void inACStrFunctionStringPartValue(ACStrFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outACStrFunctionStringPartValue(ACStrFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStrFunctionStringPartValue(ACStrFunctionStringPartValue node)
    {
        inACStrFunctionStringPartValue(node);
        if(node.getCStrFunction() != null)
        {
            node.getCStrFunction().apply(this);
        }
        outACStrFunctionStringPartValue(node);
    }

    public void inACLngFunctionStringPartValue(ACLngFunctionStringPartValue node)
    {
        defaultIn(node);
    }

    public void outACLngFunctionStringPartValue(ACLngFunctionStringPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACLngFunctionStringPartValue(ACLngFunctionStringPartValue node)
    {
        inACLngFunctionStringPartValue(node);
        if(node.getCLngFunction() != null)
        {
            node.getCLngFunction().apply(this);
        }
        outACLngFunctionStringPartValue(node);
    }

    public void inAArithmeticExpression(AArithmeticExpression node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpression(AArithmeticExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpression(AArithmeticExpression node)
    {
        inAArithmeticExpression(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            List<PArithmeticExpressionPart> copy = new ArrayList<PArithmeticExpressionPart>(node.getArithmeticExpressionPart());
            for(PArithmeticExpressionPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getArithmeticExpressionPartValue() != null)
        {
            node.getArithmeticExpressionPartValue().apply(this);
        }
        outAArithmeticExpression(node);
    }

    public void inAOnlyValueArithmeticExpression(AOnlyValueArithmeticExpression node)
    {
        defaultIn(node);
    }

    public void outAOnlyValueArithmeticExpression(AOnlyValueArithmeticExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOnlyValueArithmeticExpression(AOnlyValueArithmeticExpression node)
    {
        inAOnlyValueArithmeticExpression(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAOnlyValueArithmeticExpression(node);
    }

    public void inANegateIdArithmeticExpression(ANegateIdArithmeticExpression node)
    {
        defaultIn(node);
    }

    public void outANegateIdArithmeticExpression(ANegateIdArithmeticExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegateIdArithmeticExpression(ANegateIdArithmeticExpression node)
    {
        inANegateIdArithmeticExpression(node);
        if(node.getSubtraction() != null)
        {
            node.getSubtraction().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANegateIdArithmeticExpression(node);
    }

    public void inANegatedArithmeticExpressionInParensArithmeticExpression(ANegatedArithmeticExpressionInParensArithmeticExpression node)
    {
        defaultIn(node);
    }

    public void outANegatedArithmeticExpressionInParensArithmeticExpression(ANegatedArithmeticExpressionInParensArithmeticExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegatedArithmeticExpressionInParensArithmeticExpression(ANegatedArithmeticExpressionInParensArithmeticExpression node)
    {
        inANegatedArithmeticExpressionInParensArithmeticExpression(node);
        if(node.getSubtraction() != null)
        {
            node.getSubtraction().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outANegatedArithmeticExpressionInParensArithmeticExpression(node);
    }

    public void inAArithmeticExpressionPart(AArithmeticExpressionPart node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionPart(AArithmeticExpressionPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionPart(AArithmeticExpressionPart node)
    {
        inAArithmeticExpressionPart(node);
        if(node.getArithmeticExpressionPartValue() != null)
        {
            node.getArithmeticExpressionPartValue().apply(this);
        }
        if(node.getArithmeticOperator() != null)
        {
            node.getArithmeticOperator().apply(this);
        }
        outAArithmeticExpressionPart(node);
    }

    public void inAArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue(AArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue(AArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue(AArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue node)
    {
        inAArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue(node);
        if(node.getArithmeticExpressionPartValueNotNegated() != null)
        {
            node.getArithmeticExpressionPartValueNotNegated().apply(this);
        }
        outAArithmeticExpressionPartValueNotNegatedArithmeticExpressionPartValue(node);
    }

    public void inAArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue(AArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue(AArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue(AArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue node)
    {
        inAArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue(node);
        if(node.getArithmeticExpressionPartValueNegated() != null)
        {
            node.getArithmeticExpressionPartValueNegated().apply(this);
        }
        outAArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue(node);
    }

    public void inAStringTokenArithmeticExpressionPartValueNotNegated(AStringTokenArithmeticExpressionPartValueNotNegated node)
    {
        defaultIn(node);
    }

    public void outAStringTokenArithmeticExpressionPartValueNotNegated(AStringTokenArithmeticExpressionPartValueNotNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTokenArithmeticExpressionPartValueNotNegated(AStringTokenArithmeticExpressionPartValueNotNegated node)
    {
        inAStringTokenArithmeticExpressionPartValueNotNegated(node);
        if(node.getStringToken() != null)
        {
            node.getStringToken().apply(this);
        }
        outAStringTokenArithmeticExpressionPartValueNotNegated(node);
    }

    public void inAMethodChainingArithmeticExpressionPartValueNotNegated(AMethodChainingArithmeticExpressionPartValueNotNegated node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingArithmeticExpressionPartValueNotNegated(AMethodChainingArithmeticExpressionPartValueNotNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingArithmeticExpressionPartValueNotNegated(AMethodChainingArithmeticExpressionPartValueNotNegated node)
    {
        inAMethodChainingArithmeticExpressionPartValueNotNegated(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingArithmeticExpressionPartValueNotNegated(node);
    }

    public void inANumberArithmeticExpressionPartValueNotNegated(ANumberArithmeticExpressionPartValueNotNegated node)
    {
        defaultIn(node);
    }

    public void outANumberArithmeticExpressionPartValueNotNegated(ANumberArithmeticExpressionPartValueNotNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberArithmeticExpressionPartValueNotNegated(ANumberArithmeticExpressionPartValueNotNegated node)
    {
        inANumberArithmeticExpressionPartValueNotNegated(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberArithmeticExpressionPartValueNotNegated(node);
    }

    public void inAShortIfStmtArithmeticExpressionPartValueNotNegated(AShortIfStmtArithmeticExpressionPartValueNotNegated node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtArithmeticExpressionPartValueNotNegated(AShortIfStmtArithmeticExpressionPartValueNotNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtArithmeticExpressionPartValueNotNegated(AShortIfStmtArithmeticExpressionPartValueNotNegated node)
    {
        inAShortIfStmtArithmeticExpressionPartValueNotNegated(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtArithmeticExpressionPartValueNotNegated(node);
    }

    public void inAMethodCallArithmeticExpressionPartValueNotNegated(AMethodCallArithmeticExpressionPartValueNotNegated node)
    {
        defaultIn(node);
    }

    public void outAMethodCallArithmeticExpressionPartValueNotNegated(AMethodCallArithmeticExpressionPartValueNotNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallArithmeticExpressionPartValueNotNegated(AMethodCallArithmeticExpressionPartValueNotNegated node)
    {
        inAMethodCallArithmeticExpressionPartValueNotNegated(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodCallArithmeticExpressionPartValueNotNegated(node);
    }

    public void inACIntFunctionArithmeticExpressionPartValueNotNegated(ACIntFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultIn(node);
    }

    public void outACIntFunctionArithmeticExpressionPartValueNotNegated(ACIntFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACIntFunctionArithmeticExpressionPartValueNotNegated(ACIntFunctionArithmeticExpressionPartValueNotNegated node)
    {
        inACIntFunctionArithmeticExpressionPartValueNotNegated(node);
        if(node.getCIntFunction() != null)
        {
            node.getCIntFunction().apply(this);
        }
        outACIntFunctionArithmeticExpressionPartValueNotNegated(node);
    }

    public void inALenFunctionArithmeticExpressionPartValueNotNegated(ALenFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultIn(node);
    }

    public void outALenFunctionArithmeticExpressionPartValueNotNegated(ALenFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenFunctionArithmeticExpressionPartValueNotNegated(ALenFunctionArithmeticExpressionPartValueNotNegated node)
    {
        inALenFunctionArithmeticExpressionPartValueNotNegated(node);
        if(node.getLenFunction() != null)
        {
            node.getLenFunction().apply(this);
        }
        outALenFunctionArithmeticExpressionPartValueNotNegated(node);
    }

    public void inALBoundFunctionArithmeticExpressionPartValueNotNegated(ALBoundFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultIn(node);
    }

    public void outALBoundFunctionArithmeticExpressionPartValueNotNegated(ALBoundFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALBoundFunctionArithmeticExpressionPartValueNotNegated(ALBoundFunctionArithmeticExpressionPartValueNotNegated node)
    {
        inALBoundFunctionArithmeticExpressionPartValueNotNegated(node);
        if(node.getLBoundFunction() != null)
        {
            node.getLBoundFunction().apply(this);
        }
        outALBoundFunctionArithmeticExpressionPartValueNotNegated(node);
    }

    public void inAUBoundFunctionArithmeticExpressionPartValueNotNegated(AUBoundFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultIn(node);
    }

    public void outAUBoundFunctionArithmeticExpressionPartValueNotNegated(AUBoundFunctionArithmeticExpressionPartValueNotNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUBoundFunctionArithmeticExpressionPartValueNotNegated(AUBoundFunctionArithmeticExpressionPartValueNotNegated node)
    {
        inAUBoundFunctionArithmeticExpressionPartValueNotNegated(node);
        if(node.getUBoundFunction() != null)
        {
            node.getUBoundFunction().apply(this);
        }
        outAUBoundFunctionArithmeticExpressionPartValueNotNegated(node);
    }

    public void inAArithmeticExpressionPartValueNegated(AArithmeticExpressionPartValueNegated node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionPartValueNegated(AArithmeticExpressionPartValueNegated node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionPartValueNegated(AArithmeticExpressionPartValueNegated node)
    {
        inAArithmeticExpressionPartValueNegated(node);
        if(node.getSubtraction() != null)
        {
            node.getSubtraction().apply(this);
        }
        if(node.getArithmeticExpressionPartValueNotNegated() != null)
        {
            node.getArithmeticExpressionPartValueNotNegated().apply(this);
        }
        outAArithmeticExpressionPartValueNegated(node);
    }

    public void inABooleanValueTrue(ABooleanValueTrue node)
    {
        defaultIn(node);
    }

    public void outABooleanValueTrue(ABooleanValueTrue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanValueTrue(ABooleanValueTrue node)
    {
        inABooleanValueTrue(node);
        if(node.getBooleanTokenTrue() != null)
        {
            node.getBooleanTokenTrue().apply(this);
        }
        outABooleanValueTrue(node);
    }

    public void inABooleanValueFalse(ABooleanValueFalse node)
    {
        defaultIn(node);
    }

    public void outABooleanValueFalse(ABooleanValueFalse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanValueFalse(ABooleanValueFalse node)
    {
        inABooleanValueFalse(node);
        if(node.getBooleanTokenFalse() != null)
        {
            node.getBooleanTokenFalse().apply(this);
        }
        outABooleanValueFalse(node);
    }

    public void inANullValue(ANullValue node)
    {
        defaultIn(node);
    }

    public void outANullValue(ANullValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullValue(ANullValue node)
    {
        inANullValue(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullValue(node);
    }

    public void inAInputFunctionValue(AInputFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAInputFunctionValue(AInputFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputFunctionValue(AInputFunctionValue node)
    {
        inAInputFunctionValue(node);
        if(node.getInputFunction() != null)
        {
            node.getInputFunction().apply(this);
        }
        outAInputFunctionValue(node);
    }

    public void inAFreeFileFunctionValue(AFreeFileFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAFreeFileFunctionValue(AFreeFileFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFreeFileFunctionValue(AFreeFileFunctionValue node)
    {
        inAFreeFileFunctionValue(node);
        if(node.getFreeFileFunction() != null)
        {
            node.getFreeFileFunction().apply(this);
        }
        outAFreeFileFunctionValue(node);
    }

    public void inALofFunctionValue(ALofFunctionValue node)
    {
        defaultIn(node);
    }

    public void outALofFunctionValue(ALofFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALofFunctionValue(ALofFunctionValue node)
    {
        inALofFunctionValue(node);
        if(node.getLofFunction() != null)
        {
            node.getLofFunction().apply(this);
        }
        outALofFunctionValue(node);
    }

    public void inASplitFunctionWithLimitValue(ASplitFunctionWithLimitValue node)
    {
        defaultIn(node);
    }

    public void outASplitFunctionWithLimitValue(ASplitFunctionWithLimitValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASplitFunctionWithLimitValue(ASplitFunctionWithLimitValue node)
    {
        inASplitFunctionWithLimitValue(node);
        if(node.getSplitFunctionWithLimit() != null)
        {
            node.getSplitFunctionWithLimit().apply(this);
        }
        outASplitFunctionWithLimitValue(node);
    }

    public void inANowFunctionValue(ANowFunctionValue node)
    {
        defaultIn(node);
    }

    public void outANowFunctionValue(ANowFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANowFunctionValue(ANowFunctionValue node)
    {
        inANowFunctionValue(node);
        if(node.getNowFunction() != null)
        {
            node.getNowFunction().apply(this);
        }
        outANowFunctionValue(node);
    }

    public void inAFormatFunctionValue(AFormatFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAFormatFunctionValue(AFormatFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormatFunctionValue(AFormatFunctionValue node)
    {
        inAFormatFunctionValue(node);
        if(node.getFormatFunction() != null)
        {
            node.getFormatFunction().apply(this);
        }
        outAFormatFunctionValue(node);
    }

    public void inASpaceFunctionValue(ASpaceFunctionValue node)
    {
        defaultIn(node);
    }

    public void outASpaceFunctionValue(ASpaceFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpaceFunctionValue(ASpaceFunctionValue node)
    {
        inASpaceFunctionValue(node);
        if(node.getSpaceFunction() != null)
        {
            node.getSpaceFunction().apply(this);
        }
        outASpaceFunctionValue(node);
    }

    public void inAIdInParensValue(AIdInParensValue node)
    {
        defaultIn(node);
    }

    public void outAIdInParensValue(AIdInParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdInParensValue(AIdInParensValue node)
    {
        inAIdInParensValue(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAIdInParensValue(node);
    }

    public void inACountFunctionValue(ACountFunctionValue node)
    {
        defaultIn(node);
    }

    public void outACountFunctionValue(ACountFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACountFunctionValue(ACountFunctionValue node)
    {
        inACountFunctionValue(node);
        if(node.getCountFunction() != null)
        {
            node.getCountFunction().apply(this);
        }
        outACountFunctionValue(node);
    }

    public void inAExcelWorkbookValue(AExcelWorkbookValue node)
    {
        defaultIn(node);
    }

    public void outAExcelWorkbookValue(AExcelWorkbookValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelWorkbookValue(AExcelWorkbookValue node)
    {
        inAExcelWorkbookValue(node);
        if(node.getExcelWorkbook() != null)
        {
            node.getExcelWorkbook().apply(this);
        }
        outAExcelWorkbookValue(node);
    }

    public void inACellValue(ACellValue node)
    {
        defaultIn(node);
    }

    public void outACellValue(ACellValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACellValue(ACellValue node)
    {
        inACellValue(node);
        if(node.getExcelCell() != null)
        {
            node.getExcelCell().apply(this);
        }
        outACellValue(node);
    }

    public void inASheetValue(ASheetValue node)
    {
        defaultIn(node);
    }

    public void outASheetValue(ASheetValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetValue(ASheetValue node)
    {
        inASheetValue(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        outASheetValue(node);
    }

    public void inAMsgBoxFunctionValue(AMsgBoxFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAMsgBoxFunctionValue(AMsgBoxFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMsgBoxFunctionValue(AMsgBoxFunctionValue node)
    {
        inAMsgBoxFunctionValue(node);
        if(node.getMsgBoxFunction() != null)
        {
            node.getMsgBoxFunction().apply(this);
        }
        outAMsgBoxFunctionValue(node);
    }

    public void inAMethodChainingValue(AMethodChainingValue node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingValue(AMethodChainingValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingValue(AMethodChainingValue node)
    {
        inAMethodChainingValue(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingValue(node);
    }

    public void inAShortIfStmtValue(AShortIfStmtValue node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtValue(AShortIfStmtValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtValue(AShortIfStmtValue node)
    {
        inAShortIfStmtValue(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtValue(node);
    }

    public void inACharacterStringValue(ACharacterStringValue node)
    {
        defaultIn(node);
    }

    public void outACharacterStringValue(ACharacterStringValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterStringValue(ACharacterStringValue node)
    {
        inACharacterStringValue(node);
        if(node.getCharacterString() != null)
        {
            node.getCharacterString().apply(this);
        }
        outACharacterStringValue(node);
    }

    public void inAArithmeticExpressionValue(AArithmeticExpressionValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionValue(AArithmeticExpressionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionValue(AArithmeticExpressionValue node)
    {
        inAArithmeticExpressionValue(node);
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        outAArithmeticExpressionValue(node);
    }

    public void inAArithmeticExpressionInParensValue(AArithmeticExpressionInParensValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionInParensValue(AArithmeticExpressionInParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionInParensValue(AArithmeticExpressionInParensValue node)
    {
        inAArithmeticExpressionInParensValue(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAArithmeticExpressionInParensValue(node);
    }

    public void inAMethodValue(AMethodValue node)
    {
        defaultIn(node);
    }

    public void outAMethodValue(AMethodValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodValue(AMethodValue node)
    {
        inAMethodValue(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodValue(node);
    }

    public void inAConditionValue(AConditionValue node)
    {
        defaultIn(node);
    }

    public void outAConditionValue(AConditionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionValue(AConditionValue node)
    {
        inAConditionValue(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outAConditionValue(node);
    }

    public void inATrueValue(ATrueValue node)
    {
        defaultIn(node);
    }

    public void outATrueValue(ATrueValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueValue(ATrueValue node)
    {
        inATrueValue(node);
        if(node.getBooleanValueTrue() != null)
        {
            node.getBooleanValueTrue().apply(this);
        }
        outATrueValue(node);
    }

    public void inAFalseValue(AFalseValue node)
    {
        defaultIn(node);
    }

    public void outAFalseValue(AFalseValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseValue(AFalseValue node)
    {
        inAFalseValue(node);
        if(node.getBooleanValueFalse() != null)
        {
            node.getBooleanValueFalse().apply(this);
        }
        outAFalseValue(node);
    }

    public void inACStrFunctionValue(ACStrFunctionValue node)
    {
        defaultIn(node);
    }

    public void outACStrFunctionValue(ACStrFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStrFunctionValue(ACStrFunctionValue node)
    {
        inACStrFunctionValue(node);
        if(node.getCStrFunction() != null)
        {
            node.getCStrFunction().apply(this);
        }
        outACStrFunctionValue(node);
    }

    public void inACIntFunctionValue(ACIntFunctionValue node)
    {
        defaultIn(node);
    }

    public void outACIntFunctionValue(ACIntFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACIntFunctionValue(ACIntFunctionValue node)
    {
        inACIntFunctionValue(node);
        if(node.getCIntFunction() != null)
        {
            node.getCIntFunction().apply(this);
        }
        outACIntFunctionValue(node);
    }

    public void inAUCaseFunctionValue(AUCaseFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAUCaseFunctionValue(AUCaseFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUCaseFunctionValue(AUCaseFunctionValue node)
    {
        inAUCaseFunctionValue(node);
        if(node.getUCaseFunction() != null)
        {
            node.getUCaseFunction().apply(this);
        }
        outAUCaseFunctionValue(node);
    }

    public void inALCaseFunctionValue(ALCaseFunctionValue node)
    {
        defaultIn(node);
    }

    public void outALCaseFunctionValue(ALCaseFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALCaseFunctionValue(ALCaseFunctionValue node)
    {
        inALCaseFunctionValue(node);
        if(node.getLCaseFunction() != null)
        {
            node.getLCaseFunction().apply(this);
        }
        outALCaseFunctionValue(node);
    }

    public void inALenFunctionValue(ALenFunctionValue node)
    {
        defaultIn(node);
    }

    public void outALenFunctionValue(ALenFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenFunctionValue(ALenFunctionValue node)
    {
        inALenFunctionValue(node);
        if(node.getLenFunction() != null)
        {
            node.getLenFunction().apply(this);
        }
        outALenFunctionValue(node);
    }

    public void inAMidFunctionValue(AMidFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionValue(AMidFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionValue(AMidFunctionValue node)
    {
        inAMidFunctionValue(node);
        if(node.getMidFunction() != null)
        {
            node.getMidFunction().apply(this);
        }
        outAMidFunctionValue(node);
    }

    public void inAMidFunctionTwoParamValue(AMidFunctionTwoParamValue node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionTwoParamValue(AMidFunctionTwoParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionTwoParamValue(AMidFunctionTwoParamValue node)
    {
        inAMidFunctionTwoParamValue(node);
        if(node.getMidFunctionTwoParam() != null)
        {
            node.getMidFunctionTwoParam().apply(this);
        }
        outAMidFunctionTwoParamValue(node);
    }

    public void inALeftFunctionValue(ALeftFunctionValue node)
    {
        defaultIn(node);
    }

    public void outALeftFunctionValue(ALeftFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftFunctionValue(ALeftFunctionValue node)
    {
        inALeftFunctionValue(node);
        if(node.getLeftFunction() != null)
        {
            node.getLeftFunction().apply(this);
        }
        outALeftFunctionValue(node);
    }

    public void inARightFunctionValue(ARightFunctionValue node)
    {
        defaultIn(node);
    }

    public void outARightFunctionValue(ARightFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightFunctionValue(ARightFunctionValue node)
    {
        inARightFunctionValue(node);
        if(node.getRightFunction() != null)
        {
            node.getRightFunction().apply(this);
        }
        outARightFunctionValue(node);
    }

    public void inATrimFunctionValue(ATrimFunctionValue node)
    {
        defaultIn(node);
    }

    public void outATrimFunctionValue(ATrimFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrimFunctionValue(ATrimFunctionValue node)
    {
        inATrimFunctionValue(node);
        if(node.getTrimFunction() != null)
        {
            node.getTrimFunction().apply(this);
        }
        outATrimFunctionValue(node);
    }

    public void inALBoundFunctionValue(ALBoundFunctionValue node)
    {
        defaultIn(node);
    }

    public void outALBoundFunctionValue(ALBoundFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALBoundFunctionValue(ALBoundFunctionValue node)
    {
        inALBoundFunctionValue(node);
        if(node.getLBoundFunction() != null)
        {
            node.getLBoundFunction().apply(this);
        }
        outALBoundFunctionValue(node);
    }

    public void inAUBoundFunctionValue(AUBoundFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAUBoundFunctionValue(AUBoundFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUBoundFunctionValue(AUBoundFunctionValue node)
    {
        inAUBoundFunctionValue(node);
        if(node.getUBoundFunction() != null)
        {
            node.getUBoundFunction().apply(this);
        }
        outAUBoundFunctionValue(node);
    }

    public void inACLngFunctionValue(ACLngFunctionValue node)
    {
        defaultIn(node);
    }

    public void outACLngFunctionValue(ACLngFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACLngFunctionValue(ACLngFunctionValue node)
    {
        inACLngFunctionValue(node);
        if(node.getCLngFunction() != null)
        {
            node.getCLngFunction().apply(this);
        }
        outACLngFunctionValue(node);
    }

    public void inACDblFunctionValue(ACDblFunctionValue node)
    {
        defaultIn(node);
    }

    public void outACDblFunctionValue(ACDblFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACDblFunctionValue(ACDblFunctionValue node)
    {
        inACDblFunctionValue(node);
        if(node.getCDblFunction() != null)
        {
            node.getCDblFunction().apply(this);
        }
        outACDblFunctionValue(node);
    }

    public void inACSngFunctionValue(ACSngFunctionValue node)
    {
        defaultIn(node);
    }

    public void outACSngFunctionValue(ACSngFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACSngFunctionValue(ACSngFunctionValue node)
    {
        inACSngFunctionValue(node);
        if(node.getCSngFunction() != null)
        {
            node.getCSngFunction().apply(this);
        }
        outACSngFunctionValue(node);
    }

    public void inARTrimFunctionValue(ARTrimFunctionValue node)
    {
        defaultIn(node);
    }

    public void outARTrimFunctionValue(ARTrimFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARTrimFunctionValue(ARTrimFunctionValue node)
    {
        inARTrimFunctionValue(node);
        if(node.getRTrimFunction() != null)
        {
            node.getRTrimFunction().apply(this);
        }
        outARTrimFunctionValue(node);
    }

    public void inASplitFunctionValue(ASplitFunctionValue node)
    {
        defaultIn(node);
    }

    public void outASplitFunctionValue(ASplitFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASplitFunctionValue(ASplitFunctionValue node)
    {
        inASplitFunctionValue(node);
        if(node.getSplitFunction() != null)
        {
            node.getSplitFunction().apply(this);
        }
        outASplitFunctionValue(node);
    }

    public void inAChrFunctionValue(AChrFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAChrFunctionValue(AChrFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChrFunctionValue(AChrFunctionValue node)
    {
        inAChrFunctionValue(node);
        if(node.getChrFunction() != null)
        {
            node.getChrFunction().apply(this);
        }
        outAChrFunctionValue(node);
    }

    public void inALofFunctionBooleanValue(ALofFunctionBooleanValue node)
    {
        defaultIn(node);
    }

    public void outALofFunctionBooleanValue(ALofFunctionBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALofFunctionBooleanValue(ALofFunctionBooleanValue node)
    {
        inALofFunctionBooleanValue(node);
        if(node.getLofFunction() != null)
        {
            node.getLofFunction().apply(this);
        }
        outALofFunctionBooleanValue(node);
    }

    public void inAShortIfStmtBooleanValue(AShortIfStmtBooleanValue node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtBooleanValue(AShortIfStmtBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtBooleanValue(AShortIfStmtBooleanValue node)
    {
        inAShortIfStmtBooleanValue(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtBooleanValue(node);
    }

    public void inAMethodChainingInParensBooleanValue(AMethodChainingInParensBooleanValue node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingInParensBooleanValue(AMethodChainingInParensBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingInParensBooleanValue(AMethodChainingInParensBooleanValue node)
    {
        inAMethodChainingInParensBooleanValue(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAMethodChainingInParensBooleanValue(node);
    }

    public void inAMethodChainingBooleanValue(AMethodChainingBooleanValue node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingBooleanValue(AMethodChainingBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingBooleanValue(AMethodChainingBooleanValue node)
    {
        inAMethodChainingBooleanValue(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingBooleanValue(node);
    }

    public void inAMethodBooleanValue(AMethodBooleanValue node)
    {
        defaultIn(node);
    }

    public void outAMethodBooleanValue(AMethodBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodBooleanValue(AMethodBooleanValue node)
    {
        inAMethodBooleanValue(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodBooleanValue(node);
    }

    public void inATrueBooleanValue(ATrueBooleanValue node)
    {
        defaultIn(node);
    }

    public void outATrueBooleanValue(ATrueBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBooleanValue(ATrueBooleanValue node)
    {
        inATrueBooleanValue(node);
        if(node.getBooleanValueTrue() != null)
        {
            node.getBooleanValueTrue().apply(this);
        }
        outATrueBooleanValue(node);
    }

    public void inAFalseBooleanValue(AFalseBooleanValue node)
    {
        defaultIn(node);
    }

    public void outAFalseBooleanValue(AFalseBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBooleanValue(AFalseBooleanValue node)
    {
        inAFalseBooleanValue(node);
        if(node.getBooleanValueFalse() != null)
        {
            node.getBooleanValueFalse().apply(this);
        }
        outAFalseBooleanValue(node);
    }

    public void inACIntFunctionBooleanValue(ACIntFunctionBooleanValue node)
    {
        defaultIn(node);
    }

    public void outACIntFunctionBooleanValue(ACIntFunctionBooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACIntFunctionBooleanValue(ACIntFunctionBooleanValue node)
    {
        inACIntFunctionBooleanValue(node);
        if(node.getCIntFunction() != null)
        {
            node.getCIntFunction().apply(this);
        }
        outACIntFunctionBooleanValue(node);
    }

    public void inAStringValueWithoutParensStringValue(AStringValueWithoutParensStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValueWithoutParensStringValue(AStringValueWithoutParensStringValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValueWithoutParensStringValue(AStringValueWithoutParensStringValue node)
    {
        inAStringValueWithoutParensStringValue(node);
        if(node.getStringValueWithoutParens() != null)
        {
            node.getStringValueWithoutParens().apply(this);
        }
        outAStringValueWithoutParensStringValue(node);
    }

    public void inAStringValueWithParensStringValue(AStringValueWithParensStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValueWithParensStringValue(AStringValueWithParensStringValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValueWithParensStringValue(AStringValueWithParensStringValue node)
    {
        inAStringValueWithParensStringValue(node);
        if(node.getStringValueWithParens() != null)
        {
            node.getStringValueWithParens().apply(this);
        }
        outAStringValueWithParensStringValue(node);
    }

    public void inAExcelCellStringValueWithoutParens(AExcelCellStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAExcelCellStringValueWithoutParens(AExcelCellStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelCellStringValueWithoutParens(AExcelCellStringValueWithoutParens node)
    {
        inAExcelCellStringValueWithoutParens(node);
        if(node.getExcelCell() != null)
        {
            node.getExcelCell().apply(this);
        }
        outAExcelCellStringValueWithoutParens(node);
    }

    public void inAMethodChainingStringValueWithoutParens(AMethodChainingStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingStringValueWithoutParens(AMethodChainingStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingStringValueWithoutParens(AMethodChainingStringValueWithoutParens node)
    {
        inAMethodChainingStringValueWithoutParens(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingStringValueWithoutParens(node);
    }

    public void inAShortIfStmtStringValueWithoutParens(AShortIfStmtStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtStringValueWithoutParens(AShortIfStmtStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtStringValueWithoutParens(AShortIfStmtStringValueWithoutParens node)
    {
        inAShortIfStmtStringValueWithoutParens(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtStringValueWithoutParens(node);
    }

    public void inACharacterStringStringValueWithoutParens(ACharacterStringStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outACharacterStringStringValueWithoutParens(ACharacterStringStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterStringStringValueWithoutParens(ACharacterStringStringValueWithoutParens node)
    {
        inACharacterStringStringValueWithoutParens(node);
        if(node.getCharacterString() != null)
        {
            node.getCharacterString().apply(this);
        }
        outACharacterStringStringValueWithoutParens(node);
    }

    public void inAMethodStringValueWithoutParens(AMethodStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAMethodStringValueWithoutParens(AMethodStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodStringValueWithoutParens(AMethodStringValueWithoutParens node)
    {
        inAMethodStringValueWithoutParens(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodStringValueWithoutParens(node);
    }

    public void inACStrFunctionStringValueWithoutParens(ACStrFunctionStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outACStrFunctionStringValueWithoutParens(ACStrFunctionStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStrFunctionStringValueWithoutParens(ACStrFunctionStringValueWithoutParens node)
    {
        inACStrFunctionStringValueWithoutParens(node);
        if(node.getCStrFunction() != null)
        {
            node.getCStrFunction().apply(this);
        }
        outACStrFunctionStringValueWithoutParens(node);
    }

    public void inAUCaseFunctionStringValueWithoutParens(AUCaseFunctionStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAUCaseFunctionStringValueWithoutParens(AUCaseFunctionStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUCaseFunctionStringValueWithoutParens(AUCaseFunctionStringValueWithoutParens node)
    {
        inAUCaseFunctionStringValueWithoutParens(node);
        if(node.getUCaseFunction() != null)
        {
            node.getUCaseFunction().apply(this);
        }
        outAUCaseFunctionStringValueWithoutParens(node);
    }

    public void inALCaseFunctionStringValueWithoutParens(ALCaseFunctionStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outALCaseFunctionStringValueWithoutParens(ALCaseFunctionStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALCaseFunctionStringValueWithoutParens(ALCaseFunctionStringValueWithoutParens node)
    {
        inALCaseFunctionStringValueWithoutParens(node);
        if(node.getLCaseFunction() != null)
        {
            node.getLCaseFunction().apply(this);
        }
        outALCaseFunctionStringValueWithoutParens(node);
    }

    public void inAMidFunctionStringValueWithoutParens(AMidFunctionStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionStringValueWithoutParens(AMidFunctionStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionStringValueWithoutParens(AMidFunctionStringValueWithoutParens node)
    {
        inAMidFunctionStringValueWithoutParens(node);
        if(node.getMidFunction() != null)
        {
            node.getMidFunction().apply(this);
        }
        outAMidFunctionStringValueWithoutParens(node);
    }

    public void inAMidFunctionTwoParamStringValueWithoutParens(AMidFunctionTwoParamStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionTwoParamStringValueWithoutParens(AMidFunctionTwoParamStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionTwoParamStringValueWithoutParens(AMidFunctionTwoParamStringValueWithoutParens node)
    {
        inAMidFunctionTwoParamStringValueWithoutParens(node);
        if(node.getMidFunctionTwoParam() != null)
        {
            node.getMidFunctionTwoParam().apply(this);
        }
        outAMidFunctionTwoParamStringValueWithoutParens(node);
    }

    public void inALeftFunctionStringValueWithoutParens(ALeftFunctionStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outALeftFunctionStringValueWithoutParens(ALeftFunctionStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftFunctionStringValueWithoutParens(ALeftFunctionStringValueWithoutParens node)
    {
        inALeftFunctionStringValueWithoutParens(node);
        if(node.getLeftFunction() != null)
        {
            node.getLeftFunction().apply(this);
        }
        outALeftFunctionStringValueWithoutParens(node);
    }

    public void inARightFunctionStringValueWithoutParens(ARightFunctionStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outARightFunctionStringValueWithoutParens(ARightFunctionStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightFunctionStringValueWithoutParens(ARightFunctionStringValueWithoutParens node)
    {
        inARightFunctionStringValueWithoutParens(node);
        if(node.getRightFunction() != null)
        {
            node.getRightFunction().apply(this);
        }
        outARightFunctionStringValueWithoutParens(node);
    }

    public void inATrimFunctionStringValueWithoutParens(ATrimFunctionStringValueWithoutParens node)
    {
        defaultIn(node);
    }

    public void outATrimFunctionStringValueWithoutParens(ATrimFunctionStringValueWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrimFunctionStringValueWithoutParens(ATrimFunctionStringValueWithoutParens node)
    {
        inATrimFunctionStringValueWithoutParens(node);
        if(node.getTrimFunction() != null)
        {
            node.getTrimFunction().apply(this);
        }
        outATrimFunctionStringValueWithoutParens(node);
    }

    public void inAStringValueWithParens(AStringValueWithParens node)
    {
        defaultIn(node);
    }

    public void outAStringValueWithParens(AStringValueWithParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValueWithParens(AStringValueWithParens node)
    {
        inAStringValueWithParens(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getStringValueWithoutParens() != null)
        {
            node.getStringValueWithoutParens().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAStringValueWithParens(node);
    }

    public void inAArithmeticExpressionIntValue(AArithmeticExpressionIntValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionIntValue(AArithmeticExpressionIntValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionIntValue(AArithmeticExpressionIntValue node)
    {
        inAArithmeticExpressionIntValue(node);
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        outAArithmeticExpressionIntValue(node);
    }

    public void inAShortIfStmtIntValue(AShortIfStmtIntValue node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtIntValue(AShortIfStmtIntValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtIntValue(AShortIfStmtIntValue node)
    {
        inAShortIfStmtIntValue(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtIntValue(node);
    }

    public void inAMethodChainingIntValue(AMethodChainingIntValue node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingIntValue(AMethodChainingIntValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingIntValue(AMethodChainingIntValue node)
    {
        inAMethodChainingIntValue(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingIntValue(node);
    }

    public void inAMethodIntValue(AMethodIntValue node)
    {
        defaultIn(node);
    }

    public void outAMethodIntValue(AMethodIntValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodIntValue(AMethodIntValue node)
    {
        inAMethodIntValue(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodIntValue(node);
    }

    public void inALenFunctionIntValue(ALenFunctionIntValue node)
    {
        defaultIn(node);
    }

    public void outALenFunctionIntValue(ALenFunctionIntValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenFunctionIntValue(ALenFunctionIntValue node)
    {
        inALenFunctionIntValue(node);
        if(node.getLenFunction() != null)
        {
            node.getLenFunction().apply(this);
        }
        outALenFunctionIntValue(node);
    }

    public void inACIntFunctionIntValue(ACIntFunctionIntValue node)
    {
        defaultIn(node);
    }

    public void outACIntFunctionIntValue(ACIntFunctionIntValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACIntFunctionIntValue(ACIntFunctionIntValue node)
    {
        inACIntFunctionIntValue(node);
        if(node.getCIntFunction() != null)
        {
            node.getCIntFunction().apply(this);
        }
        outACIntFunctionIntValue(node);
    }

    public void inALongDataType(ALongDataType node)
    {
        defaultIn(node);
    }

    public void outALongDataType(ALongDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALongDataType(ALongDataType node)
    {
        inALongDataType(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongDataType(node);
    }

    public void inAIntegerDataType(AIntegerDataType node)
    {
        defaultIn(node);
    }

    public void outAIntegerDataType(AIntegerDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerDataType(AIntegerDataType node)
    {
        inAIntegerDataType(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerDataType(node);
    }

    public void inASingleDataType(ASingleDataType node)
    {
        defaultIn(node);
    }

    public void outASingleDataType(ASingleDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleDataType(ASingleDataType node)
    {
        inASingleDataType(node);
        if(node.getSingle() != null)
        {
            node.getSingle().apply(this);
        }
        outASingleDataType(node);
    }

    public void inAStringDataType(AStringDataType node)
    {
        defaultIn(node);
    }

    public void outAStringDataType(AStringDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringDataType(AStringDataType node)
    {
        inAStringDataType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringDataType(node);
    }

    public void inABooleanDataType(ABooleanDataType node)
    {
        defaultIn(node);
    }

    public void outABooleanDataType(ABooleanDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanDataType(ABooleanDataType node)
    {
        inABooleanDataType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanDataType(node);
    }

    public void inAIdDataType(AIdDataType node)
    {
        defaultIn(node);
    }

    public void outAIdDataType(AIdDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdDataType(AIdDataType node)
    {
        inAIdDataType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdDataType(node);
    }

    public void inAWorkbookDataType(AWorkbookDataType node)
    {
        defaultIn(node);
    }

    public void outAWorkbookDataType(AWorkbookDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWorkbookDataType(AWorkbookDataType node)
    {
        inAWorkbookDataType(node);
        if(node.getWorkbook() != null)
        {
            node.getWorkbook().apply(this);
        }
        outAWorkbookDataType(node);
    }

    public void inAWorksheetDataType(AWorksheetDataType node)
    {
        defaultIn(node);
    }

    public void outAWorksheetDataType(AWorksheetDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWorksheetDataType(AWorksheetDataType node)
    {
        inAWorksheetDataType(node);
        if(node.getWorksheet() != null)
        {
            node.getWorksheet().apply(this);
        }
        outAWorksheetDataType(node);
    }

    public void inAIntegerArrayDataType(AIntegerArrayDataType node)
    {
        defaultIn(node);
    }

    public void outAIntegerArrayDataType(AIntegerArrayDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerArrayDataType(AIntegerArrayDataType node)
    {
        inAIntegerArrayDataType(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAIntegerArrayDataType(node);
    }

    public void inAByValModifier(AByValModifier node)
    {
        defaultIn(node);
    }

    public void outAByValModifier(AByValModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByValModifier(AByValModifier node)
    {
        inAByValModifier(node);
        if(node.getByVal() != null)
        {
            node.getByVal().apply(this);
        }
        outAByValModifier(node);
    }

    public void inAStaticModifier(AStaticModifier node)
    {
        defaultIn(node);
    }

    public void outAStaticModifier(AStaticModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticModifier(AStaticModifier node)
    {
        inAStaticModifier(node);
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        outAStaticModifier(node);
    }

    public void inADeclareModifier(ADeclareModifier node)
    {
        defaultIn(node);
    }

    public void outADeclareModifier(ADeclareModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclareModifier(ADeclareModifier node)
    {
        inADeclareModifier(node);
        if(node.getDeclare() != null)
        {
            node.getDeclare().apply(this);
        }
        outADeclareModifier(node);
    }

    public void inAGlobalModifier(AGlobalModifier node)
    {
        defaultIn(node);
    }

    public void outAGlobalModifier(AGlobalModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGlobalModifier(AGlobalModifier node)
    {
        inAGlobalModifier(node);
        if(node.getGlobal() != null)
        {
            node.getGlobal().apply(this);
        }
        outAGlobalModifier(node);
    }

    public void inAConstModifier(AConstModifier node)
    {
        defaultIn(node);
    }

    public void outAConstModifier(AConstModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstModifier(AConstModifier node)
    {
        inAConstModifier(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstModifier(node);
    }

    public void inAPrivateModifier(APrivateModifier node)
    {
        defaultIn(node);
    }

    public void outAPrivateModifier(APrivateModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrivateModifier(APrivateModifier node)
    {
        inAPrivateModifier(node);
        if(node.getPrivate() != null)
        {
            node.getPrivate().apply(this);
        }
        outAPrivateModifier(node);
    }

    public void inAPublicModifier(APublicModifier node)
    {
        defaultIn(node);
    }

    public void outAPublicModifier(APublicModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPublicModifier(APublicModifier node)
    {
        inAPublicModifier(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAPublicModifier(node);
    }

    public void inANotLogicalOperator(ANotLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outANotLogicalOperator(ANotLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotLogicalOperator(ANotLogicalOperator node)
    {
        inANotLogicalOperator(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotLogicalOperator(node);
    }

    public void inAEqualLogicalOperator(AEqualLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAEqualLogicalOperator(AEqualLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualLogicalOperator(AEqualLogicalOperator node)
    {
        inAEqualLogicalOperator(node);
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        outAEqualLogicalOperator(node);
    }

    public void inANotEqualLogicalOperator(ANotEqualLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outANotEqualLogicalOperator(ANotEqualLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualLogicalOperator(ANotEqualLogicalOperator node)
    {
        inANotEqualLogicalOperator(node);
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        outANotEqualLogicalOperator(node);
    }

    public void inALessThanLogicalOperator(ALessThanLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outALessThanLogicalOperator(ALessThanLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanLogicalOperator(ALessThanLogicalOperator node)
    {
        inALessThanLogicalOperator(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outALessThanLogicalOperator(node);
    }

    public void inAGreaterThanLogicalOperator(AGreaterThanLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanLogicalOperator(AGreaterThanLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanLogicalOperator(AGreaterThanLogicalOperator node)
    {
        inAGreaterThanLogicalOperator(node);
        if(node.getGreaterThan() != null)
        {
            node.getGreaterThan().apply(this);
        }
        outAGreaterThanLogicalOperator(node);
    }

    public void inALessThanOrEqualLogicalOperator(ALessThanOrEqualLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outALessThanOrEqualLogicalOperator(ALessThanOrEqualLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanOrEqualLogicalOperator(ALessThanOrEqualLogicalOperator node)
    {
        inALessThanOrEqualLogicalOperator(node);
        if(node.getLessThanOrEqual() != null)
        {
            node.getLessThanOrEqual().apply(this);
        }
        outALessThanOrEqualLogicalOperator(node);
    }

    public void inAGreaterThanOrEqualLogicalOperator(AGreaterThanOrEqualLogicalOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanOrEqualLogicalOperator(AGreaterThanOrEqualLogicalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanOrEqualLogicalOperator(AGreaterThanOrEqualLogicalOperator node)
    {
        inAGreaterThanOrEqualLogicalOperator(node);
        if(node.getGreaterThanOrEqual() != null)
        {
            node.getGreaterThanOrEqual().apply(this);
        }
        outAGreaterThanOrEqualLogicalOperator(node);
    }

    public void inAAdditionArithmeticOperator(AAdditionArithmeticOperator node)
    {
        defaultIn(node);
    }

    public void outAAdditionArithmeticOperator(AAdditionArithmeticOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionArithmeticOperator(AAdditionArithmeticOperator node)
    {
        inAAdditionArithmeticOperator(node);
        if(node.getAddition() != null)
        {
            node.getAddition().apply(this);
        }
        outAAdditionArithmeticOperator(node);
    }

    public void inASubtractionArithmeticOperator(ASubtractionArithmeticOperator node)
    {
        defaultIn(node);
    }

    public void outASubtractionArithmeticOperator(ASubtractionArithmeticOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractionArithmeticOperator(ASubtractionArithmeticOperator node)
    {
        inASubtractionArithmeticOperator(node);
        if(node.getSubtraction() != null)
        {
            node.getSubtraction().apply(this);
        }
        outASubtractionArithmeticOperator(node);
    }

    public void inAMultiplicationArithmeticOperator(AMultiplicationArithmeticOperator node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationArithmeticOperator(AMultiplicationArithmeticOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationArithmeticOperator(AMultiplicationArithmeticOperator node)
    {
        inAMultiplicationArithmeticOperator(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationArithmeticOperator(node);
    }

    public void inADivisionArithmeticOperator(ADivisionArithmeticOperator node)
    {
        defaultIn(node);
    }

    public void outADivisionArithmeticOperator(ADivisionArithmeticOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisionArithmeticOperator(ADivisionArithmeticOperator node)
    {
        inADivisionArithmeticOperator(node);
        if(node.getDivision() != null)
        {
            node.getDivision().apply(this);
        }
        outADivisionArithmeticOperator(node);
    }

    public void inAModuloArithmeticOperator(AModuloArithmeticOperator node)
    {
        defaultIn(node);
    }

    public void outAModuloArithmeticOperator(AModuloArithmeticOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloArithmeticOperator(AModuloArithmeticOperator node)
    {
        inAModuloArithmeticOperator(node);
        if(node.getModulo() != null)
        {
            node.getModulo().apply(this);
        }
        outAModuloArithmeticOperator(node);
    }

    public void inAModifierId(AModifierId node)
    {
        defaultIn(node);
    }

    public void outAModifierId(AModifierId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModifierId(AModifierId node)
    {
        inAModifierId(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAModifierId(node);
    }

    public void inAComment(AComment node)
    {
        defaultIn(node);
    }

    public void outAComment(AComment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComment(AComment node)
    {
        inAComment(node);
        if(node.getCommentToken() != null)
        {
            node.getCommentToken().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        outAComment(node);
    }

    public void inAVarDecIn(AVarDecIn node)
    {
        defaultIn(node);
    }

    public void outAVarDecIn(AVarDecIn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecIn(AVarDecIn node)
    {
        inAVarDecIn(node);
        if(node.getModifierId() != null)
        {
            node.getModifierId().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAVarDecIn(node);
    }

    public void inAVarDecInWithDataType(AVarDecInWithDataType node)
    {
        defaultIn(node);
    }

    public void outAVarDecInWithDataType(AVarDecInWithDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecInWithDataType(AVarDecInWithDataType node)
    {
        inAVarDecInWithDataType(node);
        if(node.getModifierId() != null)
        {
            node.getModifierId().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAVarDecInWithDataType(node);
    }

    public void inAEnumDecIn(AEnumDecIn node)
    {
        defaultIn(node);
    }

    public void outAEnumDecIn(AEnumDecIn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumDecIn(AEnumDecIn node)
    {
        inAEnumDecIn(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEnumStart() != null)
        {
            node.getEnumStart().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PEnumValue> copy = new ArrayList<PEnumValue>(node.getEnumValue());
            for(PEnumValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEnumEnd() != null)
        {
            node.getEnumEnd().apply(this);
        }
        outAEnumDecIn(node);
    }

    public void inAGeneralStmtEnumValue(AGeneralStmtEnumValue node)
    {
        defaultIn(node);
    }

    public void outAGeneralStmtEnumValue(AGeneralStmtEnumValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralStmtEnumValue(AGeneralStmtEnumValue node)
    {
        inAGeneralStmtEnumValue(node);
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAGeneralStmtEnumValue(node);
    }

    public void inAVarSetEnumValue(AVarSetEnumValue node)
    {
        defaultIn(node);
    }

    public void outAVarSetEnumValue(AVarSetEnumValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSetEnumValue(AVarSetEnumValue node)
    {
        inAVarSetEnumValue(node);
        if(node.getVarSet() != null)
        {
            node.getVarSet().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAVarSetEnumValue(node);
    }

    public void inAWithoutValueEnumValue(AWithoutValueEnumValue node)
    {
        defaultIn(node);
    }

    public void outAWithoutValueEnumValue(AWithoutValueEnumValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutValueEnumValue(AWithoutValueEnumValue node)
    {
        inAWithoutValueEnumValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAWithoutValueEnumValue(node);
    }

    public void inAAttributeDecIn(AAttributeDecIn node)
    {
        defaultIn(node);
    }

    public void outAAttributeDecIn(AAttributeDecIn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributeDecIn(AAttributeDecIn node)
    {
        inAAttributeDecIn(node);
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAAttributeDecIn(node);
    }

    public void inAVarDec(AVarDec node)
    {
        defaultIn(node);
    }

    public void outAVarDec(AVarDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDec(AVarDec node)
    {
        inAVarDec(node);
        if(node.getModifierId() != null)
        {
            node.getModifierId().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outAVarDec(node);
    }

    public void inAVarDecList(AVarDecList node)
    {
        defaultIn(node);
    }

    public void outAVarDecList(AVarDecList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecList(AVarDecList node)
    {
        inAVarDecList(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            List<PVarDecListValue> copy = new ArrayList<PVarDecListValue>(node.getVarDecListValue());
            for(PVarDecListValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVarDec() != null)
        {
            node.getVarDec().apply(this);
        }
        outAVarDecList(node);
    }

    public void inAVarDecListValue(AVarDecListValue node)
    {
        defaultIn(node);
    }

    public void outAVarDecListValue(AVarDecListValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecListValue(AVarDecListValue node)
    {
        inAVarDecListValue(node);
        if(node.getVarDec() != null)
        {
            node.getVarDec().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAVarDecListValue(node);
    }

    public void inAArrayDec(AArrayDec node)
    {
        defaultIn(node);
    }

    public void outAArrayDec(AArrayDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDec(AArrayDec node)
    {
        inAArrayDec(node);
        if(node.getModifierId() != null)
        {
            node.getModifierId().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outAArrayDec(node);
    }

    public void inARangeArrayDec(ARangeArrayDec node)
    {
        defaultIn(node);
    }

    public void outARangeArrayDec(ARangeArrayDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeArrayDec(ARangeArrayDec node)
    {
        inARangeArrayDec(node);
        if(node.getModifierId() != null)
        {
            node.getModifierId().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getSmallest() != null)
        {
            node.getSmallest().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getLargest() != null)
        {
            node.getLargest().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outARangeArrayDec(node);
    }

    public void inAVarSet(AVarSet node)
    {
        defaultIn(node);
    }

    public void outAVarSet(AVarSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSet(AVarSet node)
    {
        inAVarSet(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAVarSet(node);
    }

    public void inATrimVarSet(ATrimVarSet node)
    {
        defaultIn(node);
    }

    public void outATrimVarSet(ATrimVarSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrimVarSet(ATrimVarSet node)
    {
        inATrimVarSet(node);
        if(node.getTrimFunction() != null)
        {
            node.getTrimFunction().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outATrimVarSet(node);
    }

    public void inAAddFunctionVarSet(AAddFunctionVarSet node)
    {
        defaultIn(node);
    }

    public void outAAddFunctionVarSet(AAddFunctionVarSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddFunctionVarSet(AAddFunctionVarSet node)
    {
        inAAddFunctionVarSet(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getAddFunction() != null)
        {
            node.getAddFunction().apply(this);
        }
        outAAddFunctionVarSet(node);
    }

    public void inAArrayResize(AArrayResize node)
    {
        defaultIn(node);
    }

    public void outAArrayResize(AArrayResize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayResize(AArrayResize node)
    {
        inAArrayResize(node);
        if(node.getArrayResizeToken() != null)
        {
            node.getArrayResizeToken().apply(this);
        }
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getSmallest() != null)
        {
            node.getSmallest().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getLargest() != null)
        {
            node.getLargest().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAArrayResize(node);
    }

    public void inAArrayResizePreserveData(AArrayResizePreserveData node)
    {
        defaultIn(node);
    }

    public void outAArrayResizePreserveData(AArrayResizePreserveData node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayResizePreserveData(AArrayResizePreserveData node)
    {
        inAArrayResizePreserveData(node);
        if(node.getArrayResizeToken() != null)
        {
            node.getArrayResizeToken().apply(this);
        }
        if(node.getPreserve() != null)
        {
            node.getPreserve().apply(this);
        }
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getSmallest() != null)
        {
            node.getSmallest().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getLargest() != null)
        {
            node.getLargest().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAArrayResizePreserveData(node);
    }

    public void inAArraySetElement(AArraySetElement node)
    {
        defaultIn(node);
    }

    public void outAArraySetElement(AArraySetElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySetElement(AArraySetElement node)
    {
        inAArraySetElement(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAArraySetElement(node);
    }

    public void inATypeDec(ATypeDec node)
    {
        defaultIn(node);
    }

    public void outATypeDec(ATypeDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDec(ATypeDec node)
    {
        inATypeDec(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeStart() != null)
        {
            node.getTypeStart().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PTypeDecValue> copy = new ArrayList<PTypeDecValue>(node.getTypeDecValue());
            for(PTypeDecValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTypeEnd() != null)
        {
            node.getTypeEnd().apply(this);
        }
        outATypeDec(node);
    }

    public void inAVarDecTypeDecValue(AVarDecTypeDecValue node)
    {
        defaultIn(node);
    }

    public void outAVarDecTypeDecValue(AVarDecTypeDecValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecTypeDecValue(AVarDecTypeDecValue node)
    {
        inAVarDecTypeDecValue(node);
        if(node.getVarDec() != null)
        {
            node.getVarDec().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAVarDecTypeDecValue(node);
    }

    public void inAArrayDecTypeDecValue(AArrayDecTypeDecValue node)
    {
        defaultIn(node);
    }

    public void outAArrayDecTypeDecValue(AArrayDecTypeDecValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDecTypeDecValue(AArrayDecTypeDecValue node)
    {
        inAArrayDecTypeDecValue(node);
        if(node.getArrayDec() != null)
        {
            node.getArrayDec().apply(this);
        }
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAArrayDecTypeDecValue(node);
    }

    public void inAGeneralStmtTypeDecValue(AGeneralStmtTypeDecValue node)
    {
        defaultIn(node);
    }

    public void outAGeneralStmtTypeDecValue(AGeneralStmtTypeDecValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralStmtTypeDecValue(AGeneralStmtTypeDecValue node)
    {
        inAGeneralStmtTypeDecValue(node);
        if(node.getGeneralStmt() != null)
        {
            node.getGeneralStmt().apply(this);
        }
        outAGeneralStmtTypeDecValue(node);
    }

    public void inASub(ASub node)
    {
        defaultIn(node);
    }

    public void outASub(ASub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASub(ASub node)
    {
        inASub(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSubStart() != null)
        {
            node.getSubStart().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParamList() != null)
        {
            node.getParamList().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSubEnd() != null)
        {
            node.getSubEnd().apply(this);
        }
        outASub(node);
    }

    public void inAParamList(AParamList node)
    {
        defaultIn(node);
    }

    public void outAParamList(AParamList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamList(AParamList node)
    {
        inAParamList(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        {
            List<PParamPart> copy = new ArrayList<PParamPart>(node.getParamPart());
            for(PParamPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParamValue() != null)
        {
            node.getParamValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAParamList(node);
    }

    public void inANoParamParamList(ANoParamParamList node)
    {
        defaultIn(node);
    }

    public void outANoParamParamList(ANoParamParamList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoParamParamList(ANoParamParamList node)
    {
        inANoParamParamList(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outANoParamParamList(node);
    }

    public void inAParamPart(AParamPart node)
    {
        defaultIn(node);
    }

    public void outAParamPart(AParamPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamPart(AParamPart node)
    {
        inAParamPart(node);
        if(node.getParamValue() != null)
        {
            node.getParamValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParamPart(node);
    }

    public void inAParamParamValue(AParamParamValue node)
    {
        defaultIn(node);
    }

    public void outAParamParamValue(AParamParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamParamValue(AParamParamValue node)
    {
        inAParamParamValue(node);
        if(node.getVarDec() != null)
        {
            node.getVarDec().apply(this);
        }
        outAParamParamValue(node);
    }

    public void inAArrayParamParamValue(AArrayParamParamValue node)
    {
        defaultIn(node);
    }

    public void outAArrayParamParamValue(AArrayParamParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayParamParamValue(AArrayParamParamValue node)
    {
        inAArrayParamParamValue(node);
        if(node.getArrayDec() != null)
        {
            node.getArrayDec().apply(this);
        }
        outAArrayParamParamValue(node);
    }

    public void inAOptionalParamValueParamValue(AOptionalParamValueParamValue node)
    {
        defaultIn(node);
    }

    public void outAOptionalParamValueParamValue(AOptionalParamValueParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalParamValueParamValue(AOptionalParamValueParamValue node)
    {
        inAOptionalParamValueParamValue(node);
        if(node.getOptionalParamValue() != null)
        {
            node.getOptionalParamValue().apply(this);
        }
        outAOptionalParamValueParamValue(node);
    }

    public void inAParamWithoutDataTypeParamValue(AParamWithoutDataTypeParamValue node)
    {
        defaultIn(node);
    }

    public void outAParamWithoutDataTypeParamValue(AParamWithoutDataTypeParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamWithoutDataTypeParamValue(AParamWithoutDataTypeParamValue node)
    {
        inAParamWithoutDataTypeParamValue(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParamWithoutDataTypeParamValue(node);
    }

    public void inAOptionalParamOptionalParamValue(AOptionalParamOptionalParamValue node)
    {
        defaultIn(node);
    }

    public void outAOptionalParamOptionalParamValue(AOptionalParamOptionalParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalParamOptionalParamValue(AOptionalParamOptionalParamValue node)
    {
        inAOptionalParamOptionalParamValue(node);
        if(node.getOptional() != null)
        {
            node.getOptional().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAOptionalParamOptionalParamValue(node);
    }

    public void inAOptionalParamAsTypeOptionalParamValue(AOptionalParamAsTypeOptionalParamValue node)
    {
        defaultIn(node);
    }

    public void outAOptionalParamAsTypeOptionalParamValue(AOptionalParamAsTypeOptionalParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalParamAsTypeOptionalParamValue(AOptionalParamAsTypeOptionalParamValue node)
    {
        inAOptionalParamAsTypeOptionalParamValue(node);
        if(node.getOptional() != null)
        {
            node.getOptional().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outAOptionalParamAsTypeOptionalParamValue(node);
    }

    public void inAOptionalParamAsBooleanOptionalParamValue(AOptionalParamAsBooleanOptionalParamValue node)
    {
        defaultIn(node);
    }

    public void outAOptionalParamAsBooleanOptionalParamValue(AOptionalParamAsBooleanOptionalParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalParamAsBooleanOptionalParamValue(AOptionalParamAsBooleanOptionalParamValue node)
    {
        inAOptionalParamAsBooleanOptionalParamValue(node);
        if(node.getOptional() != null)
        {
            node.getOptional().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outAOptionalParamAsBooleanOptionalParamValue(node);
    }

    public void inAOptionalParamAsIntegerOptionalParamValue(AOptionalParamAsIntegerOptionalParamValue node)
    {
        defaultIn(node);
    }

    public void outAOptionalParamAsIntegerOptionalParamValue(AOptionalParamAsIntegerOptionalParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalParamAsIntegerOptionalParamValue(AOptionalParamAsIntegerOptionalParamValue node)
    {
        inAOptionalParamAsIntegerOptionalParamValue(node);
        if(node.getOptional() != null)
        {
            node.getOptional().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAOptionalParamAsIntegerOptionalParamValue(node);
    }

    public void inAOptionalParamAsStringOptionalParamValue(AOptionalParamAsStringOptionalParamValue node)
    {
        defaultIn(node);
    }

    public void outAOptionalParamAsStringOptionalParamValue(AOptionalParamAsStringOptionalParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalParamAsStringOptionalParamValue(AOptionalParamAsStringOptionalParamValue node)
    {
        inAOptionalParamAsStringOptionalParamValue(node);
        if(node.getOptional() != null)
        {
            node.getOptional().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAOptionalParamAsStringOptionalParamValue(node);
    }

    public void inAOptionalParamNoDataTypeOptionalParamValue(AOptionalParamNoDataTypeOptionalParamValue node)
    {
        defaultIn(node);
    }

    public void outAOptionalParamNoDataTypeOptionalParamValue(AOptionalParamNoDataTypeOptionalParamValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionalParamNoDataTypeOptionalParamValue(AOptionalParamNoDataTypeOptionalParamValue node)
    {
        inAOptionalParamNoDataTypeOptionalParamValue(node);
        if(node.getOptional() != null)
        {
            node.getOptional().apply(this);
        }
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAOptionalParamNoDataTypeOptionalParamValue(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFunctionStart() != null)
        {
            node.getFunctionStart().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParamList() != null)
        {
            node.getParamList().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFunctionEnd() != null)
        {
            node.getFunctionEnd().apply(this);
        }
        outAFunction(node);
    }

    public void inAFunctionWithoutReturnType(AFunctionWithoutReturnType node)
    {
        defaultIn(node);
    }

    public void outAFunctionWithoutReturnType(AFunctionWithoutReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionWithoutReturnType(AFunctionWithoutReturnType node)
    {
        inAFunctionWithoutReturnType(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFunctionStart() != null)
        {
            node.getFunctionStart().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParamList() != null)
        {
            node.getParamList().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFunctionEnd() != null)
        {
            node.getFunctionEnd().apply(this);
        }
        outAFunctionWithoutReturnType(node);
    }

    public void inAMethodCallInParens(AMethodCallInParens node)
    {
        defaultIn(node);
    }

    public void outAMethodCallInParens(AMethodCallInParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallInParens(AMethodCallInParens node)
    {
        inAMethodCallInParens(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAMethodCallInParens(node);
    }

    public void inAMethodCall(AMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodCall(AMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCall(AMethodCall node)
    {
        inAMethodCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outAMethodCall(node);
    }

    public void inAReplaceMethodCall(AReplaceMethodCall node)
    {
        defaultIn(node);
    }

    public void outAReplaceMethodCall(AReplaceMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReplaceMethodCall(AReplaceMethodCall node)
    {
        inAReplaceMethodCall(node);
        if(node.getReplace() != null)
        {
            node.getReplace().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outAReplaceMethodCall(node);
    }

    public void inAInStrMethodCall(AInStrMethodCall node)
    {
        defaultIn(node);
    }

    public void outAInStrMethodCall(AInStrMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInStrMethodCall(AInStrMethodCall node)
    {
        inAInStrMethodCall(node);
        if(node.getInStr() != null)
        {
            node.getInStr().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outAInStrMethodCall(node);
    }

    public void inAParamCallList(AParamCallList node)
    {
        defaultIn(node);
    }

    public void outAParamCallList(AParamCallList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamCallList(AParamCallList node)
    {
        inAParamCallList(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        {
            List<PParamCallPart> copy = new ArrayList<PParamCallPart>(node.getParamCallPart());
            for(PParamCallPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParamCallValue() != null)
        {
            node.getParamCallValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAParamCallList(node);
    }

    public void inANoParamParamCallList(ANoParamParamCallList node)
    {
        defaultIn(node);
    }

    public void outANoParamParamCallList(ANoParamParamCallList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoParamParamCallList(ANoParamParamCallList node)
    {
        inANoParamParamCallList(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outANoParamParamCallList(node);
    }

    public void inAParamCallPart(AParamCallPart node)
    {
        defaultIn(node);
    }

    public void outAParamCallPart(AParamCallPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamCallPart(AParamCallPart node)
    {
        inAParamCallPart(node);
        if(node.getParamCallValue() != null)
        {
            node.getParamCallValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParamCallPart(node);
    }

    public void inACommaParamCallPart(ACommaParamCallPart node)
    {
        defaultIn(node);
    }

    public void outACommaParamCallPart(ACommaParamCallPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaParamCallPart(ACommaParamCallPart node)
    {
        inACommaParamCallPart(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaParamCallPart(node);
    }

    public void inAMoreParamCallValuesParamCallValue(AMoreParamCallValuesParamCallValue node)
    {
        defaultIn(node);
    }

    public void outAMoreParamCallValuesParamCallValue(AMoreParamCallValuesParamCallValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreParamCallValuesParamCallValue(AMoreParamCallValuesParamCallValue node)
    {
        inAMoreParamCallValuesParamCallValue(node);
        if(node.getMoreParamCallValues() != null)
        {
            node.getMoreParamCallValues().apply(this);
        }
        outAMoreParamCallValuesParamCallValue(node);
    }

    public void inAArithmeticExpressionParamCallValue(AArithmeticExpressionParamCallValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionParamCallValue(AArithmeticExpressionParamCallValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionParamCallValue(AArithmeticExpressionParamCallValue node)
    {
        inAArithmeticExpressionParamCallValue(node);
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        outAArithmeticExpressionParamCallValue(node);
    }

    public void inAInputFunctionMoreParamCallValues(AInputFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAInputFunctionMoreParamCallValues(AInputFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputFunctionMoreParamCallValues(AInputFunctionMoreParamCallValues node)
    {
        inAInputFunctionMoreParamCallValues(node);
        if(node.getInputFunction() != null)
        {
            node.getInputFunction().apply(this);
        }
        outAInputFunctionMoreParamCallValues(node);
    }

    public void inALofFunctionMoreParamCallValues(ALofFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outALofFunctionMoreParamCallValues(ALofFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALofFunctionMoreParamCallValues(ALofFunctionMoreParamCallValues node)
    {
        inALofFunctionMoreParamCallValues(node);
        if(node.getLofFunction() != null)
        {
            node.getLofFunction().apply(this);
        }
        outALofFunctionMoreParamCallValues(node);
    }

    public void inALBoundFunctionMoreParamCallValues(ALBoundFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outALBoundFunctionMoreParamCallValues(ALBoundFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALBoundFunctionMoreParamCallValues(ALBoundFunctionMoreParamCallValues node)
    {
        inALBoundFunctionMoreParamCallValues(node);
        if(node.getLBoundFunction() != null)
        {
            node.getLBoundFunction().apply(this);
        }
        outALBoundFunctionMoreParamCallValues(node);
    }

    public void inAConditionMoreParamCallValues(AConditionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAConditionMoreParamCallValues(AConditionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionMoreParamCallValues(AConditionMoreParamCallValues node)
    {
        inAConditionMoreParamCallValues(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outAConditionMoreParamCallValues(node);
    }

    public void inAExcelWorkbookMoreParamCallValues(AExcelWorkbookMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAExcelWorkbookMoreParamCallValues(AExcelWorkbookMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelWorkbookMoreParamCallValues(AExcelWorkbookMoreParamCallValues node)
    {
        inAExcelWorkbookMoreParamCallValues(node);
        if(node.getExcelWorkbook() != null)
        {
            node.getExcelWorkbook().apply(this);
        }
        outAExcelWorkbookMoreParamCallValues(node);
    }

    public void inAExcelSheetMoreParamCallValues(AExcelSheetMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAExcelSheetMoreParamCallValues(AExcelSheetMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelSheetMoreParamCallValues(AExcelSheetMoreParamCallValues node)
    {
        inAExcelSheetMoreParamCallValues(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        outAExcelSheetMoreParamCallValues(node);
    }

    public void inAMethodChainingMoreParamCallValues(AMethodChainingMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingMoreParamCallValues(AMethodChainingMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingMoreParamCallValues(AMethodChainingMoreParamCallValues node)
    {
        inAMethodChainingMoreParamCallValues(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingMoreParamCallValues(node);
    }

    public void inAGetNameExcelFunctionMoreParamCallValues(AGetNameExcelFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAGetNameExcelFunctionMoreParamCallValues(AGetNameExcelFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGetNameExcelFunctionMoreParamCallValues(AGetNameExcelFunctionMoreParamCallValues node)
    {
        inAGetNameExcelFunctionMoreParamCallValues(node);
        if(node.getGetNameExcelFunction() != null)
        {
            node.getGetNameExcelFunction().apply(this);
        }
        outAGetNameExcelFunctionMoreParamCallValues(node);
    }

    public void inACellMoreParamCallValues(ACellMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outACellMoreParamCallValues(ACellMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACellMoreParamCallValues(ACellMoreParamCallValues node)
    {
        inACellMoreParamCallValues(node);
        if(node.getExcelCell() != null)
        {
            node.getExcelCell().apply(this);
        }
        outACellMoreParamCallValues(node);
    }

    public void inAActiveWorbookFullNameFunctionMoreParamCallValues(AActiveWorbookFullNameFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAActiveWorbookFullNameFunctionMoreParamCallValues(AActiveWorbookFullNameFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActiveWorbookFullNameFunctionMoreParamCallValues(AActiveWorbookFullNameFunctionMoreParamCallValues node)
    {
        inAActiveWorbookFullNameFunctionMoreParamCallValues(node);
        if(node.getActiveWorbookFullNameFunction() != null)
        {
            node.getActiveWorbookFullNameFunction().apply(this);
        }
        outAActiveWorbookFullNameFunctionMoreParamCallValues(node);
    }

    public void inALCaseFunctionMoreParamCallValues(ALCaseFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outALCaseFunctionMoreParamCallValues(ALCaseFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALCaseFunctionMoreParamCallValues(ALCaseFunctionMoreParamCallValues node)
    {
        inALCaseFunctionMoreParamCallValues(node);
        if(node.getLCaseFunction() != null)
        {
            node.getLCaseFunction().apply(this);
        }
        outALCaseFunctionMoreParamCallValues(node);
    }

    public void inAParamWithParamNameMoreParamCallValues(AParamWithParamNameMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAParamWithParamNameMoreParamCallValues(AParamWithParamNameMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamWithParamNameMoreParamCallValues(AParamWithParamNameMoreParamCallValues node)
    {
        inAParamWithParamNameMoreParamCallValues(node);
        if(node.getParamWithParamName() != null)
        {
            node.getParamWithParamName().apply(this);
        }
        outAParamWithParamNameMoreParamCallValues(node);
    }

    public void inAShortIfStmtMoreParamCallValues(AShortIfStmtMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtMoreParamCallValues(AShortIfStmtMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtMoreParamCallValues(AShortIfStmtMoreParamCallValues node)
    {
        inAShortIfStmtMoreParamCallValues(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtMoreParamCallValues(node);
    }

    public void inACharacterStringMoreParamCallValues(ACharacterStringMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outACharacterStringMoreParamCallValues(ACharacterStringMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterStringMoreParamCallValues(ACharacterStringMoreParamCallValues node)
    {
        inACharacterStringMoreParamCallValues(node);
        if(node.getCharacterString() != null)
        {
            node.getCharacterString().apply(this);
        }
        outACharacterStringMoreParamCallValues(node);
    }

    public void inAMethodMoreParamCallValues(AMethodMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAMethodMoreParamCallValues(AMethodMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodMoreParamCallValues(AMethodMoreParamCallValues node)
    {
        inAMethodMoreParamCallValues(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodMoreParamCallValues(node);
    }

    public void inATrueMoreParamCallValues(ATrueMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outATrueMoreParamCallValues(ATrueMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueMoreParamCallValues(ATrueMoreParamCallValues node)
    {
        inATrueMoreParamCallValues(node);
        if(node.getBooleanValueTrue() != null)
        {
            node.getBooleanValueTrue().apply(this);
        }
        outATrueMoreParamCallValues(node);
    }

    public void inAFalseMoreParamCallValues(AFalseMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAFalseMoreParamCallValues(AFalseMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseMoreParamCallValues(AFalseMoreParamCallValues node)
    {
        inAFalseMoreParamCallValues(node);
        if(node.getBooleanValueFalse() != null)
        {
            node.getBooleanValueFalse().apply(this);
        }
        outAFalseMoreParamCallValues(node);
    }

    public void inACStrFunctionMoreParamCallValues(ACStrFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outACStrFunctionMoreParamCallValues(ACStrFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStrFunctionMoreParamCallValues(ACStrFunctionMoreParamCallValues node)
    {
        inACStrFunctionMoreParamCallValues(node);
        if(node.getCStrFunction() != null)
        {
            node.getCStrFunction().apply(this);
        }
        outACStrFunctionMoreParamCallValues(node);
    }

    public void inACIntFunctionMoreParamCallValues(ACIntFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outACIntFunctionMoreParamCallValues(ACIntFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACIntFunctionMoreParamCallValues(ACIntFunctionMoreParamCallValues node)
    {
        inACIntFunctionMoreParamCallValues(node);
        if(node.getCIntFunction() != null)
        {
            node.getCIntFunction().apply(this);
        }
        outACIntFunctionMoreParamCallValues(node);
    }

    public void inAUCaseFunctionMoreParamCallValues(AUCaseFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAUCaseFunctionMoreParamCallValues(AUCaseFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUCaseFunctionMoreParamCallValues(AUCaseFunctionMoreParamCallValues node)
    {
        inAUCaseFunctionMoreParamCallValues(node);
        if(node.getUCaseFunction() != null)
        {
            node.getUCaseFunction().apply(this);
        }
        outAUCaseFunctionMoreParamCallValues(node);
    }

    public void inALenFunctionMoreParamCallValues(ALenFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outALenFunctionMoreParamCallValues(ALenFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenFunctionMoreParamCallValues(ALenFunctionMoreParamCallValues node)
    {
        inALenFunctionMoreParamCallValues(node);
        if(node.getLenFunction() != null)
        {
            node.getLenFunction().apply(this);
        }
        outALenFunctionMoreParamCallValues(node);
    }

    public void inAMidFunctionMoreParamCallValues(AMidFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionMoreParamCallValues(AMidFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionMoreParamCallValues(AMidFunctionMoreParamCallValues node)
    {
        inAMidFunctionMoreParamCallValues(node);
        if(node.getMidFunction() != null)
        {
            node.getMidFunction().apply(this);
        }
        outAMidFunctionMoreParamCallValues(node);
    }

    public void inALeftFunctionMoreParamCallValues(ALeftFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outALeftFunctionMoreParamCallValues(ALeftFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftFunctionMoreParamCallValues(ALeftFunctionMoreParamCallValues node)
    {
        inALeftFunctionMoreParamCallValues(node);
        if(node.getLeftFunction() != null)
        {
            node.getLeftFunction().apply(this);
        }
        outALeftFunctionMoreParamCallValues(node);
    }

    public void inARightFunctionMoreParamCallValues(ARightFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outARightFunctionMoreParamCallValues(ARightFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightFunctionMoreParamCallValues(ARightFunctionMoreParamCallValues node)
    {
        inARightFunctionMoreParamCallValues(node);
        if(node.getRightFunction() != null)
        {
            node.getRightFunction().apply(this);
        }
        outARightFunctionMoreParamCallValues(node);
    }

    public void inATrimFunctionMoreParamCallValues(ATrimFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outATrimFunctionMoreParamCallValues(ATrimFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrimFunctionMoreParamCallValues(ATrimFunctionMoreParamCallValues node)
    {
        inATrimFunctionMoreParamCallValues(node);
        if(node.getTrimFunction() != null)
        {
            node.getTrimFunction().apply(this);
        }
        outATrimFunctionMoreParamCallValues(node);
    }

    public void inAUBoundFunctionMoreParamCallValues(AUBoundFunctionMoreParamCallValues node)
    {
        defaultIn(node);
    }

    public void outAUBoundFunctionMoreParamCallValues(AUBoundFunctionMoreParamCallValues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUBoundFunctionMoreParamCallValues(AUBoundFunctionMoreParamCallValues node)
    {
        inAUBoundFunctionMoreParamCallValues(node);
        if(node.getUBoundFunction() != null)
        {
            node.getUBoundFunction().apply(this);
        }
        outAUBoundFunctionMoreParamCallValues(node);
    }

    public void inAMethodCallWithoutParens(AMethodCallWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAMethodCallWithoutParens(AMethodCallWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallWithoutParens(AMethodCallWithoutParens node)
    {
        inAMethodCallWithoutParens(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        if(node.getParamCallListWithoutParens() != null)
        {
            node.getParamCallListWithoutParens().apply(this);
        }
        outAMethodCallWithoutParens(node);
    }

    public void inANoParamMethodCallWithoutParens(ANoParamMethodCallWithoutParens node)
    {
        defaultIn(node);
    }

    public void outANoParamMethodCallWithoutParens(ANoParamMethodCallWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoParamMethodCallWithoutParens(ANoParamMethodCallWithoutParens node)
    {
        inANoParamMethodCallWithoutParens(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outANoParamMethodCallWithoutParens(node);
    }

    public void inAParamCallListWithoutParens(AParamCallListWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAParamCallListWithoutParens(AParamCallListWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamCallListWithoutParens(AParamCallListWithoutParens node)
    {
        inAParamCallListWithoutParens(node);
        {
            List<PParamCallListWithoutParensPart> copy = new ArrayList<PParamCallListWithoutParensPart>(node.getParamCallListWithoutParensPart());
            for(PParamCallListWithoutParensPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParamCallListWithoutParensValue() != null)
        {
            node.getParamCallListWithoutParensValue().apply(this);
        }
        outAParamCallListWithoutParens(node);
    }

    public void inAParamCallListWithoutParensPart(AParamCallListWithoutParensPart node)
    {
        defaultIn(node);
    }

    public void outAParamCallListWithoutParensPart(AParamCallListWithoutParensPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamCallListWithoutParensPart(AParamCallListWithoutParensPart node)
    {
        inAParamCallListWithoutParensPart(node);
        if(node.getParamCallListWithoutParensValue() != null)
        {
            node.getParamCallListWithoutParensValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParamCallListWithoutParensPart(node);
    }

    public void inACommaParamCallListWithoutParensPart(ACommaParamCallListWithoutParensPart node)
    {
        defaultIn(node);
    }

    public void outACommaParamCallListWithoutParensPart(ACommaParamCallListWithoutParensPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaParamCallListWithoutParensPart(ACommaParamCallListWithoutParensPart node)
    {
        inACommaParamCallListWithoutParensPart(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaParamCallListWithoutParensPart(node);
    }

    public void inASimpelConditionParamCallListWithoutParensValue(ASimpelConditionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outASimpelConditionParamCallListWithoutParensValue(ASimpelConditionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpelConditionParamCallListWithoutParensValue(ASimpelConditionParamCallListWithoutParensValue node)
    {
        inASimpelConditionParamCallListWithoutParensValue(node);
        if(node.getSimpelCondition() != null)
        {
            node.getSimpelCondition().apply(this);
        }
        outASimpelConditionParamCallListWithoutParensValue(node);
    }

    public void inAExcelWorkbookParamCallListWithoutParensValue(AExcelWorkbookParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outAExcelWorkbookParamCallListWithoutParensValue(AExcelWorkbookParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelWorkbookParamCallListWithoutParensValue(AExcelWorkbookParamCallListWithoutParensValue node)
    {
        inAExcelWorkbookParamCallListWithoutParensValue(node);
        if(node.getExcelWorkbook() != null)
        {
            node.getExcelWorkbook().apply(this);
        }
        outAExcelWorkbookParamCallListWithoutParensValue(node);
    }

    public void inAParamWithParamNameParamCallListWithoutParensValue(AParamWithParamNameParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outAParamWithParamNameParamCallListWithoutParensValue(AParamWithParamNameParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamWithParamNameParamCallListWithoutParensValue(AParamWithParamNameParamCallListWithoutParensValue node)
    {
        inAParamWithParamNameParamCallListWithoutParensValue(node);
        if(node.getParamWithParamName() != null)
        {
            node.getParamWithParamName().apply(this);
        }
        outAParamWithParamNameParamCallListWithoutParensValue(node);
    }

    public void inAShortIfStmtParamCallListWithoutParensValue(AShortIfStmtParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtParamCallListWithoutParensValue(AShortIfStmtParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtParamCallListWithoutParensValue(AShortIfStmtParamCallListWithoutParensValue node)
    {
        inAShortIfStmtParamCallListWithoutParensValue(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtParamCallListWithoutParensValue(node);
    }

    public void inAMethodChainingParamCallListWithoutParensValue(AMethodChainingParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingParamCallListWithoutParensValue(AMethodChainingParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingParamCallListWithoutParensValue(AMethodChainingParamCallListWithoutParensValue node)
    {
        inAMethodChainingParamCallListWithoutParensValue(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingParamCallListWithoutParensValue(node);
    }

    public void inACharacterStringParamCallListWithoutParensValue(ACharacterStringParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outACharacterStringParamCallListWithoutParensValue(ACharacterStringParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterStringParamCallListWithoutParensValue(ACharacterStringParamCallListWithoutParensValue node)
    {
        inACharacterStringParamCallListWithoutParensValue(node);
        if(node.getCharacterString() != null)
        {
            node.getCharacterString().apply(this);
        }
        outACharacterStringParamCallListWithoutParensValue(node);
    }

    public void inAArithmeticExpressionParamCallListWithoutParensValue(AArithmeticExpressionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionParamCallListWithoutParensValue(AArithmeticExpressionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionParamCallListWithoutParensValue(AArithmeticExpressionParamCallListWithoutParensValue node)
    {
        inAArithmeticExpressionParamCallListWithoutParensValue(node);
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        outAArithmeticExpressionParamCallListWithoutParensValue(node);
    }

    public void inAMethodParamCallListWithoutParensValue(AMethodParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outAMethodParamCallListWithoutParensValue(AMethodParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodParamCallListWithoutParensValue(AMethodParamCallListWithoutParensValue node)
    {
        inAMethodParamCallListWithoutParensValue(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodParamCallListWithoutParensValue(node);
    }

    public void inATrueParamCallListWithoutParensValue(ATrueParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outATrueParamCallListWithoutParensValue(ATrueParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueParamCallListWithoutParensValue(ATrueParamCallListWithoutParensValue node)
    {
        inATrueParamCallListWithoutParensValue(node);
        if(node.getBooleanValueTrue() != null)
        {
            node.getBooleanValueTrue().apply(this);
        }
        outATrueParamCallListWithoutParensValue(node);
    }

    public void inAFalseParamCallListWithoutParensValue(AFalseParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outAFalseParamCallListWithoutParensValue(AFalseParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseParamCallListWithoutParensValue(AFalseParamCallListWithoutParensValue node)
    {
        inAFalseParamCallListWithoutParensValue(node);
        if(node.getBooleanValueFalse() != null)
        {
            node.getBooleanValueFalse().apply(this);
        }
        outAFalseParamCallListWithoutParensValue(node);
    }

    public void inACStrFunctionParamCallListWithoutParensValue(ACStrFunctionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outACStrFunctionParamCallListWithoutParensValue(ACStrFunctionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStrFunctionParamCallListWithoutParensValue(ACStrFunctionParamCallListWithoutParensValue node)
    {
        inACStrFunctionParamCallListWithoutParensValue(node);
        if(node.getCStrFunction() != null)
        {
            node.getCStrFunction().apply(this);
        }
        outACStrFunctionParamCallListWithoutParensValue(node);
    }

    public void inACIntFunctionParamCallListWithoutParensValue(ACIntFunctionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outACIntFunctionParamCallListWithoutParensValue(ACIntFunctionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACIntFunctionParamCallListWithoutParensValue(ACIntFunctionParamCallListWithoutParensValue node)
    {
        inACIntFunctionParamCallListWithoutParensValue(node);
        if(node.getCIntFunction() != null)
        {
            node.getCIntFunction().apply(this);
        }
        outACIntFunctionParamCallListWithoutParensValue(node);
    }

    public void inAUCaseFunctionParamCallListWithoutParensValue(AUCaseFunctionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outAUCaseFunctionParamCallListWithoutParensValue(AUCaseFunctionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUCaseFunctionParamCallListWithoutParensValue(AUCaseFunctionParamCallListWithoutParensValue node)
    {
        inAUCaseFunctionParamCallListWithoutParensValue(node);
        if(node.getUCaseFunction() != null)
        {
            node.getUCaseFunction().apply(this);
        }
        outAUCaseFunctionParamCallListWithoutParensValue(node);
    }

    public void inALenFunctionParamCallListWithoutParensValue(ALenFunctionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outALenFunctionParamCallListWithoutParensValue(ALenFunctionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenFunctionParamCallListWithoutParensValue(ALenFunctionParamCallListWithoutParensValue node)
    {
        inALenFunctionParamCallListWithoutParensValue(node);
        if(node.getLenFunction() != null)
        {
            node.getLenFunction().apply(this);
        }
        outALenFunctionParamCallListWithoutParensValue(node);
    }

    public void inAMidFunctionParamCallListWithoutParensValue(AMidFunctionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionParamCallListWithoutParensValue(AMidFunctionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionParamCallListWithoutParensValue(AMidFunctionParamCallListWithoutParensValue node)
    {
        inAMidFunctionParamCallListWithoutParensValue(node);
        if(node.getMidFunction() != null)
        {
            node.getMidFunction().apply(this);
        }
        outAMidFunctionParamCallListWithoutParensValue(node);
    }

    public void inALeftFunctionParamCallListWithoutParensValue(ALeftFunctionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outALeftFunctionParamCallListWithoutParensValue(ALeftFunctionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftFunctionParamCallListWithoutParensValue(ALeftFunctionParamCallListWithoutParensValue node)
    {
        inALeftFunctionParamCallListWithoutParensValue(node);
        if(node.getLeftFunction() != null)
        {
            node.getLeftFunction().apply(this);
        }
        outALeftFunctionParamCallListWithoutParensValue(node);
    }

    public void inARightFunctionParamCallListWithoutParensValue(ARightFunctionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outARightFunctionParamCallListWithoutParensValue(ARightFunctionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightFunctionParamCallListWithoutParensValue(ARightFunctionParamCallListWithoutParensValue node)
    {
        inARightFunctionParamCallListWithoutParensValue(node);
        if(node.getRightFunction() != null)
        {
            node.getRightFunction().apply(this);
        }
        outARightFunctionParamCallListWithoutParensValue(node);
    }

    public void inATrimFunctionParamCallListWithoutParensValue(ATrimFunctionParamCallListWithoutParensValue node)
    {
        defaultIn(node);
    }

    public void outATrimFunctionParamCallListWithoutParensValue(ATrimFunctionParamCallListWithoutParensValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrimFunctionParamCallListWithoutParensValue(ATrimFunctionParamCallListWithoutParensValue node)
    {
        inATrimFunctionParamCallListWithoutParensValue(node);
        if(node.getTrimFunction() != null)
        {
            node.getTrimFunction().apply(this);
        }
        outATrimFunctionParamCallListWithoutParensValue(node);
    }

    public void inAParamWithParamName(AParamWithParamName node)
    {
        defaultIn(node);
    }

    public void outAParamWithParamName(AParamWithParamName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamWithParamName(AParamWithParamName node)
    {
        inAParamWithParamName(node);
        if(node.getGotoId() != null)
        {
            node.getGotoId().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAParamWithParamName(node);
    }

    public void inADllFunction(ADllFunction node)
    {
        defaultIn(node);
    }

    public void outADllFunction(ADllFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADllFunction(ADllFunction node)
    {
        inADllFunction(node);
        {
            List<PModifier> copy = new ArrayList<PModifier>(node.getModifier());
            for(PModifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFunctionStart() != null)
        {
            node.getFunctionStart().apply(this);
        }
        if(node.getDllFunctionToken() != null)
        {
            node.getDllFunctionToken().apply(this);
        }
        outADllFunction(node);
    }

    public void inADllFunctionCall(ADllFunctionCall node)
    {
        defaultIn(node);
    }

    public void outADllFunctionCall(ADllFunctionCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADllFunctionCall(ADllFunctionCall node)
    {
        inADllFunctionCall(node);
        if(node.getComment() != null)
        {
            node.getComment().apply(this);
        }
        if(node.getDllFunctionCallToken() != null)
        {
            node.getDllFunctionCallToken().apply(this);
        }
        outADllFunctionCall(node);
    }

    public void inAWaitSub(AWaitSub node)
    {
        defaultIn(node);
    }

    public void outAWaitSub(AWaitSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWaitSub(AWaitSub node)
    {
        inAWaitSub(node);
        if(node.getSubStart() != null)
        {
            node.getSubStart().apply(this);
        }
        if(node.getWait() != null)
        {
            node.getWait().apply(this);
        }
        if(node.getParamList() != null)
        {
            node.getParamList().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSubEnd() != null)
        {
            node.getSubEnd().apply(this);
        }
        outAWaitSub(node);
    }

    public void inAWaitSubCall(AWaitSubCall node)
    {
        defaultIn(node);
    }

    public void outAWaitSubCall(AWaitSubCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWaitSubCall(AWaitSubCall node)
    {
        inAWaitSubCall(node);
        if(node.getWait() != null)
        {
            node.getWait().apply(this);
        }
        if(node.getDuration() != null)
        {
            node.getDuration().apply(this);
        }
        outAWaitSubCall(node);
    }

    public void inACStrFunction(ACStrFunction node)
    {
        defaultIn(node);
    }

    public void outACStrFunction(ACStrFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStrFunction(ACStrFunction node)
    {
        inACStrFunction(node);
        if(node.getCStr() != null)
        {
            node.getCStr().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outACStrFunction(node);
    }

    public void inACIntFunction(ACIntFunction node)
    {
        defaultIn(node);
    }

    public void outACIntFunction(ACIntFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACIntFunction(ACIntFunction node)
    {
        inACIntFunction(node);
        if(node.getCInt() != null)
        {
            node.getCInt().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outACIntFunction(node);
    }

    public void inAUCaseFunction(AUCaseFunction node)
    {
        defaultIn(node);
    }

    public void outAUCaseFunction(AUCaseFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUCaseFunction(AUCaseFunction node)
    {
        inAUCaseFunction(node);
        if(node.getUCase() != null)
        {
            node.getUCase().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAUCaseFunction(node);
    }

    public void inALenFunction(ALenFunction node)
    {
        defaultIn(node);
    }

    public void outALenFunction(ALenFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenFunction(ALenFunction node)
    {
        inALenFunction(node);
        if(node.getLen() != null)
        {
            node.getLen().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outALenFunction(node);
    }

    public void inAMidFunction(AMidFunction node)
    {
        defaultIn(node);
    }

    public void outAMidFunction(AMidFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunction(AMidFunction node)
    {
        inAMidFunction(node);
        if(node.getMid() != null)
        {
            node.getMid().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getBeginIndex() != null)
        {
            node.getBeginIndex().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAMidFunction(node);
    }

    public void inAMidFunctionTwoParam(AMidFunctionTwoParam node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionTwoParam(AMidFunctionTwoParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionTwoParam(AMidFunctionTwoParam node)
    {
        inAMidFunctionTwoParam(node);
        if(node.getMid() != null)
        {
            node.getMid().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getBeginIndex() != null)
        {
            node.getBeginIndex().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAMidFunctionTwoParam(node);
    }

    public void inALeftFunction(ALeftFunction node)
    {
        defaultIn(node);
    }

    public void outALeftFunction(ALeftFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftFunction(ALeftFunction node)
    {
        inALeftFunction(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outALeftFunction(node);
    }

    public void inARightFunction(ARightFunction node)
    {
        defaultIn(node);
    }

    public void outARightFunction(ARightFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightFunction(ARightFunction node)
    {
        inARightFunction(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outARightFunction(node);
    }

    public void inATrimFunction(ATrimFunction node)
    {
        defaultIn(node);
    }

    public void outATrimFunction(ATrimFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrimFunction(ATrimFunction node)
    {
        inATrimFunction(node);
        if(node.getTrim() != null)
        {
            node.getTrim().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outATrimFunction(node);
    }

    public void inAUBoundFunction(AUBoundFunction node)
    {
        defaultIn(node);
    }

    public void outAUBoundFunction(AUBoundFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUBoundFunction(AUBoundFunction node)
    {
        inAUBoundFunction(node);
        if(node.getUBound() != null)
        {
            node.getUBound().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAUBoundFunction(node);
    }

    public void inALBoundFunction(ALBoundFunction node)
    {
        defaultIn(node);
    }

    public void outALBoundFunction(ALBoundFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALBoundFunction(ALBoundFunction node)
    {
        inALBoundFunction(node);
        if(node.getLBound() != null)
        {
            node.getLBound().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outALBoundFunction(node);
    }

    public void inACLngFunction(ACLngFunction node)
    {
        defaultIn(node);
    }

    public void outACLngFunction(ACLngFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACLngFunction(ACLngFunction node)
    {
        inACLngFunction(node);
        if(node.getCLng() != null)
        {
            node.getCLng().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outACLngFunction(node);
    }

    public void inACDblFunction(ACDblFunction node)
    {
        defaultIn(node);
    }

    public void outACDblFunction(ACDblFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACDblFunction(ACDblFunction node)
    {
        inACDblFunction(node);
        if(node.getCDbl() != null)
        {
            node.getCDbl().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getStringValue() != null)
        {
            node.getStringValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outACDblFunction(node);
    }

    public void inACSngFunction(ACSngFunction node)
    {
        defaultIn(node);
    }

    public void outACSngFunction(ACSngFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACSngFunction(ACSngFunction node)
    {
        inACSngFunction(node);
        if(node.getCSng() != null)
        {
            node.getCSng().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getStringValue() != null)
        {
            node.getStringValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outACSngFunction(node);
    }

    public void inARTrimFunction(ARTrimFunction node)
    {
        defaultIn(node);
    }

    public void outARTrimFunction(ARTrimFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARTrimFunction(ARTrimFunction node)
    {
        inARTrimFunction(node);
        if(node.getRTrim() != null)
        {
            node.getRTrim().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getStringValue() != null)
        {
            node.getStringValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outARTrimFunction(node);
    }

    public void inALTrimFunction(ALTrimFunction node)
    {
        defaultIn(node);
    }

    public void outALTrimFunction(ALTrimFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALTrimFunction(ALTrimFunction node)
    {
        inALTrimFunction(node);
        if(node.getLTrim() != null)
        {
            node.getLTrim().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getStringValue() != null)
        {
            node.getStringValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outALTrimFunction(node);
    }

    public void inALCaseFunction(ALCaseFunction node)
    {
        defaultIn(node);
    }

    public void outALCaseFunction(ALCaseFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALCaseFunction(ALCaseFunction node)
    {
        inALCaseFunction(node);
        if(node.getLCase() != null)
        {
            node.getLCase().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getStringValue() != null)
        {
            node.getStringValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outALCaseFunction(node);
    }

    public void inASplitFunction(ASplitFunction node)
    {
        defaultIn(node);
    }

    public void outASplitFunction(ASplitFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASplitFunction(ASplitFunction node)
    {
        inASplitFunction(node);
        if(node.getSplit() != null)
        {
            node.getSplit().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDelimiter() != null)
        {
            node.getDelimiter().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outASplitFunction(node);
    }

    public void inASplitFunctionWithLimit(ASplitFunctionWithLimit node)
    {
        defaultIn(node);
    }

    public void outASplitFunctionWithLimit(ASplitFunctionWithLimit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASplitFunctionWithLimit(ASplitFunctionWithLimit node)
    {
        inASplitFunctionWithLimit(node);
        if(node.getSplit() != null)
        {
            node.getSplit().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getDelimiter() != null)
        {
            node.getDelimiter().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getLimit() != null)
        {
            node.getLimit().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outASplitFunctionWithLimit(node);
    }

    public void inAFormatFunction(AFormatFunction node)
    {
        defaultIn(node);
    }

    public void outAFormatFunction(AFormatFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormatFunction(AFormatFunction node)
    {
        inAFormatFunction(node);
        if(node.getFormat() != null)
        {
            node.getFormat().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getNowFunction() != null)
        {
            node.getNowFunction().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFormatValue() != null)
        {
            node.getFormatValue().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAFormatFunction(node);
    }

    public void inASpaceFunction(ASpaceFunction node)
    {
        defaultIn(node);
    }

    public void outASpaceFunction(ASpaceFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpaceFunction(ASpaceFunction node)
    {
        inASpaceFunction(node);
        if(node.getSpace() != null)
        {
            node.getSpace().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outASpaceFunction(node);
    }

    public void inAChrFunction(AChrFunction node)
    {
        defaultIn(node);
    }

    public void outAChrFunction(AChrFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChrFunction(AChrFunction node)
    {
        inAChrFunction(node);
        if(node.getChr() != null)
        {
            node.getChr().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAChrFunction(node);
    }

    public void inANowFunction(ANowFunction node)
    {
        defaultIn(node);
    }

    public void outANowFunction(ANowFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANowFunction(ANowFunction node)
    {
        inANowFunction(node);
        if(node.getNow() != null)
        {
            node.getNow().apply(this);
        }
        outANowFunction(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEndIf() != null)
        {
            node.getEndIf().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAIfStmtOneLine(AIfStmtOneLine node)
    {
        defaultIn(node);
    }

    public void outAIfStmtOneLine(AIfStmtOneLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtOneLine(AIfStmtOneLine node)
    {
        inAIfStmtOneLine(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            List<PIfStmtOneLineValue> copy = new ArrayList<PIfStmtOneLineValue>(node.getIfStmtOneLineValue());
            for(PIfStmtOneLineValue e : copy)
            {
                e.apply(this);
            }
        }
        outAIfStmtOneLine(node);
    }

    public void inAExitForIfStmtOneLineValue(AExitForIfStmtOneLineValue node)
    {
        defaultIn(node);
    }

    public void outAExitForIfStmtOneLineValue(AExitForIfStmtOneLineValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExitForIfStmtOneLineValue(AExitForIfStmtOneLineValue node)
    {
        inAExitForIfStmtOneLineValue(node);
        if(node.getExitFor() != null)
        {
            node.getExitFor().apply(this);
        }
        outAExitForIfStmtOneLineValue(node);
    }

    public void inAMethodChainingIfStmtOneLineValue(AMethodChainingIfStmtOneLineValue node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingIfStmtOneLineValue(AMethodChainingIfStmtOneLineValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingIfStmtOneLineValue(AMethodChainingIfStmtOneLineValue node)
    {
        inAMethodChainingIfStmtOneLineValue(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingIfStmtOneLineValue(node);
    }

    public void inAVarSetIfStmtOneLineValue(AVarSetIfStmtOneLineValue node)
    {
        defaultIn(node);
    }

    public void outAVarSetIfStmtOneLineValue(AVarSetIfStmtOneLineValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSetIfStmtOneLineValue(AVarSetIfStmtOneLineValue node)
    {
        inAVarSetIfStmtOneLineValue(node);
        if(node.getVarSet() != null)
        {
            node.getVarSet().apply(this);
        }
        outAVarSetIfStmtOneLineValue(node);
    }

    public void inAElseStmtIfStmtOneLineValue(AElseStmtIfStmtOneLineValue node)
    {
        defaultIn(node);
    }

    public void outAElseStmtIfStmtOneLineValue(AElseStmtIfStmtOneLineValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStmtIfStmtOneLineValue(AElseStmtIfStmtOneLineValue node)
    {
        inAElseStmtIfStmtOneLineValue(node);
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAElseStmtIfStmtOneLineValue(node);
    }

    public void inAAutoFitFunctionIfStmtOneLineValue(AAutoFitFunctionIfStmtOneLineValue node)
    {
        defaultIn(node);
    }

    public void outAAutoFitFunctionIfStmtOneLineValue(AAutoFitFunctionIfStmtOneLineValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAutoFitFunctionIfStmtOneLineValue(AAutoFitFunctionIfStmtOneLineValue node)
    {
        inAAutoFitFunctionIfStmtOneLineValue(node);
        if(node.getAutoFitFunction() != null)
        {
            node.getAutoFitFunction().apply(this);
        }
        outAAutoFitFunctionIfStmtOneLineValue(node);
    }

    public void inAMethodCallIfStmtOneLineValue(AMethodCallIfStmtOneLineValue node)
    {
        defaultIn(node);
    }

    public void outAMethodCallIfStmtOneLineValue(AMethodCallIfStmtOneLineValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallIfStmtOneLineValue(AMethodCallIfStmtOneLineValue node)
    {
        inAMethodCallIfStmtOneLineValue(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodCallIfStmtOneLineValue(node);
    }

    public void inAElseIfStm(AElseIfStm node)
    {
        defaultIn(node);
    }

    public void outAElseIfStm(AElseIfStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseIfStm(AElseIfStm node)
    {
        inAElseIfStm(node);
        if(node.getElseIf() != null)
        {
            node.getElseIf().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        outAElseIfStm(node);
    }

    public void inAElseStmt(AElseStmt node)
    {
        defaultIn(node);
    }

    public void outAElseStmt(AElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStmt(AElseStmt node)
    {
        inAElseStmt(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseStmt(node);
    }

    public void inAShortIfStmt(AShortIfStmt node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmt(AShortIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmt(AShortIfStmt node)
    {
        inAShortIfStmt(node);
        if(node.getShortIf() != null)
        {
            node.getShortIf().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAShortIfStmt(node);
    }

    public void inASelectStmt(ASelectStmt node)
    {
        defaultIn(node);
    }

    public void outASelectStmt(ASelectStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectStmt(ASelectStmt node)
    {
        inASelectStmt(node);
        if(node.getSelectStart() != null)
        {
            node.getSelectStart().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PSelectCaseStmt> copy = new ArrayList<PSelectCaseStmt>(node.getSelectCaseStmt());
            for(PSelectCaseStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSelectEnd() != null)
        {
            node.getSelectEnd().apply(this);
        }
        outASelectStmt(node);
    }

    public void inADefaultSelectCaseStmt(ADefaultSelectCaseStmt node)
    {
        defaultIn(node);
    }

    public void outADefaultSelectCaseStmt(ADefaultSelectCaseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultSelectCaseStmt(ADefaultSelectCaseStmt node)
    {
        inADefaultSelectCaseStmt(node);
        if(node.getSelectCase() != null)
        {
            node.getSelectCase().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        outADefaultSelectCaseStmt(node);
    }

    public void inAValuesSelectCaseStmt(AValuesSelectCaseStmt node)
    {
        defaultIn(node);
    }

    public void outAValuesSelectCaseStmt(AValuesSelectCaseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValuesSelectCaseStmt(AValuesSelectCaseStmt node)
    {
        inAValuesSelectCaseStmt(node);
        if(node.getSelectCase() != null)
        {
            node.getSelectCase().apply(this);
        }
        if(node.getParamCallListWithoutParens() != null)
        {
            node.getParamCallListWithoutParens().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAValuesSelectCaseStmt(node);
    }

    public void inAConditionInParens(AConditionInParens node)
    {
        defaultIn(node);
    }

    public void outAConditionInParens(AConditionInParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionInParens(AConditionInParens node)
    {
        inAConditionInParens(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAConditionInParens(node);
    }

    public void inACondition(ACondition node)
    {
        defaultIn(node);
    }

    public void outACondition(ACondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondition(ACondition node)
    {
        inACondition(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            List<PLogicalPart> copy = new ArrayList<PLogicalPart>(node.getLogicalPart());
            for(PLogicalPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLogicalValue() != null)
        {
            node.getLogicalValue().apply(this);
        }
        outACondition(node);
    }

    public void inANotCondition(ANotCondition node)
    {
        defaultIn(node);
    }

    public void outANotCondition(ANotCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotCondition(ANotCondition node)
    {
        inANotCondition(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            List<PLogicalPart> copy = new ArrayList<PLogicalPart>(node.getLogicalPart());
            for(PLogicalPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLogicalValue() != null)
        {
            node.getLogicalValue().apply(this);
        }
        outANotCondition(node);
    }

    public void inAComparisonCondition(AComparisonCondition node)
    {
        defaultIn(node);
    }

    public void outAComparisonCondition(AComparisonCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisonCondition(AComparisonCondition node)
    {
        inAComparisonCondition(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAComparisonCondition(node);
    }

    public void inAConditionInParensCondition(AConditionInParensCondition node)
    {
        defaultIn(node);
    }

    public void outAConditionInParensCondition(AConditionInParensCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionInParensCondition(AConditionInParensCondition node)
    {
        inAConditionInParensCondition(node);
        if(node.getConditionInParens() != null)
        {
            node.getConditionInParens().apply(this);
        }
        outAConditionInParensCondition(node);
    }

    public void inANotValueCondition(ANotValueCondition node)
    {
        defaultIn(node);
    }

    public void outANotValueCondition(ANotValueCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotValueCondition(ANotValueCondition node)
    {
        inANotValueCondition(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getLogicalValue() != null)
        {
            node.getLogicalValue().apply(this);
        }
        outANotValueCondition(node);
    }

    public void inAAndLogicalPart(AAndLogicalPart node)
    {
        defaultIn(node);
    }

    public void outAAndLogicalPart(AAndLogicalPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndLogicalPart(AAndLogicalPart node)
    {
        inAAndLogicalPart(node);
        if(node.getLogicalValue() != null)
        {
            node.getLogicalValue().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndLogicalPart(node);
    }

    public void inAOrLogicalPart(AOrLogicalPart node)
    {
        defaultIn(node);
    }

    public void outAOrLogicalPart(AOrLogicalPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrLogicalPart(AOrLogicalPart node)
    {
        inAOrLogicalPart(node);
        if(node.getLogicalValue() != null)
        {
            node.getLogicalValue().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrLogicalPart(node);
    }

    public void inAAndNotLogicalPart(AAndNotLogicalPart node)
    {
        defaultIn(node);
    }

    public void outAAndNotLogicalPart(AAndNotLogicalPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndNotLogicalPart(AAndNotLogicalPart node)
    {
        inAAndNotLogicalPart(node);
        if(node.getLogicalValue() != null)
        {
            node.getLogicalValue().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outAAndNotLogicalPart(node);
    }

    public void inAOrNotLogicalPart(AOrNotLogicalPart node)
    {
        defaultIn(node);
    }

    public void outAOrNotLogicalPart(AOrNotLogicalPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrNotLogicalPart(AOrNotLogicalPart node)
    {
        inAOrNotLogicalPart(node);
        if(node.getLogicalValue() != null)
        {
            node.getLogicalValue().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outAOrNotLogicalPart(node);
    }

    public void inAConditionInParensLogicalValue(AConditionInParensLogicalValue node)
    {
        defaultIn(node);
    }

    public void outAConditionInParensLogicalValue(AConditionInParensLogicalValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionInParensLogicalValue(AConditionInParensLogicalValue node)
    {
        inAConditionInParensLogicalValue(node);
        if(node.getConditionInParens() != null)
        {
            node.getConditionInParens().apply(this);
        }
        outAConditionInParensLogicalValue(node);
    }

    public void inAComparisonLogicalValue(AComparisonLogicalValue node)
    {
        defaultIn(node);
    }

    public void outAComparisonLogicalValue(AComparisonLogicalValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisonLogicalValue(AComparisonLogicalValue node)
    {
        inAComparisonLogicalValue(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAComparisonLogicalValue(node);
    }

    public void inAValueLogicalValue(AValueLogicalValue node)
    {
        defaultIn(node);
    }

    public void outAValueLogicalValue(AValueLogicalValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueLogicalValue(AValueLogicalValue node)
    {
        inAValueLogicalValue(node);
        if(node.getBooleanValue() != null)
        {
            node.getBooleanValue().apply(this);
        }
        outAValueLogicalValue(node);
    }

    public void inANumberLogicalValue(ANumberLogicalValue node)
    {
        defaultIn(node);
    }

    public void outANumberLogicalValue(ANumberLogicalValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberLogicalValue(ANumberLogicalValue node)
    {
        inANumberLogicalValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberLogicalValue(node);
    }

    public void inAComparison(AComparison node)
    {
        defaultIn(node);
    }

    public void outAComparison(AComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparison(AComparison node)
    {
        inAComparison(node);
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getLogicalOperator() != null)
        {
            node.getLogicalOperator().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        outAComparison(node);
    }

    public void inALofFunctionComparisonValue(ALofFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outALofFunctionComparisonValue(ALofFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALofFunctionComparisonValue(ALofFunctionComparisonValue node)
    {
        inALofFunctionComparisonValue(node);
        if(node.getLofFunction() != null)
        {
            node.getLofFunction().apply(this);
        }
        outALofFunctionComparisonValue(node);
    }

    public void inAConditionInParensComparisonValue(AConditionInParensComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAConditionInParensComparisonValue(AConditionInParensComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionInParensComparisonValue(AConditionInParensComparisonValue node)
    {
        inAConditionInParensComparisonValue(node);
        if(node.getConditionInParens() != null)
        {
            node.getConditionInParens().apply(this);
        }
        outAConditionInParensComparisonValue(node);
    }

    public void inAGetNameExcelFunctionComparisonValue(AGetNameExcelFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAGetNameExcelFunctionComparisonValue(AGetNameExcelFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGetNameExcelFunctionComparisonValue(AGetNameExcelFunctionComparisonValue node)
    {
        inAGetNameExcelFunctionComparisonValue(node);
        if(node.getGetNameExcelFunction() != null)
        {
            node.getGetNameExcelFunction().apply(this);
        }
        outAGetNameExcelFunctionComparisonValue(node);
    }

    public void inAMsgBoxFunctionComparisonValue(AMsgBoxFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAMsgBoxFunctionComparisonValue(AMsgBoxFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMsgBoxFunctionComparisonValue(AMsgBoxFunctionComparisonValue node)
    {
        inAMsgBoxFunctionComparisonValue(node);
        if(node.getMsgBoxFunction() != null)
        {
            node.getMsgBoxFunction().apply(this);
        }
        outAMsgBoxFunctionComparisonValue(node);
    }

    public void inAExcelCellComparisonValue(AExcelCellComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAExcelCellComparisonValue(AExcelCellComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelCellComparisonValue(AExcelCellComparisonValue node)
    {
        inAExcelCellComparisonValue(node);
        if(node.getExcelCell() != null)
        {
            node.getExcelCell().apply(this);
        }
        outAExcelCellComparisonValue(node);
    }

    public void inAMethodChainingComparisonValue(AMethodChainingComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingComparisonValue(AMethodChainingComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingComparisonValue(AMethodChainingComparisonValue node)
    {
        inAMethodChainingComparisonValue(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        outAMethodChainingComparisonValue(node);
    }

    public void inAShortIfStmtComparisonValue(AShortIfStmtComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtComparisonValue(AShortIfStmtComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtComparisonValue(AShortIfStmtComparisonValue node)
    {
        inAShortIfStmtComparisonValue(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtComparisonValue(node);
    }

    public void inACharacterStringComparisonValue(ACharacterStringComparisonValue node)
    {
        defaultIn(node);
    }

    public void outACharacterStringComparisonValue(ACharacterStringComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterStringComparisonValue(ACharacterStringComparisonValue node)
    {
        inACharacterStringComparisonValue(node);
        if(node.getCharacterString() != null)
        {
            node.getCharacterString().apply(this);
        }
        outACharacterStringComparisonValue(node);
    }

    public void inACharacterStringInParanesComparisonValue(ACharacterStringInParanesComparisonValue node)
    {
        defaultIn(node);
    }

    public void outACharacterStringInParanesComparisonValue(ACharacterStringInParanesComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterStringInParanesComparisonValue(ACharacterStringInParanesComparisonValue node)
    {
        inACharacterStringInParanesComparisonValue(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getCharacterString() != null)
        {
            node.getCharacterString().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outACharacterStringInParanesComparisonValue(node);
    }

    public void inAMethodComparisonValue(AMethodComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAMethodComparisonValue(AMethodComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodComparisonValue(AMethodComparisonValue node)
    {
        inAMethodComparisonValue(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAMethodComparisonValue(node);
    }

    public void inAMethodCallInParensComparisonValue(AMethodCallInParensComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAMethodCallInParensComparisonValue(AMethodCallInParensComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallInParensComparisonValue(AMethodCallInParensComparisonValue node)
    {
        inAMethodCallInParensComparisonValue(node);
        if(node.getMethodCallInParens() != null)
        {
            node.getMethodCallInParens().apply(this);
        }
        outAMethodCallInParensComparisonValue(node);
    }

    public void inACStrFunctionComparisonValue(ACStrFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outACStrFunctionComparisonValue(ACStrFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACStrFunctionComparisonValue(ACStrFunctionComparisonValue node)
    {
        inACStrFunctionComparisonValue(node);
        if(node.getCStrFunction() != null)
        {
            node.getCStrFunction().apply(this);
        }
        outACStrFunctionComparisonValue(node);
    }

    public void inAUCaseFunctionComparisonValue(AUCaseFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAUCaseFunctionComparisonValue(AUCaseFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUCaseFunctionComparisonValue(AUCaseFunctionComparisonValue node)
    {
        inAUCaseFunctionComparisonValue(node);
        if(node.getUCaseFunction() != null)
        {
            node.getUCaseFunction().apply(this);
        }
        outAUCaseFunctionComparisonValue(node);
    }

    public void inALCaseFunctionComparisonValue(ALCaseFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outALCaseFunctionComparisonValue(ALCaseFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALCaseFunctionComparisonValue(ALCaseFunctionComparisonValue node)
    {
        inALCaseFunctionComparisonValue(node);
        if(node.getLCaseFunction() != null)
        {
            node.getLCaseFunction().apply(this);
        }
        outALCaseFunctionComparisonValue(node);
    }

    public void inAMidFunctionComparisonValue(AMidFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionComparisonValue(AMidFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionComparisonValue(AMidFunctionComparisonValue node)
    {
        inAMidFunctionComparisonValue(node);
        if(node.getMidFunction() != null)
        {
            node.getMidFunction().apply(this);
        }
        outAMidFunctionComparisonValue(node);
    }

    public void inAMidFunctionTwoParamComparisonValue(AMidFunctionTwoParamComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAMidFunctionTwoParamComparisonValue(AMidFunctionTwoParamComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidFunctionTwoParamComparisonValue(AMidFunctionTwoParamComparisonValue node)
    {
        inAMidFunctionTwoParamComparisonValue(node);
        if(node.getMidFunctionTwoParam() != null)
        {
            node.getMidFunctionTwoParam().apply(this);
        }
        outAMidFunctionTwoParamComparisonValue(node);
    }

    public void inALeftFunctionComparisonValue(ALeftFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outALeftFunctionComparisonValue(ALeftFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftFunctionComparisonValue(ALeftFunctionComparisonValue node)
    {
        inALeftFunctionComparisonValue(node);
        if(node.getLeftFunction() != null)
        {
            node.getLeftFunction().apply(this);
        }
        outALeftFunctionComparisonValue(node);
    }

    public void inARightFunctionComparisonValue(ARightFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outARightFunctionComparisonValue(ARightFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightFunctionComparisonValue(ARightFunctionComparisonValue node)
    {
        inARightFunctionComparisonValue(node);
        if(node.getRightFunction() != null)
        {
            node.getRightFunction().apply(this);
        }
        outARightFunctionComparisonValue(node);
    }

    public void inATrimFunctionComparisonValue(ATrimFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outATrimFunctionComparisonValue(ATrimFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrimFunctionComparisonValue(ATrimFunctionComparisonValue node)
    {
        inATrimFunctionComparisonValue(node);
        if(node.getTrimFunction() != null)
        {
            node.getTrimFunction().apply(this);
        }
        outATrimFunctionComparisonValue(node);
    }

    public void inAArithmeticExpressionComparisonValue(AArithmeticExpressionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionComparisonValue(AArithmeticExpressionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionComparisonValue(AArithmeticExpressionComparisonValue node)
    {
        inAArithmeticExpressionComparisonValue(node);
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        outAArithmeticExpressionComparisonValue(node);
    }

    public void inAArithmeticExpressionInParensComparisonValue(AArithmeticExpressionInParensComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionInParensComparisonValue(AArithmeticExpressionInParensComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticExpressionInParensComparisonValue(AArithmeticExpressionInParensComparisonValue node)
    {
        inAArithmeticExpressionInParensComparisonValue(node);
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAArithmeticExpressionInParensComparisonValue(node);
    }

    public void inATrueComparisonValue(ATrueComparisonValue node)
    {
        defaultIn(node);
    }

    public void outATrueComparisonValue(ATrueComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueComparisonValue(ATrueComparisonValue node)
    {
        inATrueComparisonValue(node);
        if(node.getBooleanValueTrue() != null)
        {
            node.getBooleanValueTrue().apply(this);
        }
        outATrueComparisonValue(node);
    }

    public void inAFalseComparisonValue(AFalseComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAFalseComparisonValue(AFalseComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseComparisonValue(AFalseComparisonValue node)
    {
        inAFalseComparisonValue(node);
        if(node.getBooleanValueFalse() != null)
        {
            node.getBooleanValueFalse().apply(this);
        }
        outAFalseComparisonValue(node);
    }

    public void inACIntFunctionComparisonValue(ACIntFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outACIntFunctionComparisonValue(ACIntFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACIntFunctionComparisonValue(ACIntFunctionComparisonValue node)
    {
        inACIntFunctionComparisonValue(node);
        if(node.getCIntFunction() != null)
        {
            node.getCIntFunction().apply(this);
        }
        outACIntFunctionComparisonValue(node);
    }

    public void inALenFunctionComparisonValue(ALenFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outALenFunctionComparisonValue(ALenFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenFunctionComparisonValue(ALenFunctionComparisonValue node)
    {
        inALenFunctionComparisonValue(node);
        if(node.getLenFunction() != null)
        {
            node.getLenFunction().apply(this);
        }
        outALenFunctionComparisonValue(node);
    }

    public void inAUBoundFunctionComparisonValue(AUBoundFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outAUBoundFunctionComparisonValue(AUBoundFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUBoundFunctionComparisonValue(AUBoundFunctionComparisonValue node)
    {
        inAUBoundFunctionComparisonValue(node);
        if(node.getUBoundFunction() != null)
        {
            node.getUBoundFunction().apply(this);
        }
        outAUBoundFunctionComparisonValue(node);
    }

    public void inALBoundFunctionComparisonValue(ALBoundFunctionComparisonValue node)
    {
        defaultIn(node);
    }

    public void outALBoundFunctionComparisonValue(ALBoundFunctionComparisonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALBoundFunctionComparisonValue(ALBoundFunctionComparisonValue node)
    {
        inALBoundFunctionComparisonValue(node);
        if(node.getLBoundFunction() != null)
        {
            node.getLBoundFunction().apply(this);
        }
        outALBoundFunctionComparisonValue(node);
    }

    public void inASimpelCondition(ASimpelCondition node)
    {
        defaultIn(node);
    }

    public void outASimpelCondition(ASimpelCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpelCondition(ASimpelCondition node)
    {
        inASimpelCondition(node);
        {
            List<PSimpelConditionPart> copy = new ArrayList<PSimpelConditionPart>(node.getSimpelConditionPart());
            for(PSimpelConditionPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSimpelConditionValue() != null)
        {
            node.getSimpelConditionValue().apply(this);
        }
        outASimpelCondition(node);
    }

    public void inAOrSimpelConditionPart(AOrSimpelConditionPart node)
    {
        defaultIn(node);
    }

    public void outAOrSimpelConditionPart(AOrSimpelConditionPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrSimpelConditionPart(AOrSimpelConditionPart node)
    {
        inAOrSimpelConditionPart(node);
        if(node.getSimpelConditionValue() != null)
        {
            node.getSimpelConditionValue().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrSimpelConditionPart(node);
    }

    public void inAIdSimpelConditionValue(AIdSimpelConditionValue node)
    {
        defaultIn(node);
    }

    public void outAIdSimpelConditionValue(AIdSimpelConditionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdSimpelConditionValue(AIdSimpelConditionValue node)
    {
        inAIdSimpelConditionValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdSimpelConditionValue(node);
    }

    public void inAShortIfStmtSimpelConditionValue(AShortIfStmtSimpelConditionValue node)
    {
        defaultIn(node);
    }

    public void outAShortIfStmtSimpelConditionValue(AShortIfStmtSimpelConditionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortIfStmtSimpelConditionValue(AShortIfStmtSimpelConditionValue node)
    {
        inAShortIfStmtSimpelConditionValue(node);
        if(node.getShortIfStmt() != null)
        {
            node.getShortIfStmt().apply(this);
        }
        outAShortIfStmtSimpelConditionValue(node);
    }

    public void inANotIdSimpelConditionValue(ANotIdSimpelConditionValue node)
    {
        defaultIn(node);
    }

    public void outANotIdSimpelConditionValue(ANotIdSimpelConditionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotIdSimpelConditionValue(ANotIdSimpelConditionValue node)
    {
        inANotIdSimpelConditionValue(node);
        if(node.getNotId() != null)
        {
            node.getNotId().apply(this);
        }
        outANotIdSimpelConditionValue(node);
    }

    public void inAForEachStmt(AForEachStmt node)
    {
        defaultIn(node);
    }

    public void outAForEachStmt(AForEachStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForEachStmt(AForEachStmt node)
    {
        inAForEachStmt(node);
        if(node.getForStart() != null)
        {
            node.getForStart().apply(this);
        }
        if(node.getEachStart() != null)
        {
            node.getEachStart().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getForEnd() != null)
        {
            node.getForEnd().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAForEachStmt(node);
    }

    public void inAForEachStmtOnlyNext(AForEachStmtOnlyNext node)
    {
        defaultIn(node);
    }

    public void outAForEachStmtOnlyNext(AForEachStmtOnlyNext node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForEachStmtOnlyNext(AForEachStmtOnlyNext node)
    {
        inAForEachStmtOnlyNext(node);
        if(node.getForStart() != null)
        {
            node.getForStart().apply(this);
        }
        if(node.getEachStart() != null)
        {
            node.getEachStart().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getForEnd() != null)
        {
            node.getForEnd().apply(this);
        }
        outAForEachStmtOnlyNext(node);
    }

    public void inAForStmt(AForStmt node)
    {
        defaultIn(node);
    }

    public void outAForStmt(AForStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmt(AForStmt node)
    {
        inAForStmt(node);
        if(node.getForStart() != null)
        {
            node.getForStart().apply(this);
        }
        if(node.getVarSet() != null)
        {
            node.getVarSet().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getLimit() != null)
        {
            node.getLimit().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getForEnd() != null)
        {
            node.getForEnd().apply(this);
        }
        if(node.getCounter() != null)
        {
            node.getCounter().apply(this);
        }
        outAForStmt(node);
    }

    public void inAForStmtStep(AForStmtStep node)
    {
        defaultIn(node);
    }

    public void outAForStmtStep(AForStmtStep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmtStep(AForStmtStep node)
    {
        inAForStmtStep(node);
        if(node.getForStart() != null)
        {
            node.getForStart().apply(this);
        }
        if(node.getVarSet() != null)
        {
            node.getVarSet().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getLimit() != null)
        {
            node.getLimit().apply(this);
        }
        if(node.getForStep() != null)
        {
            node.getForStep().apply(this);
        }
        if(node.getArithmeticExpression() != null)
        {
            node.getArithmeticExpression().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getForEnd() != null)
        {
            node.getForEnd().apply(this);
        }
        if(node.getCounter() != null)
        {
            node.getCounter().apply(this);
        }
        outAForStmtStep(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getWhileStart() != null)
        {
            node.getWhileStart().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getWhileEnd() != null)
        {
            node.getWhileEnd().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inADoWhile(ADoWhile node)
    {
        defaultIn(node);
    }

    public void outADoWhile(ADoWhile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoWhile(ADoWhile node)
    {
        inADoWhile(node);
        if(node.getDoWhileStart() != null)
        {
            node.getDoWhileStart().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getEndOfLine() != null)
        {
            node.getEndOfLine().apply(this);
        }
        {
            List<PFunctionStmt> copy = new ArrayList<PFunctionStmt>(node.getFunctionStmt());
            for(PFunctionStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoWhileEnd() != null)
        {
            node.getDoWhileEnd().apply(this);
        }
        outADoWhile(node);
    }

    public void inAOpenFileFunction(AOpenFileFunction node)
    {
        defaultIn(node);
    }

    public void outAOpenFileFunction(AOpenFileFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenFileFunction(AOpenFileFunction node)
    {
        inAOpenFileFunction(node);
        if(node.getOpenFile() != null)
        {
            node.getOpenFile().apply(this);
        }
        if(node.getFileName() != null)
        {
            node.getFileName().apply(this);
        }
        if(node.getForStart() != null)
        {
            node.getForStart().apply(this);
        }
        if(node.getOpenFileMode() != null)
        {
            node.getOpenFileMode().apply(this);
        }
        if(node.getFileNumber() != null)
        {
            node.getFileNumber().apply(this);
        }
        outAOpenFileFunction(node);
    }

    public void inAOpenFileAppendModeOpenFileMode(AOpenFileAppendModeOpenFileMode node)
    {
        defaultIn(node);
    }

    public void outAOpenFileAppendModeOpenFileMode(AOpenFileAppendModeOpenFileMode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenFileAppendModeOpenFileMode(AOpenFileAppendModeOpenFileMode node)
    {
        inAOpenFileAppendModeOpenFileMode(node);
        if(node.getOpenFileAppendMode() != null)
        {
            node.getOpenFileAppendMode().apply(this);
        }
        outAOpenFileAppendModeOpenFileMode(node);
    }

    public void inAOpenFileInputModeOpenFileMode(AOpenFileInputModeOpenFileMode node)
    {
        defaultIn(node);
    }

    public void outAOpenFileInputModeOpenFileMode(AOpenFileInputModeOpenFileMode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenFileInputModeOpenFileMode(AOpenFileInputModeOpenFileMode node)
    {
        inAOpenFileInputModeOpenFileMode(node);
        if(node.getOpenFileInputMode() != null)
        {
            node.getOpenFileInputMode().apply(this);
        }
        outAOpenFileInputModeOpenFileMode(node);
    }

    public void inAOpenFileOutputModeOpenFileMode(AOpenFileOutputModeOpenFileMode node)
    {
        defaultIn(node);
    }

    public void outAOpenFileOutputModeOpenFileMode(AOpenFileOutputModeOpenFileMode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenFileOutputModeOpenFileMode(AOpenFileOutputModeOpenFileMode node)
    {
        inAOpenFileOutputModeOpenFileMode(node);
        if(node.getOpenFileOutputMode() != null)
        {
            node.getOpenFileOutputMode().apply(this);
        }
        outAOpenFileOutputModeOpenFileMode(node);
    }

    public void inACloseFileFunction(ACloseFileFunction node)
    {
        defaultIn(node);
    }

    public void outACloseFileFunction(ACloseFileFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACloseFileFunction(ACloseFileFunction node)
    {
        inACloseFileFunction(node);
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getFileNumber() != null)
        {
            node.getFileNumber().apply(this);
        }
        outACloseFileFunction(node);
    }

    public void inAAPrintFunction(AAPrintFunction node)
    {
        defaultIn(node);
    }

    public void outAAPrintFunction(AAPrintFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPrintFunction(AAPrintFunction node)
    {
        inAAPrintFunction(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getFileNumber() != null)
        {
            node.getFileNumber().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        {
            List<PPrintFunctionPart> copy = new ArrayList<PPrintFunctionPart>(node.getPrintFunctionPart());
            for(PPrintFunctionPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAAPrintFunction(node);
    }

    public void inABPrintFunction(ABPrintFunction node)
    {
        defaultIn(node);
    }

    public void outABPrintFunction(ABPrintFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABPrintFunction(ABPrintFunction node)
    {
        inABPrintFunction(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getFileNumber() != null)
        {
            node.getFileNumber().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        {
            List<PPrintFunctionPart> copy = new ArrayList<PPrintFunctionPart>(node.getPrintFunctionPart());
            for(PPrintFunctionPart e : copy)
            {
                e.apply(this);
            }
        }
        outABPrintFunction(node);
    }

    public void inAValueCommaPrintFunctionPart(AValueCommaPrintFunctionPart node)
    {
        defaultIn(node);
    }

    public void outAValueCommaPrintFunctionPart(AValueCommaPrintFunctionPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueCommaPrintFunctionPart(AValueCommaPrintFunctionPart node)
    {
        inAValueCommaPrintFunctionPart(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAValueCommaPrintFunctionPart(node);
    }

    public void inAValueSemicolonPrintFunctionPart(AValueSemicolonPrintFunctionPart node)
    {
        defaultIn(node);
    }

    public void outAValueSemicolonPrintFunctionPart(AValueSemicolonPrintFunctionPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueSemicolonPrintFunctionPart(AValueSemicolonPrintFunctionPart node)
    {
        inAValueSemicolonPrintFunctionPart(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAValueSemicolonPrintFunctionPart(node);
    }

    public void inASemicolonPrintFunctionPart(ASemicolonPrintFunctionPart node)
    {
        defaultIn(node);
    }

    public void outASemicolonPrintFunctionPart(ASemicolonPrintFunctionPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonPrintFunctionPart(ASemicolonPrintFunctionPart node)
    {
        inASemicolonPrintFunctionPart(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonPrintFunctionPart(node);
    }

    public void inAFreeFileFunction(AFreeFileFunction node)
    {
        defaultIn(node);
    }

    public void outAFreeFileFunction(AFreeFileFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFreeFileFunction(AFreeFileFunction node)
    {
        inAFreeFileFunction(node);
        if(node.getFreeFile() != null)
        {
            node.getFreeFile().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAFreeFileFunction(node);
    }

    public void inADebugPrintFunction(ADebugPrintFunction node)
    {
        defaultIn(node);
    }

    public void outADebugPrintFunction(ADebugPrintFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADebugPrintFunction(ADebugPrintFunction node)
    {
        inADebugPrintFunction(node);
        if(node.getDebugPrint() != null)
        {
            node.getDebugPrint().apply(this);
        }
        {
            List<PPrintFunctionPart> copy = new ArrayList<PPrintFunctionPart>(node.getPrintFunctionPart());
            for(PPrintFunctionPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outADebugPrintFunction(node);
    }

    public void inAKillFunction(AKillFunction node)
    {
        defaultIn(node);
    }

    public void outAKillFunction(AKillFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKillFunction(AKillFunction node)
    {
        inAKillFunction(node);
        if(node.getKill() != null)
        {
            node.getKill().apply(this);
        }
        if(node.getStringValue() != null)
        {
            node.getStringValue().apply(this);
        }
        outAKillFunction(node);
    }

    public void inARenameFileFunction(ARenameFileFunction node)
    {
        defaultIn(node);
    }

    public void outARenameFileFunction(ARenameFileFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARenameFileFunction(ARenameFileFunction node)
    {
        inARenameFileFunction(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOldName() != null)
        {
            node.getOldName().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getNewName() != null)
        {
            node.getNewName().apply(this);
        }
        outARenameFileFunction(node);
    }

    public void inAInputFunction(AInputFunction node)
    {
        defaultIn(node);
    }

    public void outAInputFunction(AInputFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputFunction(AInputFunction node)
    {
        inAInputFunction(node);
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getLofFunction() != null)
        {
            node.getLofFunction().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFileNumber() != null)
        {
            node.getFileNumber().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outAInputFunction(node);
    }

    public void inALofFunction(ALofFunction node)
    {
        defaultIn(node);
    }

    public void outALofFunction(ALofFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALofFunction(ALofFunction node)
    {
        inALofFunction(node);
        if(node.getLof() != null)
        {
            node.getLof().apply(this);
        }
        if(node.getOpenParen() != null)
        {
            node.getOpenParen().apply(this);
        }
        if(node.getFileNumber() != null)
        {
            node.getFileNumber().apply(this);
        }
        if(node.getCloseParen() != null)
        {
            node.getCloseParen().apply(this);
        }
        outALofFunction(node);
    }

    public void inAMsgBoxFunction(AMsgBoxFunction node)
    {
        defaultIn(node);
    }

    public void outAMsgBoxFunction(AMsgBoxFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMsgBoxFunction(AMsgBoxFunction node)
    {
        inAMsgBoxFunction(node);
        if(node.getMsgBox() != null)
        {
            node.getMsgBox().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outAMsgBoxFunction(node);
    }

    public void inAMsgBoxFunctionWithoutParens(AMsgBoxFunctionWithoutParens node)
    {
        defaultIn(node);
    }

    public void outAMsgBoxFunctionWithoutParens(AMsgBoxFunctionWithoutParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMsgBoxFunctionWithoutParens(AMsgBoxFunctionWithoutParens node)
    {
        inAMsgBoxFunctionWithoutParens(node);
        if(node.getMsgBox() != null)
        {
            node.getMsgBox().apply(this);
        }
        if(node.getParamCallListWithoutParens() != null)
        {
            node.getParamCallListWithoutParens().apply(this);
        }
        outAMsgBoxFunctionWithoutParens(node);
    }

    public void inAExcelActiveWindow(AExcelActiveWindow node)
    {
        defaultIn(node);
    }

    public void outAExcelActiveWindow(AExcelActiveWindow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelActiveWindow(AExcelActiveWindow node)
    {
        inAExcelActiveWindow(node);
        if(node.getActiveWindow() != null)
        {
            node.getActiveWindow().apply(this);
        }
        outAExcelActiveWindow(node);
    }

    public void inAActiveWorbookExcelWorkbook(AActiveWorbookExcelWorkbook node)
    {
        defaultIn(node);
    }

    public void outAActiveWorbookExcelWorkbook(AActiveWorbookExcelWorkbook node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActiveWorbookExcelWorkbook(AActiveWorbookExcelWorkbook node)
    {
        inAActiveWorbookExcelWorkbook(node);
        if(node.getActiveWorbook() != null)
        {
            node.getActiveWorbook().apply(this);
        }
        outAActiveWorbookExcelWorkbook(node);
    }

    public void inAExcelWorkbook(AExcelWorkbook node)
    {
        defaultIn(node);
    }

    public void outAExcelWorkbook(AExcelWorkbook node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelWorkbook(AExcelWorkbook node)
    {
        inAExcelWorkbook(node);
        if(node.getWorkbooks() != null)
        {
            node.getWorkbooks().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outAExcelWorkbook(node);
    }

    public void inAIdExcelWorkbook(AIdExcelWorkbook node)
    {
        defaultIn(node);
    }

    public void outAIdExcelWorkbook(AIdExcelWorkbook node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExcelWorkbook(AIdExcelWorkbook node)
    {
        inAIdExcelWorkbook(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExcelWorkbook(node);
    }

    public void inAActiveWindowExcelSheet(AActiveWindowExcelSheet node)
    {
        defaultIn(node);
    }

    public void outAActiveWindowExcelSheet(AActiveWindowExcelSheet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActiveWindowExcelSheet(AActiveWindowExcelSheet node)
    {
        inAActiveWindowExcelSheet(node);
        if(node.getExcelActiveWindow() != null)
        {
            node.getExcelActiveWindow().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getExcelSheetValue() != null)
        {
            node.getExcelSheetValue().apply(this);
        }
        outAActiveWindowExcelSheet(node);
    }

    public void inAWorkbookExcelSheet(AWorkbookExcelSheet node)
    {
        defaultIn(node);
    }

    public void outAWorkbookExcelSheet(AWorkbookExcelSheet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWorkbookExcelSheet(AWorkbookExcelSheet node)
    {
        inAWorkbookExcelSheet(node);
        if(node.getExcelWorkbook() != null)
        {
            node.getExcelWorkbook().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getExcelSheetValue() != null)
        {
            node.getExcelSheetValue().apply(this);
        }
        outAWorkbookExcelSheet(node);
    }

    public void inAMethodChainingExcelSheet(AMethodChainingExcelSheet node)
    {
        defaultIn(node);
    }

    public void outAMethodChainingExcelSheet(AMethodChainingExcelSheet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodChainingExcelSheet(AMethodChainingExcelSheet node)
    {
        inAMethodChainingExcelSheet(node);
        if(node.getMethodChaining() != null)
        {
            node.getMethodChaining().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getExcelSheetValue() != null)
        {
            node.getExcelSheetValue().apply(this);
        }
        outAMethodChainingExcelSheet(node);
    }

    public void inAIdExcelSheet(AIdExcelSheet node)
    {
        defaultIn(node);
    }

    public void outAIdExcelSheet(AIdExcelSheet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExcelSheet(AIdExcelSheet node)
    {
        inAIdExcelSheet(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExcelSheet(node);
    }

    public void inAWorksheetsExcelSheet(AWorksheetsExcelSheet node)
    {
        defaultIn(node);
    }

    public void outAWorksheetsExcelSheet(AWorksheetsExcelSheet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWorksheetsExcelSheet(AWorksheetsExcelSheet node)
    {
        inAWorksheetsExcelSheet(node);
        if(node.getExcelSheetValue() != null)
        {
            node.getExcelSheetValue().apply(this);
        }
        outAWorksheetsExcelSheet(node);
    }

    public void inASelectedSheetsExcelSheetValue(ASelectedSheetsExcelSheetValue node)
    {
        defaultIn(node);
    }

    public void outASelectedSheetsExcelSheetValue(ASelectedSheetsExcelSheetValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectedSheetsExcelSheetValue(ASelectedSheetsExcelSheetValue node)
    {
        inASelectedSheetsExcelSheetValue(node);
        if(node.getSelectedSheets() != null)
        {
            node.getSelectedSheets().apply(this);
        }
        outASelectedSheetsExcelSheetValue(node);
    }

    public void inAActiveSheetExcelSheetValue(AActiveSheetExcelSheetValue node)
    {
        defaultIn(node);
    }

    public void outAActiveSheetExcelSheetValue(AActiveSheetExcelSheetValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActiveSheetExcelSheetValue(AActiveSheetExcelSheetValue node)
    {
        inAActiveSheetExcelSheetValue(node);
        if(node.getActiveSheet() != null)
        {
            node.getActiveSheet().apply(this);
        }
        outAActiveSheetExcelSheetValue(node);
    }

    public void inASheetsExcelSheetValue(ASheetsExcelSheetValue node)
    {
        defaultIn(node);
    }

    public void outASheetsExcelSheetValue(ASheetsExcelSheetValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetsExcelSheetValue(ASheetsExcelSheetValue node)
    {
        inASheetsExcelSheetValue(node);
        if(node.getSheets() != null)
        {
            node.getSheets().apply(this);
        }
        outASheetsExcelSheetValue(node);
    }

    public void inASheetsWithParamsExcelSheetValue(ASheetsWithParamsExcelSheetValue node)
    {
        defaultIn(node);
    }

    public void outASheetsWithParamsExcelSheetValue(ASheetsWithParamsExcelSheetValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetsWithParamsExcelSheetValue(ASheetsWithParamsExcelSheetValue node)
    {
        inASheetsWithParamsExcelSheetValue(node);
        if(node.getSheets() != null)
        {
            node.getSheets().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outASheetsWithParamsExcelSheetValue(node);
    }

    public void inAWorksheetsWithParamsExcelSheetValue(AWorksheetsWithParamsExcelSheetValue node)
    {
        defaultIn(node);
    }

    public void outAWorksheetsWithParamsExcelSheetValue(AWorksheetsWithParamsExcelSheetValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWorksheetsWithParamsExcelSheetValue(AWorksheetsWithParamsExcelSheetValue node)
    {
        inAWorksheetsWithParamsExcelSheetValue(node);
        if(node.getWorksheets() != null)
        {
            node.getWorksheets().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outAWorksheetsWithParamsExcelSheetValue(node);
    }

    public void inAWorksheetsExcelSheetValue(AWorksheetsExcelSheetValue node)
    {
        defaultIn(node);
    }

    public void outAWorksheetsExcelSheetValue(AWorksheetsExcelSheetValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWorksheetsExcelSheetValue(AWorksheetsExcelSheetValue node)
    {
        inAWorksheetsExcelSheetValue(node);
        if(node.getWorksheets() != null)
        {
            node.getWorksheets().apply(this);
        }
        outAWorksheetsExcelSheetValue(node);
    }

    public void inAExcelRow(AExcelRow node)
    {
        defaultIn(node);
    }

    public void outAExcelRow(AExcelRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelRow(AExcelRow node)
    {
        inAExcelRow(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getRows() != null)
        {
            node.getRows().apply(this);
        }
        outAExcelRow(node);
    }

    public void inACellExcelRow(ACellExcelRow node)
    {
        defaultIn(node);
    }

    public void outACellExcelRow(ACellExcelRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACellExcelRow(ACellExcelRow node)
    {
        inACellExcelRow(node);
        if(node.getExcelCell() != null)
        {
            node.getExcelCell().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getExcelRowValue() != null)
        {
            node.getExcelRowValue().apply(this);
        }
        outACellExcelRow(node);
    }

    public void inARowsRowsExcelRow(ARowsRowsExcelRow node)
    {
        defaultIn(node);
    }

    public void outARowsRowsExcelRow(ARowsRowsExcelRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARowsRowsExcelRow(ARowsRowsExcelRow node)
    {
        inARowsRowsExcelRow(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getFirstRows() != null)
        {
            node.getFirstRows().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getSecondRows() != null)
        {
            node.getSecondRows().apply(this);
        }
        outARowsRowsExcelRow(node);
    }

    public void inAWithParamsExcelRow(AWithParamsExcelRow node)
    {
        defaultIn(node);
    }

    public void outAWithParamsExcelRow(AWithParamsExcelRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithParamsExcelRow(AWithParamsExcelRow node)
    {
        inAWithParamsExcelRow(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getRows() != null)
        {
            node.getRows().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getExcelRowValue() != null)
        {
            node.getExcelRowValue().apply(this);
        }
        outAWithParamsExcelRow(node);
    }

    public void inAEntireRowExcelRowValue(AEntireRowExcelRowValue node)
    {
        defaultIn(node);
    }

    public void outAEntireRowExcelRowValue(AEntireRowExcelRowValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntireRowExcelRowValue(AEntireRowExcelRowValue node)
    {
        inAEntireRowExcelRowValue(node);
        if(node.getEntireRow() != null)
        {
            node.getEntireRow().apply(this);
        }
        outAEntireRowExcelRowValue(node);
    }

    public void inACellExcelColumn(ACellExcelColumn node)
    {
        defaultIn(node);
    }

    public void outACellExcelColumn(ACellExcelColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACellExcelColumn(ACellExcelColumn node)
    {
        inACellExcelColumn(node);
        if(node.getExcelCell() != null)
        {
            node.getExcelCell().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getExcelColumneValue() != null)
        {
            node.getExcelColumneValue().apply(this);
        }
        outACellExcelColumn(node);
    }

    public void inASheetExcelColumn(ASheetExcelColumn node)
    {
        defaultIn(node);
    }

    public void outASheetExcelColumn(ASheetExcelColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetExcelColumn(ASheetExcelColumn node)
    {
        inASheetExcelColumn(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getExcelColumneValue() != null)
        {
            node.getExcelColumneValue().apply(this);
        }
        outASheetExcelColumn(node);
    }

    public void inAEntireColumnExcelColumneValue(AEntireColumnExcelColumneValue node)
    {
        defaultIn(node);
    }

    public void outAEntireColumnExcelColumneValue(AEntireColumnExcelColumneValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntireColumnExcelColumneValue(AEntireColumnExcelColumneValue node)
    {
        inAEntireColumnExcelColumneValue(node);
        if(node.getEntireColumn() != null)
        {
            node.getEntireColumn().apply(this);
        }
        outAEntireColumnExcelColumneValue(node);
    }

    public void inAExcelColumneValue(AExcelColumneValue node)
    {
        defaultIn(node);
    }

    public void outAExcelColumneValue(AExcelColumneValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelColumneValue(AExcelColumneValue node)
    {
        inAExcelColumneValue(node);
        if(node.getColumns() != null)
        {
            node.getColumns().apply(this);
        }
        outAExcelColumneValue(node);
    }

    public void inAExcelCell(AExcelCell node)
    {
        defaultIn(node);
    }

    public void outAExcelCell(AExcelCell node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelCell(AExcelCell node)
    {
        inAExcelCell(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getExcelCellValue() != null)
        {
            node.getExcelCellValue().apply(this);
        }
        outAExcelCell(node);
    }

    public void inAWithParamsExcelCellValue(AWithParamsExcelCellValue node)
    {
        defaultIn(node);
    }

    public void outAWithParamsExcelCellValue(AWithParamsExcelCellValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithParamsExcelCellValue(AWithParamsExcelCellValue node)
    {
        inAWithParamsExcelCellValue(node);
        if(node.getCells() != null)
        {
            node.getCells().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outAWithParamsExcelCellValue(node);
    }

    public void inAExcelCellValue(AExcelCellValue node)
    {
        defaultIn(node);
    }

    public void outAExcelCellValue(AExcelCellValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelCellValue(AExcelCellValue node)
    {
        inAExcelCellValue(node);
        if(node.getCells() != null)
        {
            node.getCells().apply(this);
        }
        outAExcelCellValue(node);
    }

    public void inAExcelRange(AExcelRange node)
    {
        defaultIn(node);
    }

    public void outAExcelRange(AExcelRange node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelRange(AExcelRange node)
    {
        inAExcelRange(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getExcelRangeValue() != null)
        {
            node.getExcelRangeValue().apply(this);
        }
        outAExcelRange(node);
    }

    public void inAExcelRangeValue(AExcelRangeValue node)
    {
        defaultIn(node);
    }

    public void outAExcelRangeValue(AExcelRangeValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelRangeValue(AExcelRangeValue node)
    {
        inAExcelRangeValue(node);
        if(node.getRange() != null)
        {
            node.getRange().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outAExcelRangeValue(node);
    }

    public void inAWithParamsExcelSelection(AWithParamsExcelSelection node)
    {
        defaultIn(node);
    }

    public void outAWithParamsExcelSelection(AWithParamsExcelSelection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithParamsExcelSelection(AWithParamsExcelSelection node)
    {
        inAWithParamsExcelSelection(node);
        if(node.getSelection() != null)
        {
            node.getSelection().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getFormatConditions() != null)
        {
            node.getFormatConditions().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outAWithParamsExcelSelection(node);
    }

    public void inAExcelSelection(AExcelSelection node)
    {
        defaultIn(node);
    }

    public void outAExcelSelection(AExcelSelection node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcelSelection(AExcelSelection node)
    {
        inAExcelSelection(node);
        if(node.getSelection() != null)
        {
            node.getSelection().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getFormatConditions() != null)
        {
            node.getFormatConditions().apply(this);
        }
        outAExcelSelection(node);
    }

    public void inACopyFunction(ACopyFunction node)
    {
        defaultIn(node);
    }

    public void outACopyFunction(ACopyFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACopyFunction(ACopyFunction node)
    {
        inACopyFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getCopy() != null)
        {
            node.getCopy().apply(this);
        }
        if(node.getParamCallListWithoutParens() != null)
        {
            node.getParamCallListWithoutParens().apply(this);
        }
        outACopyFunction(node);
    }

    public void inAActiveWorbookFullNameFunction(AActiveWorbookFullNameFunction node)
    {
        defaultIn(node);
    }

    public void outAActiveWorbookFullNameFunction(AActiveWorbookFullNameFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActiveWorbookFullNameFunction(AActiveWorbookFullNameFunction node)
    {
        inAActiveWorbookFullNameFunction(node);
        if(node.getExcelWorkbook() != null)
        {
            node.getExcelWorkbook().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getFullName() != null)
        {
            node.getFullName().apply(this);
        }
        outAActiveWorbookFullNameFunction(node);
    }

    public void inAColumnSetHiddenFunction(AColumnSetHiddenFunction node)
    {
        defaultIn(node);
    }

    public void outAColumnSetHiddenFunction(AColumnSetHiddenFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColumnSetHiddenFunction(AColumnSetHiddenFunction node)
    {
        inAColumnSetHiddenFunction(node);
        if(node.getExcelColumn() != null)
        {
            node.getExcelColumn().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getHidden() != null)
        {
            node.getHidden().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getBooleanValue() != null)
        {
            node.getBooleanValue().apply(this);
        }
        outAColumnSetHiddenFunction(node);
    }

    public void inARowSetHiddenFunction(ARowSetHiddenFunction node)
    {
        defaultIn(node);
    }

    public void outARowSetHiddenFunction(ARowSetHiddenFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARowSetHiddenFunction(ARowSetHiddenFunction node)
    {
        inARowSetHiddenFunction(node);
        if(node.getExcelRow() != null)
        {
            node.getExcelRow().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getHidden() != null)
        {
            node.getHidden().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getBooleanValue() != null)
        {
            node.getBooleanValue().apply(this);
        }
        outARowSetHiddenFunction(node);
    }

    public void inASheetSetVisibleFunction(ASheetSetVisibleFunction node)
    {
        defaultIn(node);
    }

    public void outASheetSetVisibleFunction(ASheetSetVisibleFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetSetVisibleFunction(ASheetSetVisibleFunction node)
    {
        inASheetSetVisibleFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getVisible() != null)
        {
            node.getVisible().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getBooleanValue() != null)
        {
            node.getBooleanValue().apply(this);
        }
        outASheetSetVisibleFunction(node);
    }

    public void inARangeSelectFunction(ARangeSelectFunction node)
    {
        defaultIn(node);
    }

    public void outARangeSelectFunction(ARangeSelectFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeSelectFunction(ARangeSelectFunction node)
    {
        inARangeSelectFunction(node);
        if(node.getExcelRange() != null)
        {
            node.getExcelRange().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        outARangeSelectFunction(node);
    }

    public void inACellSelectFunction(ACellSelectFunction node)
    {
        defaultIn(node);
    }

    public void outACellSelectFunction(ACellSelectFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACellSelectFunction(ACellSelectFunction node)
    {
        inACellSelectFunction(node);
        if(node.getExcelCell() != null)
        {
            node.getExcelCell().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        outACellSelectFunction(node);
    }

    public void inASheetSelectFunction(ASheetSelectFunction node)
    {
        defaultIn(node);
    }

    public void outASheetSelectFunction(ASheetSelectFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetSelectFunction(ASheetSelectFunction node)
    {
        inASheetSelectFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        outASheetSelectFunction(node);
    }

    public void inASheetGetNameExcelFunction(ASheetGetNameExcelFunction node)
    {
        defaultIn(node);
    }

    public void outASheetGetNameExcelFunction(ASheetGetNameExcelFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetGetNameExcelFunction(ASheetGetNameExcelFunction node)
    {
        inASheetGetNameExcelFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outASheetGetNameExcelFunction(node);
    }

    public void inAWorkbookGetNameExcelFunction(AWorkbookGetNameExcelFunction node)
    {
        defaultIn(node);
    }

    public void outAWorkbookGetNameExcelFunction(AWorkbookGetNameExcelFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWorkbookGetNameExcelFunction(AWorkbookGetNameExcelFunction node)
    {
        inAWorkbookGetNameExcelFunction(node);
        if(node.getExcelWorkbook() != null)
        {
            node.getExcelWorkbook().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAWorkbookGetNameExcelFunction(node);
    }

    public void inASetNameExcelFunction(ASetNameExcelFunction node)
    {
        defaultIn(node);
    }

    public void outASetNameExcelFunction(ASetNameExcelFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetNameExcelFunction(ASetNameExcelFunction node)
    {
        inASetNameExcelFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASetNameExcelFunction(node);
    }

    public void inACountFunction(ACountFunction node)
    {
        defaultIn(node);
    }

    public void outACountFunction(ACountFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACountFunction(ACountFunction node)
    {
        inACountFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getCount() != null)
        {
            node.getCount().apply(this);
        }
        outACountFunction(node);
    }

    public void inAMoveFunction(AMoveFunction node)
    {
        defaultIn(node);
    }

    public void outAMoveFunction(AMoveFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoveFunction(AMoveFunction node)
    {
        inAMoveFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getMove() != null)
        {
            node.getMove().apply(this);
        }
        if(node.getParamCallListWithoutParens() != null)
        {
            node.getParamCallListWithoutParens().apply(this);
        }
        outAMoveFunction(node);
    }

    public void inARowAutoFitFunction(ARowAutoFitFunction node)
    {
        defaultIn(node);
    }

    public void outARowAutoFitFunction(ARowAutoFitFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARowAutoFitFunction(ARowAutoFitFunction node)
    {
        inARowAutoFitFunction(node);
        if(node.getExcelRow() != null)
        {
            node.getExcelRow().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getAutoFit() != null)
        {
            node.getAutoFit().apply(this);
        }
        outARowAutoFitFunction(node);
    }

    public void inAColumnAutoFitFunction(AColumnAutoFitFunction node)
    {
        defaultIn(node);
    }

    public void outAColumnAutoFitFunction(AColumnAutoFitFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColumnAutoFitFunction(AColumnAutoFitFunction node)
    {
        inAColumnAutoFitFunction(node);
        if(node.getExcelColumn() != null)
        {
            node.getExcelColumn().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getAutoFit() != null)
        {
            node.getAutoFit().apply(this);
        }
        outAColumnAutoFitFunction(node);
    }

    public void inASheetAddFunction(ASheetAddFunction node)
    {
        defaultIn(node);
    }

    public void outASheetAddFunction(ASheetAddFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetAddFunction(ASheetAddFunction node)
    {
        inASheetAddFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getAdd() != null)
        {
            node.getAdd().apply(this);
        }
        if(node.getParamCallList() != null)
        {
            node.getParamCallList().apply(this);
        }
        outASheetAddFunction(node);
    }

    public void inASheetDeleteFunction(ASheetDeleteFunction node)
    {
        defaultIn(node);
    }

    public void outASheetDeleteFunction(ASheetDeleteFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetDeleteFunction(ASheetDeleteFunction node)
    {
        inASheetDeleteFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getDelete() != null)
        {
            node.getDelete().apply(this);
        }
        outASheetDeleteFunction(node);
    }

    public void inASheetActivateFunction(ASheetActivateFunction node)
    {
        defaultIn(node);
    }

    public void outASheetActivateFunction(ASheetActivateFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASheetActivateFunction(ASheetActivateFunction node)
    {
        inASheetActivateFunction(node);
        if(node.getExcelSheet() != null)
        {
            node.getExcelSheet().apply(this);
        }
        if(node.getMethodChainingOperator() != null)
        {
            node.getMethodChainingOperator().apply(this);
        }
        if(node.getActivate() != null)
        {
            node.getActivate().apply(this);
        }
        outASheetActivateFunction(node);
    }

    public void inASetCellFunction(ASetCellFunction node)
    {
        defaultIn(node);
    }

    public void outASetCellFunction(ASetCellFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetCellFunction(ASetCellFunction node)
    {
        inASetCellFunction(node);
        if(node.getExcelCell() != null)
        {
            node.getExcelCell().apply(this);
        }
        if(node.getAllocation() != null)
        {
            node.getAllocation().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outASetCellFunction(node);
    }

    public void inATryResumeNextTry(ATryResumeNextTry node)
    {
        defaultIn(node);
    }

    public void outATryResumeNextTry(ATryResumeNextTry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATryResumeNextTry(ATryResumeNextTry node)
    {
        inATryResumeNextTry(node);
        if(node.getTryResumeNext() != null)
        {
            node.getTryResumeNext().apply(this);
        }
        outATryResumeNextTry(node);
    }

    public void inATrySetNameTry(ATrySetNameTry node)
    {
        defaultIn(node);
    }

    public void outATrySetNameTry(ATrySetNameTry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrySetNameTry(ATrySetNameTry node)
    {
        inATrySetNameTry(node);
        if(node.getTrySetName() != null)
        {
            node.getTrySetName().apply(this);
        }
        outATrySetNameTry(node);
    }

    public void inATryErrorExitTry(ATryErrorExitTry node)
    {
        defaultIn(node);
    }

    public void outATryErrorExitTry(ATryErrorExitTry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATryErrorExitTry(ATryErrorExitTry node)
    {
        inATryErrorExitTry(node);
        if(node.getTryErrorExit() != null)
        {
            node.getTryErrorExit().apply(this);
        }
        outATryErrorExitTry(node);
    }

    public void inAGotoCall(AGotoCall node)
    {
        defaultIn(node);
    }

    public void outAGotoCall(AGotoCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotoCall(AGotoCall node)
    {
        inAGotoCall(node);
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getIdToken() != null)
        {
            node.getIdToken().apply(this);
        }
        outAGotoCall(node);
    }

    public void inAGotoCodeStart(AGotoCodeStart node)
    {
        defaultIn(node);
    }

    public void outAGotoCodeStart(AGotoCodeStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGotoCodeStart(AGotoCodeStart node)
    {
        inAGotoCodeStart(node);
        if(node.getGotoId() != null)
        {
            node.getGotoId().apply(this);
        }
        outAGotoCodeStart(node);
    }
}
