/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AArithmeticExpression extends PArithmeticExpression
{
    private PArithmeticExpressionPart _first_;
    private final LinkedList<PArithmeticExpressionPart> _arithmeticExpressionPart_ = new LinkedList<PArithmeticExpressionPart>();
    private PArithmeticExpressionPartValue _arithmeticExpressionPartValue_;

    public AArithmeticExpression()
    {
        // Constructor
    }

    public AArithmeticExpression(
        @SuppressWarnings("hiding") PArithmeticExpressionPart _first_,
        @SuppressWarnings("hiding") List<PArithmeticExpressionPart> _arithmeticExpressionPart_,
        @SuppressWarnings("hiding") PArithmeticExpressionPartValue _arithmeticExpressionPartValue_)
    {
        // Constructor
        setFirst(_first_);

        setArithmeticExpressionPart(_arithmeticExpressionPart_);

        setArithmeticExpressionPartValue(_arithmeticExpressionPartValue_);

    }

    @Override
    public Object clone()
    {
        return new AArithmeticExpression(
            cloneNode(this._first_),
            cloneList(this._arithmeticExpressionPart_),
            cloneNode(this._arithmeticExpressionPartValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArithmeticExpression(this);
    }

    public PArithmeticExpressionPart getFirst()
    {
        return this._first_;
    }

    public void setFirst(PArithmeticExpressionPart node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public LinkedList<PArithmeticExpressionPart> getArithmeticExpressionPart()
    {
        return this._arithmeticExpressionPart_;
    }

    public void setArithmeticExpressionPart(List<PArithmeticExpressionPart> list)
    {
        this._arithmeticExpressionPart_.clear();
        this._arithmeticExpressionPart_.addAll(list);
        for(PArithmeticExpressionPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PArithmeticExpressionPartValue getArithmeticExpressionPartValue()
    {
        return this._arithmeticExpressionPartValue_;
    }

    public void setArithmeticExpressionPartValue(PArithmeticExpressionPartValue node)
    {
        if(this._arithmeticExpressionPartValue_ != null)
        {
            this._arithmeticExpressionPartValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arithmeticExpressionPartValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._first_)
            + toString(this._arithmeticExpressionPart_)
            + toString(this._arithmeticExpressionPartValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._arithmeticExpressionPart_.remove(child))
        {
            return;
        }

        if(this._arithmeticExpressionPartValue_ == child)
        {
            this._arithmeticExpressionPartValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._first_ == oldChild)
        {
            setFirst((PArithmeticExpressionPart) newChild);
            return;
        }

        for(ListIterator<PArithmeticExpressionPart> i = this._arithmeticExpressionPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArithmeticExpressionPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._arithmeticExpressionPartValue_ == oldChild)
        {
            setArithmeticExpressionPartValue((PArithmeticExpressionPartValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
