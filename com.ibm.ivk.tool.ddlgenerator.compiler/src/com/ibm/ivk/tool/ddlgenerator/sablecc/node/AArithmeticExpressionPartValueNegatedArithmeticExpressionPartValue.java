/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue extends PArithmeticExpressionPartValue
{
    private PArithmeticExpressionPartValueNegated _arithmeticExpressionPartValueNegated_;

    public AArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue()
    {
        // Constructor
    }

    public AArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue(
        @SuppressWarnings("hiding") PArithmeticExpressionPartValueNegated _arithmeticExpressionPartValueNegated_)
    {
        // Constructor
        setArithmeticExpressionPartValueNegated(_arithmeticExpressionPartValueNegated_);

    }

    @Override
    public Object clone()
    {
        return new AArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue(
            cloneNode(this._arithmeticExpressionPartValueNegated_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArithmeticExpressionPartValueNegatedArithmeticExpressionPartValue(this);
    }

    public PArithmeticExpressionPartValueNegated getArithmeticExpressionPartValueNegated()
    {
        return this._arithmeticExpressionPartValueNegated_;
    }

    public void setArithmeticExpressionPartValueNegated(PArithmeticExpressionPartValueNegated node)
    {
        if(this._arithmeticExpressionPartValueNegated_ != null)
        {
            this._arithmeticExpressionPartValueNegated_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arithmeticExpressionPartValueNegated_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arithmeticExpressionPartValueNegated_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arithmeticExpressionPartValueNegated_ == child)
        {
            this._arithmeticExpressionPartValueNegated_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arithmeticExpressionPartValueNegated_ == oldChild)
        {
            setArithmeticExpressionPartValueNegated((PArithmeticExpressionPartValueNegated) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
