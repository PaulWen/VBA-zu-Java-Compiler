/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AArrayResize extends PArrayResize
{
    private TArrayResizeToken _arrayResizeToken_;
    private PMethodChaining _methodChaining_;
    private TOpenParen _openParen_;
    private PValue _smallest_;
    private TTo _to_;
    private PValue _largest_;
    private TCloseParen _closeParen_;

    public AArrayResize()
    {
        // Constructor
    }

    public AArrayResize(
        @SuppressWarnings("hiding") TArrayResizeToken _arrayResizeToken_,
        @SuppressWarnings("hiding") PMethodChaining _methodChaining_,
        @SuppressWarnings("hiding") TOpenParen _openParen_,
        @SuppressWarnings("hiding") PValue _smallest_,
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") PValue _largest_,
        @SuppressWarnings("hiding") TCloseParen _closeParen_)
    {
        // Constructor
        setArrayResizeToken(_arrayResizeToken_);

        setMethodChaining(_methodChaining_);

        setOpenParen(_openParen_);

        setSmallest(_smallest_);

        setTo(_to_);

        setLargest(_largest_);

        setCloseParen(_closeParen_);

    }

    @Override
    public Object clone()
    {
        return new AArrayResize(
            cloneNode(this._arrayResizeToken_),
            cloneNode(this._methodChaining_),
            cloneNode(this._openParen_),
            cloneNode(this._smallest_),
            cloneNode(this._to_),
            cloneNode(this._largest_),
            cloneNode(this._closeParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayResize(this);
    }

    public TArrayResizeToken getArrayResizeToken()
    {
        return this._arrayResizeToken_;
    }

    public void setArrayResizeToken(TArrayResizeToken node)
    {
        if(this._arrayResizeToken_ != null)
        {
            this._arrayResizeToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrayResizeToken_ = node;
    }

    public PMethodChaining getMethodChaining()
    {
        return this._methodChaining_;
    }

    public void setMethodChaining(PMethodChaining node)
    {
        if(this._methodChaining_ != null)
        {
            this._methodChaining_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodChaining_ = node;
    }

    public TOpenParen getOpenParen()
    {
        return this._openParen_;
    }

    public void setOpenParen(TOpenParen node)
    {
        if(this._openParen_ != null)
        {
            this._openParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openParen_ = node;
    }

    public PValue getSmallest()
    {
        return this._smallest_;
    }

    public void setSmallest(PValue node)
    {
        if(this._smallest_ != null)
        {
            this._smallest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._smallest_ = node;
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PValue getLargest()
    {
        return this._largest_;
    }

    public void setLargest(PValue node)
    {
        if(this._largest_ != null)
        {
            this._largest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._largest_ = node;
    }

    public TCloseParen getCloseParen()
    {
        return this._closeParen_;
    }

    public void setCloseParen(TCloseParen node)
    {
        if(this._closeParen_ != null)
        {
            this._closeParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arrayResizeToken_)
            + toString(this._methodChaining_)
            + toString(this._openParen_)
            + toString(this._smallest_)
            + toString(this._to_)
            + toString(this._largest_)
            + toString(this._closeParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arrayResizeToken_ == child)
        {
            this._arrayResizeToken_ = null;
            return;
        }

        if(this._methodChaining_ == child)
        {
            this._methodChaining_ = null;
            return;
        }

        if(this._openParen_ == child)
        {
            this._openParen_ = null;
            return;
        }

        if(this._smallest_ == child)
        {
            this._smallest_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._largest_ == child)
        {
            this._largest_ = null;
            return;
        }

        if(this._closeParen_ == child)
        {
            this._closeParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arrayResizeToken_ == oldChild)
        {
            setArrayResizeToken((TArrayResizeToken) newChild);
            return;
        }

        if(this._methodChaining_ == oldChild)
        {
            setMethodChaining((PMethodChaining) newChild);
            return;
        }

        if(this._openParen_ == oldChild)
        {
            setOpenParen((TOpenParen) newChild);
            return;
        }

        if(this._smallest_ == oldChild)
        {
            setSmallest((PValue) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._largest_ == oldChild)
        {
            setLargest((PValue) newChild);
            return;
        }

        if(this._closeParen_ == oldChild)
        {
            setCloseParen((TCloseParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
