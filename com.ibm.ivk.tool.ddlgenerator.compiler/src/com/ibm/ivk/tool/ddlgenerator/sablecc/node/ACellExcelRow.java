/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ACellExcelRow extends PExcelRow
{
    private PExcelCell _excelCell_;
    private TMethodChainingOperator _methodChainingOperator_;
    private PExcelRowValue _excelRowValue_;

    public ACellExcelRow()
    {
        // Constructor
    }

    public ACellExcelRow(
        @SuppressWarnings("hiding") PExcelCell _excelCell_,
        @SuppressWarnings("hiding") TMethodChainingOperator _methodChainingOperator_,
        @SuppressWarnings("hiding") PExcelRowValue _excelRowValue_)
    {
        // Constructor
        setExcelCell(_excelCell_);

        setMethodChainingOperator(_methodChainingOperator_);

        setExcelRowValue(_excelRowValue_);

    }

    @Override
    public Object clone()
    {
        return new ACellExcelRow(
            cloneNode(this._excelCell_),
            cloneNode(this._methodChainingOperator_),
            cloneNode(this._excelRowValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACellExcelRow(this);
    }

    public PExcelCell getExcelCell()
    {
        return this._excelCell_;
    }

    public void setExcelCell(PExcelCell node)
    {
        if(this._excelCell_ != null)
        {
            this._excelCell_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._excelCell_ = node;
    }

    public TMethodChainingOperator getMethodChainingOperator()
    {
        return this._methodChainingOperator_;
    }

    public void setMethodChainingOperator(TMethodChainingOperator node)
    {
        if(this._methodChainingOperator_ != null)
        {
            this._methodChainingOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodChainingOperator_ = node;
    }

    public PExcelRowValue getExcelRowValue()
    {
        return this._excelRowValue_;
    }

    public void setExcelRowValue(PExcelRowValue node)
    {
        if(this._excelRowValue_ != null)
        {
            this._excelRowValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._excelRowValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._excelCell_)
            + toString(this._methodChainingOperator_)
            + toString(this._excelRowValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._excelCell_ == child)
        {
            this._excelCell_ = null;
            return;
        }

        if(this._methodChainingOperator_ == child)
        {
            this._methodChainingOperator_ = null;
            return;
        }

        if(this._excelRowValue_ == child)
        {
            this._excelRowValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._excelCell_ == oldChild)
        {
            setExcelCell((PExcelCell) newChild);
            return;
        }

        if(this._methodChainingOperator_ == oldChild)
        {
            setMethodChainingOperator((TMethodChainingOperator) newChild);
            return;
        }

        if(this._excelRowValue_ == oldChild)
        {
            setExcelRowValue((PExcelRowValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
