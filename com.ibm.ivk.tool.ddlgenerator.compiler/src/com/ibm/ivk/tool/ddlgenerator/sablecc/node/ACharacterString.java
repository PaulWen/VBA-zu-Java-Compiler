/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ACharacterString extends PCharacterString
{
    private PStringPart _first_;
    private final LinkedList<PStringPart> _stringPart_ = new LinkedList<PStringPart>();
    private PStringPartValue _stringPartValue_;

    public ACharacterString()
    {
        // Constructor
    }

    public ACharacterString(
        @SuppressWarnings("hiding") PStringPart _first_,
        @SuppressWarnings("hiding") List<PStringPart> _stringPart_,
        @SuppressWarnings("hiding") PStringPartValue _stringPartValue_)
    {
        // Constructor
        setFirst(_first_);

        setStringPart(_stringPart_);

        setStringPartValue(_stringPartValue_);

    }

    @Override
    public Object clone()
    {
        return new ACharacterString(
            cloneNode(this._first_),
            cloneList(this._stringPart_),
            cloneNode(this._stringPartValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACharacterString(this);
    }

    public PStringPart getFirst()
    {
        return this._first_;
    }

    public void setFirst(PStringPart node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public LinkedList<PStringPart> getStringPart()
    {
        return this._stringPart_;
    }

    public void setStringPart(List<PStringPart> list)
    {
        this._stringPart_.clear();
        this._stringPart_.addAll(list);
        for(PStringPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PStringPartValue getStringPartValue()
    {
        return this._stringPartValue_;
    }

    public void setStringPartValue(PStringPartValue node)
    {
        if(this._stringPartValue_ != null)
        {
            this._stringPartValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stringPartValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._first_)
            + toString(this._stringPart_)
            + toString(this._stringPartValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._stringPart_.remove(child))
        {
            return;
        }

        if(this._stringPartValue_ == child)
        {
            this._stringPartValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._first_ == oldChild)
        {
            setFirst((PStringPart) newChild);
            return;
        }

        for(ListIterator<PStringPart> i = this._stringPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStringPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._stringPartValue_ == oldChild)
        {
            setStringPartValue((PStringPartValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
