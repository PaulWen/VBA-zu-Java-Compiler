/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AComment extends PComment
{
    private TCommentToken _commentToken_;
    private TEndOfLine _endOfLine_;

    public AComment()
    {
        // Constructor
    }

    public AComment(
        @SuppressWarnings("hiding") TCommentToken _commentToken_,
        @SuppressWarnings("hiding") TEndOfLine _endOfLine_)
    {
        // Constructor
        setCommentToken(_commentToken_);

        setEndOfLine(_endOfLine_);

    }

    @Override
    public Object clone()
    {
        return new AComment(
            cloneNode(this._commentToken_),
            cloneNode(this._endOfLine_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComment(this);
    }

    public TCommentToken getCommentToken()
    {
        return this._commentToken_;
    }

    public void setCommentToken(TCommentToken node)
    {
        if(this._commentToken_ != null)
        {
            this._commentToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._commentToken_ = node;
    }

    public TEndOfLine getEndOfLine()
    {
        return this._endOfLine_;
    }

    public void setEndOfLine(TEndOfLine node)
    {
        if(this._endOfLine_ != null)
        {
            this._endOfLine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endOfLine_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._commentToken_)
            + toString(this._endOfLine_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._commentToken_ == child)
        {
            this._commentToken_ = null;
            return;
        }

        if(this._endOfLine_ == child)
        {
            this._endOfLine_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._commentToken_ == oldChild)
        {
            setCommentToken((TCommentToken) newChild);
            return;
        }

        if(this._endOfLine_ == oldChild)
        {
            setEndOfLine((TEndOfLine) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
