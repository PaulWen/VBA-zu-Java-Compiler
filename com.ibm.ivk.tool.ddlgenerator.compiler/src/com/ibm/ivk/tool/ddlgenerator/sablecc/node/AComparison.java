/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AComparison extends PComparison
{
    private PComparisonValue _a_;
    private PLogicalOperator _logicalOperator_;
    private PComparisonValue _b_;

    public AComparison()
    {
        // Constructor
    }

    public AComparison(
        @SuppressWarnings("hiding") PComparisonValue _a_,
        @SuppressWarnings("hiding") PLogicalOperator _logicalOperator_,
        @SuppressWarnings("hiding") PComparisonValue _b_)
    {
        // Constructor
        setA(_a_);

        setLogicalOperator(_logicalOperator_);

        setB(_b_);

    }

    @Override
    public Object clone()
    {
        return new AComparison(
            cloneNode(this._a_),
            cloneNode(this._logicalOperator_),
            cloneNode(this._b_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComparison(this);
    }

    public PComparisonValue getA()
    {
        return this._a_;
    }

    public void setA(PComparisonValue node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PLogicalOperator getLogicalOperator()
    {
        return this._logicalOperator_;
    }

    public void setLogicalOperator(PLogicalOperator node)
    {
        if(this._logicalOperator_ != null)
        {
            this._logicalOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalOperator_ = node;
    }

    public PComparisonValue getB()
    {
        return this._b_;
    }

    public void setB(PComparisonValue node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._a_)
            + toString(this._logicalOperator_)
            + toString(this._b_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._logicalOperator_ == child)
        {
            this._logicalOperator_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._a_ == oldChild)
        {
            setA((PComparisonValue) newChild);
            return;
        }

        if(this._logicalOperator_ == oldChild)
        {
            setLogicalOperator((PLogicalOperator) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((PComparisonValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
