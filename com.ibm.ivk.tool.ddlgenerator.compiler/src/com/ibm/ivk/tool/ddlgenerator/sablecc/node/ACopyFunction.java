/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ACopyFunction extends PCopyFunction
{
    private PExcelSheet _excelSheet_;
    private TMethodChainingOperator _methodChainingOperator_;
    private TCopy _copy_;
    private PParamCallListWithoutParens _paramCallListWithoutParens_;

    public ACopyFunction()
    {
        // Constructor
    }

    public ACopyFunction(
        @SuppressWarnings("hiding") PExcelSheet _excelSheet_,
        @SuppressWarnings("hiding") TMethodChainingOperator _methodChainingOperator_,
        @SuppressWarnings("hiding") TCopy _copy_,
        @SuppressWarnings("hiding") PParamCallListWithoutParens _paramCallListWithoutParens_)
    {
        // Constructor
        setExcelSheet(_excelSheet_);

        setMethodChainingOperator(_methodChainingOperator_);

        setCopy(_copy_);

        setParamCallListWithoutParens(_paramCallListWithoutParens_);

    }

    @Override
    public Object clone()
    {
        return new ACopyFunction(
            cloneNode(this._excelSheet_),
            cloneNode(this._methodChainingOperator_),
            cloneNode(this._copy_),
            cloneNode(this._paramCallListWithoutParens_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACopyFunction(this);
    }

    public PExcelSheet getExcelSheet()
    {
        return this._excelSheet_;
    }

    public void setExcelSheet(PExcelSheet node)
    {
        if(this._excelSheet_ != null)
        {
            this._excelSheet_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._excelSheet_ = node;
    }

    public TMethodChainingOperator getMethodChainingOperator()
    {
        return this._methodChainingOperator_;
    }

    public void setMethodChainingOperator(TMethodChainingOperator node)
    {
        if(this._methodChainingOperator_ != null)
        {
            this._methodChainingOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodChainingOperator_ = node;
    }

    public TCopy getCopy()
    {
        return this._copy_;
    }

    public void setCopy(TCopy node)
    {
        if(this._copy_ != null)
        {
            this._copy_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._copy_ = node;
    }

    public PParamCallListWithoutParens getParamCallListWithoutParens()
    {
        return this._paramCallListWithoutParens_;
    }

    public void setParamCallListWithoutParens(PParamCallListWithoutParens node)
    {
        if(this._paramCallListWithoutParens_ != null)
        {
            this._paramCallListWithoutParens_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramCallListWithoutParens_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._excelSheet_)
            + toString(this._methodChainingOperator_)
            + toString(this._copy_)
            + toString(this._paramCallListWithoutParens_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._excelSheet_ == child)
        {
            this._excelSheet_ = null;
            return;
        }

        if(this._methodChainingOperator_ == child)
        {
            this._methodChainingOperator_ = null;
            return;
        }

        if(this._copy_ == child)
        {
            this._copy_ = null;
            return;
        }

        if(this._paramCallListWithoutParens_ == child)
        {
            this._paramCallListWithoutParens_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._excelSheet_ == oldChild)
        {
            setExcelSheet((PExcelSheet) newChild);
            return;
        }

        if(this._methodChainingOperator_ == oldChild)
        {
            setMethodChainingOperator((TMethodChainingOperator) newChild);
            return;
        }

        if(this._copy_ == oldChild)
        {
            setCopy((TCopy) newChild);
            return;
        }

        if(this._paramCallListWithoutParens_ == oldChild)
        {
            setParamCallListWithoutParens((PParamCallListWithoutParens) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
