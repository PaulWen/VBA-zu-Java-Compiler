/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADebugPrintFunction extends PDebugPrintFunction
{
    private TDebugPrint _debugPrint_;
    private final LinkedList<PPrintFunctionPart> _printFunctionPart_ = new LinkedList<PPrintFunctionPart>();
    private PValue _value_;

    public ADebugPrintFunction()
    {
        // Constructor
    }

    public ADebugPrintFunction(
        @SuppressWarnings("hiding") TDebugPrint _debugPrint_,
        @SuppressWarnings("hiding") List<PPrintFunctionPart> _printFunctionPart_,
        @SuppressWarnings("hiding") PValue _value_)
    {
        // Constructor
        setDebugPrint(_debugPrint_);

        setPrintFunctionPart(_printFunctionPart_);

        setValue(_value_);

    }

    @Override
    public Object clone()
    {
        return new ADebugPrintFunction(
            cloneNode(this._debugPrint_),
            cloneList(this._printFunctionPart_),
            cloneNode(this._value_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADebugPrintFunction(this);
    }

    public TDebugPrint getDebugPrint()
    {
        return this._debugPrint_;
    }

    public void setDebugPrint(TDebugPrint node)
    {
        if(this._debugPrint_ != null)
        {
            this._debugPrint_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._debugPrint_ = node;
    }

    public LinkedList<PPrintFunctionPart> getPrintFunctionPart()
    {
        return this._printFunctionPart_;
    }

    public void setPrintFunctionPart(List<PPrintFunctionPart> list)
    {
        this._printFunctionPart_.clear();
        this._printFunctionPart_.addAll(list);
        for(PPrintFunctionPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._debugPrint_)
            + toString(this._printFunctionPart_)
            + toString(this._value_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._debugPrint_ == child)
        {
            this._debugPrint_ = null;
            return;
        }

        if(this._printFunctionPart_.remove(child))
        {
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._debugPrint_ == oldChild)
        {
            setDebugPrint((TDebugPrint) newChild);
            return;
        }

        for(ListIterator<PPrintFunctionPart> i = this._printFunctionPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPrintFunctionPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
