/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ADllFunction extends PDllFunction
{
    private final LinkedList<PModifier> _modifier_ = new LinkedList<PModifier>();
    private TFunctionStart _functionStart_;
    private TDllFunctionToken _dllFunctionToken_;

    public ADllFunction()
    {
        // Constructor
    }

    public ADllFunction(
        @SuppressWarnings("hiding") List<PModifier> _modifier_,
        @SuppressWarnings("hiding") TFunctionStart _functionStart_,
        @SuppressWarnings("hiding") TDllFunctionToken _dllFunctionToken_)
    {
        // Constructor
        setModifier(_modifier_);

        setFunctionStart(_functionStart_);

        setDllFunctionToken(_dllFunctionToken_);

    }

    @Override
    public Object clone()
    {
        return new ADllFunction(
            cloneList(this._modifier_),
            cloneNode(this._functionStart_),
            cloneNode(this._dllFunctionToken_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADllFunction(this);
    }

    public LinkedList<PModifier> getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(List<PModifier> list)
    {
        this._modifier_.clear();
        this._modifier_.addAll(list);
        for(PModifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TFunctionStart getFunctionStart()
    {
        return this._functionStart_;
    }

    public void setFunctionStart(TFunctionStart node)
    {
        if(this._functionStart_ != null)
        {
            this._functionStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionStart_ = node;
    }

    public TDllFunctionToken getDllFunctionToken()
    {
        return this._dllFunctionToken_;
    }

    public void setDllFunctionToken(TDllFunctionToken node)
    {
        if(this._dllFunctionToken_ != null)
        {
            this._dllFunctionToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dllFunctionToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifier_)
            + toString(this._functionStart_)
            + toString(this._dllFunctionToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifier_.remove(child))
        {
            return;
        }

        if(this._functionStart_ == child)
        {
            this._functionStart_ = null;
            return;
        }

        if(this._dllFunctionToken_ == child)
        {
            this._dllFunctionToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PModifier> i = this._modifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._functionStart_ == oldChild)
        {
            setFunctionStart((TFunctionStart) newChild);
            return;
        }

        if(this._dllFunctionToken_ == oldChild)
        {
            setDllFunctionToken((TDllFunctionToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
