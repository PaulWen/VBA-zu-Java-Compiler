/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AElseIfStm extends PElseIfStm
{
    private TElseIf _elseIf_;
    private PValue _value_;
    private TThen _then_;

    public AElseIfStm()
    {
        // Constructor
    }

    public AElseIfStm(
        @SuppressWarnings("hiding") TElseIf _elseIf_,
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") TThen _then_)
    {
        // Constructor
        setElseIf(_elseIf_);

        setValue(_value_);

        setThen(_then_);

    }

    @Override
    public Object clone()
    {
        return new AElseIfStm(
            cloneNode(this._elseIf_),
            cloneNode(this._value_),
            cloneNode(this._then_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElseIfStm(this);
    }

    public TElseIf getElseIf()
    {
        return this._elseIf_;
    }

    public void setElseIf(TElseIf node)
    {
        if(this._elseIf_ != null)
        {
            this._elseIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseIf_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._elseIf_)
            + toString(this._value_)
            + toString(this._then_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._elseIf_ == child)
        {
            this._elseIf_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._elseIf_ == oldChild)
        {
            setElseIf((TElseIf) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
