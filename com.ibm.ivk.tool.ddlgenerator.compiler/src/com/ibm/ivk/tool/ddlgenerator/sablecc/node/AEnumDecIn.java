/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AEnumDecIn extends PEnumDecIn
{
    private final LinkedList<PModifier> _modifier_ = new LinkedList<PModifier>();
    private TEnumStart _enumStart_;
    private PId _id_;
    private TEndOfLine _endOfLine_;
    private final LinkedList<PEnumValue> _enumValue_ = new LinkedList<PEnumValue>();
    private TEnumEnd _enumEnd_;

    public AEnumDecIn()
    {
        // Constructor
    }

    public AEnumDecIn(
        @SuppressWarnings("hiding") List<PModifier> _modifier_,
        @SuppressWarnings("hiding") TEnumStart _enumStart_,
        @SuppressWarnings("hiding") PId _id_,
        @SuppressWarnings("hiding") TEndOfLine _endOfLine_,
        @SuppressWarnings("hiding") List<PEnumValue> _enumValue_,
        @SuppressWarnings("hiding") TEnumEnd _enumEnd_)
    {
        // Constructor
        setModifier(_modifier_);

        setEnumStart(_enumStart_);

        setId(_id_);

        setEndOfLine(_endOfLine_);

        setEnumValue(_enumValue_);

        setEnumEnd(_enumEnd_);

    }

    @Override
    public Object clone()
    {
        return new AEnumDecIn(
            cloneList(this._modifier_),
            cloneNode(this._enumStart_),
            cloneNode(this._id_),
            cloneNode(this._endOfLine_),
            cloneList(this._enumValue_),
            cloneNode(this._enumEnd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnumDecIn(this);
    }

    public LinkedList<PModifier> getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(List<PModifier> list)
    {
        this._modifier_.clear();
        this._modifier_.addAll(list);
        for(PModifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEnumStart getEnumStart()
    {
        return this._enumStart_;
    }

    public void setEnumStart(TEnumStart node)
    {
        if(this._enumStart_ != null)
        {
            this._enumStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._enumStart_ = node;
    }

    public PId getId()
    {
        return this._id_;
    }

    public void setId(PId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TEndOfLine getEndOfLine()
    {
        return this._endOfLine_;
    }

    public void setEndOfLine(TEndOfLine node)
    {
        if(this._endOfLine_ != null)
        {
            this._endOfLine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endOfLine_ = node;
    }

    public LinkedList<PEnumValue> getEnumValue()
    {
        return this._enumValue_;
    }

    public void setEnumValue(List<PEnumValue> list)
    {
        this._enumValue_.clear();
        this._enumValue_.addAll(list);
        for(PEnumValue e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEnumEnd getEnumEnd()
    {
        return this._enumEnd_;
    }

    public void setEnumEnd(TEnumEnd node)
    {
        if(this._enumEnd_ != null)
        {
            this._enumEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._enumEnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifier_)
            + toString(this._enumStart_)
            + toString(this._id_)
            + toString(this._endOfLine_)
            + toString(this._enumValue_)
            + toString(this._enumEnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifier_.remove(child))
        {
            return;
        }

        if(this._enumStart_ == child)
        {
            this._enumStart_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._endOfLine_ == child)
        {
            this._endOfLine_ = null;
            return;
        }

        if(this._enumValue_.remove(child))
        {
            return;
        }

        if(this._enumEnd_ == child)
        {
            this._enumEnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PModifier> i = this._modifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._enumStart_ == oldChild)
        {
            setEnumStart((TEnumStart) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((PId) newChild);
            return;
        }

        if(this._endOfLine_ == oldChild)
        {
            setEndOfLine((TEndOfLine) newChild);
            return;
        }

        for(ListIterator<PEnumValue> i = this._enumValue_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PEnumValue) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._enumEnd_ == oldChild)
        {
            setEnumEnd((TEnumEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
