/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AForEachStmt extends PForEachStmt
{
    private TForStart _forStart_;
    private TEachStart _eachStart_;
    private PId _id_;
    private TIn _in_;
    private PMethodChaining _list_;
    private TEndOfLine _endOfLine_;
    private final LinkedList<PFunctionStmt> _functionStmt_ = new LinkedList<PFunctionStmt>();
    private TForEnd _forEnd_;
    private PId _variable_;

    public AForEachStmt()
    {
        // Constructor
    }

    public AForEachStmt(
        @SuppressWarnings("hiding") TForStart _forStart_,
        @SuppressWarnings("hiding") TEachStart _eachStart_,
        @SuppressWarnings("hiding") PId _id_,
        @SuppressWarnings("hiding") TIn _in_,
        @SuppressWarnings("hiding") PMethodChaining _list_,
        @SuppressWarnings("hiding") TEndOfLine _endOfLine_,
        @SuppressWarnings("hiding") List<PFunctionStmt> _functionStmt_,
        @SuppressWarnings("hiding") TForEnd _forEnd_,
        @SuppressWarnings("hiding") PId _variable_)
    {
        // Constructor
        setForStart(_forStart_);

        setEachStart(_eachStart_);

        setId(_id_);

        setIn(_in_);

        setList(_list_);

        setEndOfLine(_endOfLine_);

        setFunctionStmt(_functionStmt_);

        setForEnd(_forEnd_);

        setVariable(_variable_);

    }

    @Override
    public Object clone()
    {
        return new AForEachStmt(
            cloneNode(this._forStart_),
            cloneNode(this._eachStart_),
            cloneNode(this._id_),
            cloneNode(this._in_),
            cloneNode(this._list_),
            cloneNode(this._endOfLine_),
            cloneList(this._functionStmt_),
            cloneNode(this._forEnd_),
            cloneNode(this._variable_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForEachStmt(this);
    }

    public TForStart getForStart()
    {
        return this._forStart_;
    }

    public void setForStart(TForStart node)
    {
        if(this._forStart_ != null)
        {
            this._forStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forStart_ = node;
    }

    public TEachStart getEachStart()
    {
        return this._eachStart_;
    }

    public void setEachStart(TEachStart node)
    {
        if(this._eachStart_ != null)
        {
            this._eachStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eachStart_ = node;
    }

    public PId getId()
    {
        return this._id_;
    }

    public void setId(PId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    public PMethodChaining getList()
    {
        return this._list_;
    }

    public void setList(PMethodChaining node)
    {
        if(this._list_ != null)
        {
            this._list_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._list_ = node;
    }

    public TEndOfLine getEndOfLine()
    {
        return this._endOfLine_;
    }

    public void setEndOfLine(TEndOfLine node)
    {
        if(this._endOfLine_ != null)
        {
            this._endOfLine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endOfLine_ = node;
    }

    public LinkedList<PFunctionStmt> getFunctionStmt()
    {
        return this._functionStmt_;
    }

    public void setFunctionStmt(List<PFunctionStmt> list)
    {
        this._functionStmt_.clear();
        this._functionStmt_.addAll(list);
        for(PFunctionStmt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TForEnd getForEnd()
    {
        return this._forEnd_;
    }

    public void setForEnd(TForEnd node)
    {
        if(this._forEnd_ != null)
        {
            this._forEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forEnd_ = node;
    }

    public PId getVariable()
    {
        return this._variable_;
    }

    public void setVariable(PId node)
    {
        if(this._variable_ != null)
        {
            this._variable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variable_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._forStart_)
            + toString(this._eachStart_)
            + toString(this._id_)
            + toString(this._in_)
            + toString(this._list_)
            + toString(this._endOfLine_)
            + toString(this._functionStmt_)
            + toString(this._forEnd_)
            + toString(this._variable_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._forStart_ == child)
        {
            this._forStart_ = null;
            return;
        }

        if(this._eachStart_ == child)
        {
            this._eachStart_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        if(this._list_ == child)
        {
            this._list_ = null;
            return;
        }

        if(this._endOfLine_ == child)
        {
            this._endOfLine_ = null;
            return;
        }

        if(this._functionStmt_.remove(child))
        {
            return;
        }

        if(this._forEnd_ == child)
        {
            this._forEnd_ = null;
            return;
        }

        if(this._variable_ == child)
        {
            this._variable_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._forStart_ == oldChild)
        {
            setForStart((TForStart) newChild);
            return;
        }

        if(this._eachStart_ == oldChild)
        {
            setEachStart((TEachStart) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((PId) newChild);
            return;
        }

        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        if(this._list_ == oldChild)
        {
            setList((PMethodChaining) newChild);
            return;
        }

        if(this._endOfLine_ == oldChild)
        {
            setEndOfLine((TEndOfLine) newChild);
            return;
        }

        for(ListIterator<PFunctionStmt> i = this._functionStmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFunctionStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._forEnd_ == oldChild)
        {
            setForEnd((TForEnd) newChild);
            return;
        }

        if(this._variable_ == oldChild)
        {
            setVariable((PId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
