/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AFormatFunction extends PFormatFunction
{
    private TFormat _format_;
    private TOpenParen _openParen_;
    private PNowFunction _nowFunction_;
    private TComma _comma_;
    private PStringValue _formatValue_;
    private TCloseParen _closeParen_;

    public AFormatFunction()
    {
        // Constructor
    }

    public AFormatFunction(
        @SuppressWarnings("hiding") TFormat _format_,
        @SuppressWarnings("hiding") TOpenParen _openParen_,
        @SuppressWarnings("hiding") PNowFunction _nowFunction_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PStringValue _formatValue_,
        @SuppressWarnings("hiding") TCloseParen _closeParen_)
    {
        // Constructor
        setFormat(_format_);

        setOpenParen(_openParen_);

        setNowFunction(_nowFunction_);

        setComma(_comma_);

        setFormatValue(_formatValue_);

        setCloseParen(_closeParen_);

    }

    @Override
    public Object clone()
    {
        return new AFormatFunction(
            cloneNode(this._format_),
            cloneNode(this._openParen_),
            cloneNode(this._nowFunction_),
            cloneNode(this._comma_),
            cloneNode(this._formatValue_),
            cloneNode(this._closeParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormatFunction(this);
    }

    public TFormat getFormat()
    {
        return this._format_;
    }

    public void setFormat(TFormat node)
    {
        if(this._format_ != null)
        {
            this._format_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._format_ = node;
    }

    public TOpenParen getOpenParen()
    {
        return this._openParen_;
    }

    public void setOpenParen(TOpenParen node)
    {
        if(this._openParen_ != null)
        {
            this._openParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openParen_ = node;
    }

    public PNowFunction getNowFunction()
    {
        return this._nowFunction_;
    }

    public void setNowFunction(PNowFunction node)
    {
        if(this._nowFunction_ != null)
        {
            this._nowFunction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nowFunction_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PStringValue getFormatValue()
    {
        return this._formatValue_;
    }

    public void setFormatValue(PStringValue node)
    {
        if(this._formatValue_ != null)
        {
            this._formatValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formatValue_ = node;
    }

    public TCloseParen getCloseParen()
    {
        return this._closeParen_;
    }

    public void setCloseParen(TCloseParen node)
    {
        if(this._closeParen_ != null)
        {
            this._closeParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._format_)
            + toString(this._openParen_)
            + toString(this._nowFunction_)
            + toString(this._comma_)
            + toString(this._formatValue_)
            + toString(this._closeParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._format_ == child)
        {
            this._format_ = null;
            return;
        }

        if(this._openParen_ == child)
        {
            this._openParen_ = null;
            return;
        }

        if(this._nowFunction_ == child)
        {
            this._nowFunction_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._formatValue_ == child)
        {
            this._formatValue_ = null;
            return;
        }

        if(this._closeParen_ == child)
        {
            this._closeParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._format_ == oldChild)
        {
            setFormat((TFormat) newChild);
            return;
        }

        if(this._openParen_ == oldChild)
        {
            setOpenParen((TOpenParen) newChild);
            return;
        }

        if(this._nowFunction_ == oldChild)
        {
            setNowFunction((PNowFunction) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._formatValue_ == oldChild)
        {
            setFormatValue((PStringValue) newChild);
            return;
        }

        if(this._closeParen_ == oldChild)
        {
            setCloseParen((TCloseParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
