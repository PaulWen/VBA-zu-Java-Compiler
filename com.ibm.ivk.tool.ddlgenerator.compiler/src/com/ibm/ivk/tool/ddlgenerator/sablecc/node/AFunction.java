/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AFunction extends PFunction
{
    private final LinkedList<PModifier> _modifier_ = new LinkedList<PModifier>();
    private TFunctionStart _functionStart_;
    private PId _id_;
    private PParamList _paramList_;
    private TAs _as_;
    private PDataType _dataType_;
    private TEndOfLine _endOfLine_;
    private final LinkedList<PFunctionStmt> _functionStmt_ = new LinkedList<PFunctionStmt>();
    private TFunctionEnd _functionEnd_;

    public AFunction()
    {
        // Constructor
    }

    public AFunction(
        @SuppressWarnings("hiding") List<PModifier> _modifier_,
        @SuppressWarnings("hiding") TFunctionStart _functionStart_,
        @SuppressWarnings("hiding") PId _id_,
        @SuppressWarnings("hiding") PParamList _paramList_,
        @SuppressWarnings("hiding") TAs _as_,
        @SuppressWarnings("hiding") PDataType _dataType_,
        @SuppressWarnings("hiding") TEndOfLine _endOfLine_,
        @SuppressWarnings("hiding") List<PFunctionStmt> _functionStmt_,
        @SuppressWarnings("hiding") TFunctionEnd _functionEnd_)
    {
        // Constructor
        setModifier(_modifier_);

        setFunctionStart(_functionStart_);

        setId(_id_);

        setParamList(_paramList_);

        setAs(_as_);

        setDataType(_dataType_);

        setEndOfLine(_endOfLine_);

        setFunctionStmt(_functionStmt_);

        setFunctionEnd(_functionEnd_);

    }

    @Override
    public Object clone()
    {
        return new AFunction(
            cloneList(this._modifier_),
            cloneNode(this._functionStart_),
            cloneNode(this._id_),
            cloneNode(this._paramList_),
            cloneNode(this._as_),
            cloneNode(this._dataType_),
            cloneNode(this._endOfLine_),
            cloneList(this._functionStmt_),
            cloneNode(this._functionEnd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunction(this);
    }

    public LinkedList<PModifier> getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(List<PModifier> list)
    {
        this._modifier_.clear();
        this._modifier_.addAll(list);
        for(PModifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TFunctionStart getFunctionStart()
    {
        return this._functionStart_;
    }

    public void setFunctionStart(TFunctionStart node)
    {
        if(this._functionStart_ != null)
        {
            this._functionStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionStart_ = node;
    }

    public PId getId()
    {
        return this._id_;
    }

    public void setId(PId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PParamList getParamList()
    {
        return this._paramList_;
    }

    public void setParamList(PParamList node)
    {
        if(this._paramList_ != null)
        {
            this._paramList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramList_ = node;
    }

    public TAs getAs()
    {
        return this._as_;
    }

    public void setAs(TAs node)
    {
        if(this._as_ != null)
        {
            this._as_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._as_ = node;
    }

    public PDataType getDataType()
    {
        return this._dataType_;
    }

    public void setDataType(PDataType node)
    {
        if(this._dataType_ != null)
        {
            this._dataType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataType_ = node;
    }

    public TEndOfLine getEndOfLine()
    {
        return this._endOfLine_;
    }

    public void setEndOfLine(TEndOfLine node)
    {
        if(this._endOfLine_ != null)
        {
            this._endOfLine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endOfLine_ = node;
    }

    public LinkedList<PFunctionStmt> getFunctionStmt()
    {
        return this._functionStmt_;
    }

    public void setFunctionStmt(List<PFunctionStmt> list)
    {
        this._functionStmt_.clear();
        this._functionStmt_.addAll(list);
        for(PFunctionStmt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TFunctionEnd getFunctionEnd()
    {
        return this._functionEnd_;
    }

    public void setFunctionEnd(TFunctionEnd node)
    {
        if(this._functionEnd_ != null)
        {
            this._functionEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functionEnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifier_)
            + toString(this._functionStart_)
            + toString(this._id_)
            + toString(this._paramList_)
            + toString(this._as_)
            + toString(this._dataType_)
            + toString(this._endOfLine_)
            + toString(this._functionStmt_)
            + toString(this._functionEnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifier_.remove(child))
        {
            return;
        }

        if(this._functionStart_ == child)
        {
            this._functionStart_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._paramList_ == child)
        {
            this._paramList_ = null;
            return;
        }

        if(this._as_ == child)
        {
            this._as_ = null;
            return;
        }

        if(this._dataType_ == child)
        {
            this._dataType_ = null;
            return;
        }

        if(this._endOfLine_ == child)
        {
            this._endOfLine_ = null;
            return;
        }

        if(this._functionStmt_.remove(child))
        {
            return;
        }

        if(this._functionEnd_ == child)
        {
            this._functionEnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PModifier> i = this._modifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._functionStart_ == oldChild)
        {
            setFunctionStart((TFunctionStart) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((PId) newChild);
            return;
        }

        if(this._paramList_ == oldChild)
        {
            setParamList((PParamList) newChild);
            return;
        }

        if(this._as_ == oldChild)
        {
            setAs((TAs) newChild);
            return;
        }

        if(this._dataType_ == oldChild)
        {
            setDataType((PDataType) newChild);
            return;
        }

        if(this._endOfLine_ == oldChild)
        {
            setEndOfLine((TEndOfLine) newChild);
            return;
        }

        for(ListIterator<PFunctionStmt> i = this._functionStmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFunctionStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._functionEnd_ == oldChild)
        {
            setFunctionEnd((TFunctionEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
