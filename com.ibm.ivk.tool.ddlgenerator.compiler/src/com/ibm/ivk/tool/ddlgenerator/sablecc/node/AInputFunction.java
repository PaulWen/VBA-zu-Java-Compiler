/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AInputFunction extends PInputFunction
{
    private TInput _input_;
    private TOpenParen _openParen_;
    private PLofFunction _lofFunction_;
    private TComma _comma_;
    private PMethodChaining _fileNumber_;
    private TCloseParen _closeParen_;

    public AInputFunction()
    {
        // Constructor
    }

    public AInputFunction(
        @SuppressWarnings("hiding") TInput _input_,
        @SuppressWarnings("hiding") TOpenParen _openParen_,
        @SuppressWarnings("hiding") PLofFunction _lofFunction_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PMethodChaining _fileNumber_,
        @SuppressWarnings("hiding") TCloseParen _closeParen_)
    {
        // Constructor
        setInput(_input_);

        setOpenParen(_openParen_);

        setLofFunction(_lofFunction_);

        setComma(_comma_);

        setFileNumber(_fileNumber_);

        setCloseParen(_closeParen_);

    }

    @Override
    public Object clone()
    {
        return new AInputFunction(
            cloneNode(this._input_),
            cloneNode(this._openParen_),
            cloneNode(this._lofFunction_),
            cloneNode(this._comma_),
            cloneNode(this._fileNumber_),
            cloneNode(this._closeParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInputFunction(this);
    }

    public TInput getInput()
    {
        return this._input_;
    }

    public void setInput(TInput node)
    {
        if(this._input_ != null)
        {
            this._input_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._input_ = node;
    }

    public TOpenParen getOpenParen()
    {
        return this._openParen_;
    }

    public void setOpenParen(TOpenParen node)
    {
        if(this._openParen_ != null)
        {
            this._openParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openParen_ = node;
    }

    public PLofFunction getLofFunction()
    {
        return this._lofFunction_;
    }

    public void setLofFunction(PLofFunction node)
    {
        if(this._lofFunction_ != null)
        {
            this._lofFunction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lofFunction_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PMethodChaining getFileNumber()
    {
        return this._fileNumber_;
    }

    public void setFileNumber(PMethodChaining node)
    {
        if(this._fileNumber_ != null)
        {
            this._fileNumber_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fileNumber_ = node;
    }

    public TCloseParen getCloseParen()
    {
        return this._closeParen_;
    }

    public void setCloseParen(TCloseParen node)
    {
        if(this._closeParen_ != null)
        {
            this._closeParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._input_)
            + toString(this._openParen_)
            + toString(this._lofFunction_)
            + toString(this._comma_)
            + toString(this._fileNumber_)
            + toString(this._closeParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._input_ == child)
        {
            this._input_ = null;
            return;
        }

        if(this._openParen_ == child)
        {
            this._openParen_ = null;
            return;
        }

        if(this._lofFunction_ == child)
        {
            this._lofFunction_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._fileNumber_ == child)
        {
            this._fileNumber_ = null;
            return;
        }

        if(this._closeParen_ == child)
        {
            this._closeParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._input_ == oldChild)
        {
            setInput((TInput) newChild);
            return;
        }

        if(this._openParen_ == oldChild)
        {
            setOpenParen((TOpenParen) newChild);
            return;
        }

        if(this._lofFunction_ == oldChild)
        {
            setLofFunction((PLofFunction) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._fileNumber_ == oldChild)
        {
            setFileNumber((PMethodChaining) newChild);
            return;
        }

        if(this._closeParen_ == oldChild)
        {
            setCloseParen((TCloseParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
