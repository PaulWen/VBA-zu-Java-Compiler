/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ALeftFunctionStringValueWithoutParens extends PStringValueWithoutParens
{
    private PLeftFunction _leftFunction_;

    public ALeftFunctionStringValueWithoutParens()
    {
        // Constructor
    }

    public ALeftFunctionStringValueWithoutParens(
        @SuppressWarnings("hiding") PLeftFunction _leftFunction_)
    {
        // Constructor
        setLeftFunction(_leftFunction_);

    }

    @Override
    public Object clone()
    {
        return new ALeftFunctionStringValueWithoutParens(
            cloneNode(this._leftFunction_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALeftFunctionStringValueWithoutParens(this);
    }

    public PLeftFunction getLeftFunction()
    {
        return this._leftFunction_;
    }

    public void setLeftFunction(PLeftFunction node)
    {
        if(this._leftFunction_ != null)
        {
            this._leftFunction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftFunction_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leftFunction_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leftFunction_ == child)
        {
            this._leftFunction_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leftFunction_ == oldChild)
        {
            setLeftFunction((PLeftFunction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
