/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AMethodCallWithoutParens extends PMethodCallWithoutParens
{
    private PMethodChaining _methodChaining_;
    private PParamCallListWithoutParens _paramCallListWithoutParens_;

    public AMethodCallWithoutParens()
    {
        // Constructor
    }

    public AMethodCallWithoutParens(
        @SuppressWarnings("hiding") PMethodChaining _methodChaining_,
        @SuppressWarnings("hiding") PParamCallListWithoutParens _paramCallListWithoutParens_)
    {
        // Constructor
        setMethodChaining(_methodChaining_);

        setParamCallListWithoutParens(_paramCallListWithoutParens_);

    }

    @Override
    public Object clone()
    {
        return new AMethodCallWithoutParens(
            cloneNode(this._methodChaining_),
            cloneNode(this._paramCallListWithoutParens_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodCallWithoutParens(this);
    }

    public PMethodChaining getMethodChaining()
    {
        return this._methodChaining_;
    }

    public void setMethodChaining(PMethodChaining node)
    {
        if(this._methodChaining_ != null)
        {
            this._methodChaining_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodChaining_ = node;
    }

    public PParamCallListWithoutParens getParamCallListWithoutParens()
    {
        return this._paramCallListWithoutParens_;
    }

    public void setParamCallListWithoutParens(PParamCallListWithoutParens node)
    {
        if(this._paramCallListWithoutParens_ != null)
        {
            this._paramCallListWithoutParens_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramCallListWithoutParens_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._methodChaining_)
            + toString(this._paramCallListWithoutParens_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._methodChaining_ == child)
        {
            this._methodChaining_ = null;
            return;
        }

        if(this._paramCallListWithoutParens_ == child)
        {
            this._paramCallListWithoutParens_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._methodChaining_ == oldChild)
        {
            setMethodChaining((PMethodChaining) newChild);
            return;
        }

        if(this._paramCallListWithoutParens_ == oldChild)
        {
            setParamCallListWithoutParens((PParamCallListWithoutParens) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
