/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AMethodChaining extends PMethodChaining
{
    private PMethodChainingPart _first_;
    private final LinkedList<PMethodChainingPart> _methodChainingPart_ = new LinkedList<PMethodChainingPart>();
    private PMethodChainingValue _methodChainingValue_;

    public AMethodChaining()
    {
        // Constructor
    }

    public AMethodChaining(
        @SuppressWarnings("hiding") PMethodChainingPart _first_,
        @SuppressWarnings("hiding") List<PMethodChainingPart> _methodChainingPart_,
        @SuppressWarnings("hiding") PMethodChainingValue _methodChainingValue_)
    {
        // Constructor
        setFirst(_first_);

        setMethodChainingPart(_methodChainingPart_);

        setMethodChainingValue(_methodChainingValue_);

    }

    @Override
    public Object clone()
    {
        return new AMethodChaining(
            cloneNode(this._first_),
            cloneList(this._methodChainingPart_),
            cloneNode(this._methodChainingValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodChaining(this);
    }

    public PMethodChainingPart getFirst()
    {
        return this._first_;
    }

    public void setFirst(PMethodChainingPart node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public LinkedList<PMethodChainingPart> getMethodChainingPart()
    {
        return this._methodChainingPart_;
    }

    public void setMethodChainingPart(List<PMethodChainingPart> list)
    {
        this._methodChainingPart_.clear();
        this._methodChainingPart_.addAll(list);
        for(PMethodChainingPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PMethodChainingValue getMethodChainingValue()
    {
        return this._methodChainingValue_;
    }

    public void setMethodChainingValue(PMethodChainingValue node)
    {
        if(this._methodChainingValue_ != null)
        {
            this._methodChainingValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodChainingValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._first_)
            + toString(this._methodChainingPart_)
            + toString(this._methodChainingValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._methodChainingPart_.remove(child))
        {
            return;
        }

        if(this._methodChainingValue_ == child)
        {
            this._methodChainingValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._first_ == oldChild)
        {
            setFirst((PMethodChainingPart) newChild);
            return;
        }

        for(ListIterator<PMethodChainingPart> i = this._methodChainingPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethodChainingPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._methodChainingValue_ == oldChild)
        {
            setMethodChainingValue((PMethodChainingValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
