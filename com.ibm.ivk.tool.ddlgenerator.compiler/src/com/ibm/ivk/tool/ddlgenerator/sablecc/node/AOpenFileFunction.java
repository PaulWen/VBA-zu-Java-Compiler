/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AOpenFileFunction extends POpenFileFunction
{
    private TOpenFile _openFile_;
    private PId _fileName_;
    private TForStart _forStart_;
    private POpenFileMode _openFileMode_;
    private PId _fileNumber_;

    public AOpenFileFunction()
    {
        // Constructor
    }

    public AOpenFileFunction(
        @SuppressWarnings("hiding") TOpenFile _openFile_,
        @SuppressWarnings("hiding") PId _fileName_,
        @SuppressWarnings("hiding") TForStart _forStart_,
        @SuppressWarnings("hiding") POpenFileMode _openFileMode_,
        @SuppressWarnings("hiding") PId _fileNumber_)
    {
        // Constructor
        setOpenFile(_openFile_);

        setFileName(_fileName_);

        setForStart(_forStart_);

        setOpenFileMode(_openFileMode_);

        setFileNumber(_fileNumber_);

    }

    @Override
    public Object clone()
    {
        return new AOpenFileFunction(
            cloneNode(this._openFile_),
            cloneNode(this._fileName_),
            cloneNode(this._forStart_),
            cloneNode(this._openFileMode_),
            cloneNode(this._fileNumber_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOpenFileFunction(this);
    }

    public TOpenFile getOpenFile()
    {
        return this._openFile_;
    }

    public void setOpenFile(TOpenFile node)
    {
        if(this._openFile_ != null)
        {
            this._openFile_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openFile_ = node;
    }

    public PId getFileName()
    {
        return this._fileName_;
    }

    public void setFileName(PId node)
    {
        if(this._fileName_ != null)
        {
            this._fileName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fileName_ = node;
    }

    public TForStart getForStart()
    {
        return this._forStart_;
    }

    public void setForStart(TForStart node)
    {
        if(this._forStart_ != null)
        {
            this._forStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forStart_ = node;
    }

    public POpenFileMode getOpenFileMode()
    {
        return this._openFileMode_;
    }

    public void setOpenFileMode(POpenFileMode node)
    {
        if(this._openFileMode_ != null)
        {
            this._openFileMode_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openFileMode_ = node;
    }

    public PId getFileNumber()
    {
        return this._fileNumber_;
    }

    public void setFileNumber(PId node)
    {
        if(this._fileNumber_ != null)
        {
            this._fileNumber_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fileNumber_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._openFile_)
            + toString(this._fileName_)
            + toString(this._forStart_)
            + toString(this._openFileMode_)
            + toString(this._fileNumber_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._openFile_ == child)
        {
            this._openFile_ = null;
            return;
        }

        if(this._fileName_ == child)
        {
            this._fileName_ = null;
            return;
        }

        if(this._forStart_ == child)
        {
            this._forStart_ = null;
            return;
        }

        if(this._openFileMode_ == child)
        {
            this._openFileMode_ = null;
            return;
        }

        if(this._fileNumber_ == child)
        {
            this._fileNumber_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._openFile_ == oldChild)
        {
            setOpenFile((TOpenFile) newChild);
            return;
        }

        if(this._fileName_ == oldChild)
        {
            setFileName((PId) newChild);
            return;
        }

        if(this._forStart_ == oldChild)
        {
            setForStart((TForStart) newChild);
            return;
        }

        if(this._openFileMode_ == oldChild)
        {
            setOpenFileMode((POpenFileMode) newChild);
            return;
        }

        if(this._fileNumber_ == oldChild)
        {
            setFileNumber((PId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
