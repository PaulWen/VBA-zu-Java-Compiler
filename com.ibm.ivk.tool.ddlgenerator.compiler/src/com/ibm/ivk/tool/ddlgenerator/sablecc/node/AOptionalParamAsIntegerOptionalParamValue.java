/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AOptionalParamAsIntegerOptionalParamValue extends POptionalParamValue
{
    private TOptional _optional_;
    private final LinkedList<PModifier> _modifier_ = new LinkedList<PModifier>();
    private PId _id_;
    private TAs _as_;
    private TInteger _integer_;

    public AOptionalParamAsIntegerOptionalParamValue()
    {
        // Constructor
    }

    public AOptionalParamAsIntegerOptionalParamValue(
        @SuppressWarnings("hiding") TOptional _optional_,
        @SuppressWarnings("hiding") List<PModifier> _modifier_,
        @SuppressWarnings("hiding") PId _id_,
        @SuppressWarnings("hiding") TAs _as_,
        @SuppressWarnings("hiding") TInteger _integer_)
    {
        // Constructor
        setOptional(_optional_);

        setModifier(_modifier_);

        setId(_id_);

        setAs(_as_);

        setInteger(_integer_);

    }

    @Override
    public Object clone()
    {
        return new AOptionalParamAsIntegerOptionalParamValue(
            cloneNode(this._optional_),
            cloneList(this._modifier_),
            cloneNode(this._id_),
            cloneNode(this._as_),
            cloneNode(this._integer_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOptionalParamAsIntegerOptionalParamValue(this);
    }

    public TOptional getOptional()
    {
        return this._optional_;
    }

    public void setOptional(TOptional node)
    {
        if(this._optional_ != null)
        {
            this._optional_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._optional_ = node;
    }

    public LinkedList<PModifier> getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(List<PModifier> list)
    {
        this._modifier_.clear();
        this._modifier_.addAll(list);
        for(PModifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PId getId()
    {
        return this._id_;
    }

    public void setId(PId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TAs getAs()
    {
        return this._as_;
    }

    public void setAs(TAs node)
    {
        if(this._as_ != null)
        {
            this._as_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._as_ = node;
    }

    public TInteger getInteger()
    {
        return this._integer_;
    }

    public void setInteger(TInteger node)
    {
        if(this._integer_ != null)
        {
            this._integer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._integer_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._optional_)
            + toString(this._modifier_)
            + toString(this._id_)
            + toString(this._as_)
            + toString(this._integer_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._optional_ == child)
        {
            this._optional_ = null;
            return;
        }

        if(this._modifier_.remove(child))
        {
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._as_ == child)
        {
            this._as_ = null;
            return;
        }

        if(this._integer_ == child)
        {
            this._integer_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._optional_ == oldChild)
        {
            setOptional((TOptional) newChild);
            return;
        }

        for(ListIterator<PModifier> i = this._modifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._id_ == oldChild)
        {
            setId((PId) newChild);
            return;
        }

        if(this._as_ == oldChild)
        {
            setAs((TAs) newChild);
            return;
        }

        if(this._integer_ == oldChild)
        {
            setInteger((TInteger) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
