/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AParamCallListWithoutParens extends PParamCallListWithoutParens
{
    private final LinkedList<PParamCallListWithoutParensPart> _paramCallListWithoutParensPart_ = new LinkedList<PParamCallListWithoutParensPart>();
    private PParamCallListWithoutParensValue _paramCallListWithoutParensValue_;

    public AParamCallListWithoutParens()
    {
        // Constructor
    }

    public AParamCallListWithoutParens(
        @SuppressWarnings("hiding") List<PParamCallListWithoutParensPart> _paramCallListWithoutParensPart_,
        @SuppressWarnings("hiding") PParamCallListWithoutParensValue _paramCallListWithoutParensValue_)
    {
        // Constructor
        setParamCallListWithoutParensPart(_paramCallListWithoutParensPart_);

        setParamCallListWithoutParensValue(_paramCallListWithoutParensValue_);

    }

    @Override
    public Object clone()
    {
        return new AParamCallListWithoutParens(
            cloneList(this._paramCallListWithoutParensPart_),
            cloneNode(this._paramCallListWithoutParensValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParamCallListWithoutParens(this);
    }

    public LinkedList<PParamCallListWithoutParensPart> getParamCallListWithoutParensPart()
    {
        return this._paramCallListWithoutParensPart_;
    }

    public void setParamCallListWithoutParensPart(List<PParamCallListWithoutParensPart> list)
    {
        this._paramCallListWithoutParensPart_.clear();
        this._paramCallListWithoutParensPart_.addAll(list);
        for(PParamCallListWithoutParensPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PParamCallListWithoutParensValue getParamCallListWithoutParensValue()
    {
        return this._paramCallListWithoutParensValue_;
    }

    public void setParamCallListWithoutParensValue(PParamCallListWithoutParensValue node)
    {
        if(this._paramCallListWithoutParensValue_ != null)
        {
            this._paramCallListWithoutParensValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramCallListWithoutParensValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._paramCallListWithoutParensPart_)
            + toString(this._paramCallListWithoutParensValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._paramCallListWithoutParensPart_.remove(child))
        {
            return;
        }

        if(this._paramCallListWithoutParensValue_ == child)
        {
            this._paramCallListWithoutParensValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PParamCallListWithoutParensPart> i = this._paramCallListWithoutParensPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParamCallListWithoutParensPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._paramCallListWithoutParensValue_ == oldChild)
        {
            setParamCallListWithoutParensValue((PParamCallListWithoutParensValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
