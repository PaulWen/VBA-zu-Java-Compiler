/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ARangeArrayDec extends PArrayDec
{
    private PModifierId _modifierId_;
    private TOpenParen _openParen_;
    private PValue _smallest_;
    private TTo _to_;
    private PValue _largest_;
    private TCloseParen _closeParen_;
    private TAs _as_;
    private PDataType _dataType_;

    public ARangeArrayDec()
    {
        // Constructor
    }

    public ARangeArrayDec(
        @SuppressWarnings("hiding") PModifierId _modifierId_,
        @SuppressWarnings("hiding") TOpenParen _openParen_,
        @SuppressWarnings("hiding") PValue _smallest_,
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") PValue _largest_,
        @SuppressWarnings("hiding") TCloseParen _closeParen_,
        @SuppressWarnings("hiding") TAs _as_,
        @SuppressWarnings("hiding") PDataType _dataType_)
    {
        // Constructor
        setModifierId(_modifierId_);

        setOpenParen(_openParen_);

        setSmallest(_smallest_);

        setTo(_to_);

        setLargest(_largest_);

        setCloseParen(_closeParen_);

        setAs(_as_);

        setDataType(_dataType_);

    }

    @Override
    public Object clone()
    {
        return new ARangeArrayDec(
            cloneNode(this._modifierId_),
            cloneNode(this._openParen_),
            cloneNode(this._smallest_),
            cloneNode(this._to_),
            cloneNode(this._largest_),
            cloneNode(this._closeParen_),
            cloneNode(this._as_),
            cloneNode(this._dataType_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARangeArrayDec(this);
    }

    public PModifierId getModifierId()
    {
        return this._modifierId_;
    }

    public void setModifierId(PModifierId node)
    {
        if(this._modifierId_ != null)
        {
            this._modifierId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modifierId_ = node;
    }

    public TOpenParen getOpenParen()
    {
        return this._openParen_;
    }

    public void setOpenParen(TOpenParen node)
    {
        if(this._openParen_ != null)
        {
            this._openParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openParen_ = node;
    }

    public PValue getSmallest()
    {
        return this._smallest_;
    }

    public void setSmallest(PValue node)
    {
        if(this._smallest_ != null)
        {
            this._smallest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._smallest_ = node;
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PValue getLargest()
    {
        return this._largest_;
    }

    public void setLargest(PValue node)
    {
        if(this._largest_ != null)
        {
            this._largest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._largest_ = node;
    }

    public TCloseParen getCloseParen()
    {
        return this._closeParen_;
    }

    public void setCloseParen(TCloseParen node)
    {
        if(this._closeParen_ != null)
        {
            this._closeParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeParen_ = node;
    }

    public TAs getAs()
    {
        return this._as_;
    }

    public void setAs(TAs node)
    {
        if(this._as_ != null)
        {
            this._as_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._as_ = node;
    }

    public PDataType getDataType()
    {
        return this._dataType_;
    }

    public void setDataType(PDataType node)
    {
        if(this._dataType_ != null)
        {
            this._dataType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifierId_)
            + toString(this._openParen_)
            + toString(this._smallest_)
            + toString(this._to_)
            + toString(this._largest_)
            + toString(this._closeParen_)
            + toString(this._as_)
            + toString(this._dataType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifierId_ == child)
        {
            this._modifierId_ = null;
            return;
        }

        if(this._openParen_ == child)
        {
            this._openParen_ = null;
            return;
        }

        if(this._smallest_ == child)
        {
            this._smallest_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._largest_ == child)
        {
            this._largest_ = null;
            return;
        }

        if(this._closeParen_ == child)
        {
            this._closeParen_ = null;
            return;
        }

        if(this._as_ == child)
        {
            this._as_ = null;
            return;
        }

        if(this._dataType_ == child)
        {
            this._dataType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._modifierId_ == oldChild)
        {
            setModifierId((PModifierId) newChild);
            return;
        }

        if(this._openParen_ == oldChild)
        {
            setOpenParen((TOpenParen) newChild);
            return;
        }

        if(this._smallest_ == oldChild)
        {
            setSmallest((PValue) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._largest_ == oldChild)
        {
            setLargest((PValue) newChild);
            return;
        }

        if(this._closeParen_ == oldChild)
        {
            setCloseParen((TCloseParen) newChild);
            return;
        }

        if(this._as_ == oldChild)
        {
            setAs((TAs) newChild);
            return;
        }

        if(this._dataType_ == oldChild)
        {
            setDataType((PDataType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
