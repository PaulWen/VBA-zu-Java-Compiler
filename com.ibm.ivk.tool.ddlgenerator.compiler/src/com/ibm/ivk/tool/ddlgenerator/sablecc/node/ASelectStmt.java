/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASelectStmt extends PSelectStmt
{
    private TSelectStart _selectStart_;
    private PValue _value_;
    private TEndOfLine _endOfLine_;
    private final LinkedList<PSelectCaseStmt> _selectCaseStmt_ = new LinkedList<PSelectCaseStmt>();
    private TSelectEnd _selectEnd_;

    public ASelectStmt()
    {
        // Constructor
    }

    public ASelectStmt(
        @SuppressWarnings("hiding") TSelectStart _selectStart_,
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") TEndOfLine _endOfLine_,
        @SuppressWarnings("hiding") List<PSelectCaseStmt> _selectCaseStmt_,
        @SuppressWarnings("hiding") TSelectEnd _selectEnd_)
    {
        // Constructor
        setSelectStart(_selectStart_);

        setValue(_value_);

        setEndOfLine(_endOfLine_);

        setSelectCaseStmt(_selectCaseStmt_);

        setSelectEnd(_selectEnd_);

    }

    @Override
    public Object clone()
    {
        return new ASelectStmt(
            cloneNode(this._selectStart_),
            cloneNode(this._value_),
            cloneNode(this._endOfLine_),
            cloneList(this._selectCaseStmt_),
            cloneNode(this._selectEnd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASelectStmt(this);
    }

    public TSelectStart getSelectStart()
    {
        return this._selectStart_;
    }

    public void setSelectStart(TSelectStart node)
    {
        if(this._selectStart_ != null)
        {
            this._selectStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._selectStart_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public TEndOfLine getEndOfLine()
    {
        return this._endOfLine_;
    }

    public void setEndOfLine(TEndOfLine node)
    {
        if(this._endOfLine_ != null)
        {
            this._endOfLine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endOfLine_ = node;
    }

    public LinkedList<PSelectCaseStmt> getSelectCaseStmt()
    {
        return this._selectCaseStmt_;
    }

    public void setSelectCaseStmt(List<PSelectCaseStmt> list)
    {
        this._selectCaseStmt_.clear();
        this._selectCaseStmt_.addAll(list);
        for(PSelectCaseStmt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TSelectEnd getSelectEnd()
    {
        return this._selectEnd_;
    }

    public void setSelectEnd(TSelectEnd node)
    {
        if(this._selectEnd_ != null)
        {
            this._selectEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._selectEnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._selectStart_)
            + toString(this._value_)
            + toString(this._endOfLine_)
            + toString(this._selectCaseStmt_)
            + toString(this._selectEnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._selectStart_ == child)
        {
            this._selectStart_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._endOfLine_ == child)
        {
            this._endOfLine_ = null;
            return;
        }

        if(this._selectCaseStmt_.remove(child))
        {
            return;
        }

        if(this._selectEnd_ == child)
        {
            this._selectEnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._selectStart_ == oldChild)
        {
            setSelectStart((TSelectStart) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(this._endOfLine_ == oldChild)
        {
            setEndOfLine((TEndOfLine) newChild);
            return;
        }

        for(ListIterator<PSelectCaseStmt> i = this._selectCaseStmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSelectCaseStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._selectEnd_ == oldChild)
        {
            setSelectEnd((TSelectEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
