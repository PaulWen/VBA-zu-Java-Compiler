/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AShortIfStmt extends PShortIfStmt
{
    private TShortIf _shortIf_;
    private TOpenParen _openParen_;
    private PValue _value_;
    private TComma _a_;
    private PValue _true_;
    private TComma _b_;
    private PValue _false_;
    private TCloseParen _closeParen_;

    public AShortIfStmt()
    {
        // Constructor
    }

    public AShortIfStmt(
        @SuppressWarnings("hiding") TShortIf _shortIf_,
        @SuppressWarnings("hiding") TOpenParen _openParen_,
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") TComma _a_,
        @SuppressWarnings("hiding") PValue _true_,
        @SuppressWarnings("hiding") TComma _b_,
        @SuppressWarnings("hiding") PValue _false_,
        @SuppressWarnings("hiding") TCloseParen _closeParen_)
    {
        // Constructor
        setShortIf(_shortIf_);

        setOpenParen(_openParen_);

        setValue(_value_);

        setA(_a_);

        setTrue(_true_);

        setB(_b_);

        setFalse(_false_);

        setCloseParen(_closeParen_);

    }

    @Override
    public Object clone()
    {
        return new AShortIfStmt(
            cloneNode(this._shortIf_),
            cloneNode(this._openParen_),
            cloneNode(this._value_),
            cloneNode(this._a_),
            cloneNode(this._true_),
            cloneNode(this._b_),
            cloneNode(this._false_),
            cloneNode(this._closeParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAShortIfStmt(this);
    }

    public TShortIf getShortIf()
    {
        return this._shortIf_;
    }

    public void setShortIf(TShortIf node)
    {
        if(this._shortIf_ != null)
        {
            this._shortIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shortIf_ = node;
    }

    public TOpenParen getOpenParen()
    {
        return this._openParen_;
    }

    public void setOpenParen(TOpenParen node)
    {
        if(this._openParen_ != null)
        {
            this._openParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openParen_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public TComma getA()
    {
        return this._a_;
    }

    public void setA(TComma node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PValue getTrue()
    {
        return this._true_;
    }

    public void setTrue(PValue node)
    {
        if(this._true_ != null)
        {
            this._true_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._true_ = node;
    }

    public TComma getB()
    {
        return this._b_;
    }

    public void setB(TComma node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    public PValue getFalse()
    {
        return this._false_;
    }

    public void setFalse(PValue node)
    {
        if(this._false_ != null)
        {
            this._false_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._false_ = node;
    }

    public TCloseParen getCloseParen()
    {
        return this._closeParen_;
    }

    public void setCloseParen(TCloseParen node)
    {
        if(this._closeParen_ != null)
        {
            this._closeParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._shortIf_)
            + toString(this._openParen_)
            + toString(this._value_)
            + toString(this._a_)
            + toString(this._true_)
            + toString(this._b_)
            + toString(this._false_)
            + toString(this._closeParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._shortIf_ == child)
        {
            this._shortIf_ = null;
            return;
        }

        if(this._openParen_ == child)
        {
            this._openParen_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._true_ == child)
        {
            this._true_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        if(this._false_ == child)
        {
            this._false_ = null;
            return;
        }

        if(this._closeParen_ == child)
        {
            this._closeParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._shortIf_ == oldChild)
        {
            setShortIf((TShortIf) newChild);
            return;
        }

        if(this._openParen_ == oldChild)
        {
            setOpenParen((TOpenParen) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((TComma) newChild);
            return;
        }

        if(this._true_ == oldChild)
        {
            setTrue((PValue) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((TComma) newChild);
            return;
        }

        if(this._false_ == oldChild)
        {
            setFalse((PValue) newChild);
            return;
        }

        if(this._closeParen_ == oldChild)
        {
            setCloseParen((TCloseParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
