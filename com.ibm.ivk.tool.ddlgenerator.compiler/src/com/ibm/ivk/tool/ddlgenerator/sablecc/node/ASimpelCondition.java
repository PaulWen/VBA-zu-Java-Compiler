/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASimpelCondition extends PSimpelCondition
{
    private final LinkedList<PSimpelConditionPart> _simpelConditionPart_ = new LinkedList<PSimpelConditionPart>();
    private PSimpelConditionValue _simpelConditionValue_;

    public ASimpelCondition()
    {
        // Constructor
    }

    public ASimpelCondition(
        @SuppressWarnings("hiding") List<PSimpelConditionPart> _simpelConditionPart_,
        @SuppressWarnings("hiding") PSimpelConditionValue _simpelConditionValue_)
    {
        // Constructor
        setSimpelConditionPart(_simpelConditionPart_);

        setSimpelConditionValue(_simpelConditionValue_);

    }

    @Override
    public Object clone()
    {
        return new ASimpelCondition(
            cloneList(this._simpelConditionPart_),
            cloneNode(this._simpelConditionValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpelCondition(this);
    }

    public LinkedList<PSimpelConditionPart> getSimpelConditionPart()
    {
        return this._simpelConditionPart_;
    }

    public void setSimpelConditionPart(List<PSimpelConditionPart> list)
    {
        this._simpelConditionPart_.clear();
        this._simpelConditionPart_.addAll(list);
        for(PSimpelConditionPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PSimpelConditionValue getSimpelConditionValue()
    {
        return this._simpelConditionValue_;
    }

    public void setSimpelConditionValue(PSimpelConditionValue node)
    {
        if(this._simpelConditionValue_ != null)
        {
            this._simpelConditionValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpelConditionValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpelConditionPart_)
            + toString(this._simpelConditionValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpelConditionPart_.remove(child))
        {
            return;
        }

        if(this._simpelConditionValue_ == child)
        {
            this._simpelConditionValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PSimpelConditionPart> i = this._simpelConditionPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSimpelConditionPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._simpelConditionValue_ == oldChild)
        {
            setSimpelConditionValue((PSimpelConditionValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
