/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASimpelConditionParamCallListWithoutParensValue extends PParamCallListWithoutParensValue
{
    private PSimpelCondition _simpelCondition_;

    public ASimpelConditionParamCallListWithoutParensValue()
    {
        // Constructor
    }

    public ASimpelConditionParamCallListWithoutParensValue(
        @SuppressWarnings("hiding") PSimpelCondition _simpelCondition_)
    {
        // Constructor
        setSimpelCondition(_simpelCondition_);

    }

    @Override
    public Object clone()
    {
        return new ASimpelConditionParamCallListWithoutParensValue(
            cloneNode(this._simpelCondition_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpelConditionParamCallListWithoutParensValue(this);
    }

    public PSimpelCondition getSimpelCondition()
    {
        return this._simpelCondition_;
    }

    public void setSimpelCondition(PSimpelCondition node)
    {
        if(this._simpelCondition_ != null)
        {
            this._simpelCondition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpelCondition_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpelCondition_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpelCondition_ == child)
        {
            this._simpelCondition_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpelCondition_ == oldChild)
        {
            setSimpelCondition((PSimpelCondition) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
