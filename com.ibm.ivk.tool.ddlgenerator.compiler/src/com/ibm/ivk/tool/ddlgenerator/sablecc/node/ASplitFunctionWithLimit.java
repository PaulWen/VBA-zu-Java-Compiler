/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class ASplitFunctionWithLimit extends PSplitFunctionWithLimit
{
    private TSplit _split_;
    private TOpenParen _openParen_;
    private PStringValue _string_;
    private TComma _a_;
    private PStringValue _delimiter_;
    private TComma _b_;
    private TNumber _limit_;
    private TCloseParen _closeParen_;

    public ASplitFunctionWithLimit()
    {
        // Constructor
    }

    public ASplitFunctionWithLimit(
        @SuppressWarnings("hiding") TSplit _split_,
        @SuppressWarnings("hiding") TOpenParen _openParen_,
        @SuppressWarnings("hiding") PStringValue _string_,
        @SuppressWarnings("hiding") TComma _a_,
        @SuppressWarnings("hiding") PStringValue _delimiter_,
        @SuppressWarnings("hiding") TComma _b_,
        @SuppressWarnings("hiding") TNumber _limit_,
        @SuppressWarnings("hiding") TCloseParen _closeParen_)
    {
        // Constructor
        setSplit(_split_);

        setOpenParen(_openParen_);

        setString(_string_);

        setA(_a_);

        setDelimiter(_delimiter_);

        setB(_b_);

        setLimit(_limit_);

        setCloseParen(_closeParen_);

    }

    @Override
    public Object clone()
    {
        return new ASplitFunctionWithLimit(
            cloneNode(this._split_),
            cloneNode(this._openParen_),
            cloneNode(this._string_),
            cloneNode(this._a_),
            cloneNode(this._delimiter_),
            cloneNode(this._b_),
            cloneNode(this._limit_),
            cloneNode(this._closeParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASplitFunctionWithLimit(this);
    }

    public TSplit getSplit()
    {
        return this._split_;
    }

    public void setSplit(TSplit node)
    {
        if(this._split_ != null)
        {
            this._split_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._split_ = node;
    }

    public TOpenParen getOpenParen()
    {
        return this._openParen_;
    }

    public void setOpenParen(TOpenParen node)
    {
        if(this._openParen_ != null)
        {
            this._openParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openParen_ = node;
    }

    public PStringValue getString()
    {
        return this._string_;
    }

    public void setString(PStringValue node)
    {
        if(this._string_ != null)
        {
            this._string_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._string_ = node;
    }

    public TComma getA()
    {
        return this._a_;
    }

    public void setA(TComma node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PStringValue getDelimiter()
    {
        return this._delimiter_;
    }

    public void setDelimiter(PStringValue node)
    {
        if(this._delimiter_ != null)
        {
            this._delimiter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._delimiter_ = node;
    }

    public TComma getB()
    {
        return this._b_;
    }

    public void setB(TComma node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    public TNumber getLimit()
    {
        return this._limit_;
    }

    public void setLimit(TNumber node)
    {
        if(this._limit_ != null)
        {
            this._limit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._limit_ = node;
    }

    public TCloseParen getCloseParen()
    {
        return this._closeParen_;
    }

    public void setCloseParen(TCloseParen node)
    {
        if(this._closeParen_ != null)
        {
            this._closeParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._split_)
            + toString(this._openParen_)
            + toString(this._string_)
            + toString(this._a_)
            + toString(this._delimiter_)
            + toString(this._b_)
            + toString(this._limit_)
            + toString(this._closeParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._split_ == child)
        {
            this._split_ = null;
            return;
        }

        if(this._openParen_ == child)
        {
            this._openParen_ = null;
            return;
        }

        if(this._string_ == child)
        {
            this._string_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._delimiter_ == child)
        {
            this._delimiter_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        if(this._limit_ == child)
        {
            this._limit_ = null;
            return;
        }

        if(this._closeParen_ == child)
        {
            this._closeParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._split_ == oldChild)
        {
            setSplit((TSplit) newChild);
            return;
        }

        if(this._openParen_ == oldChild)
        {
            setOpenParen((TOpenParen) newChild);
            return;
        }

        if(this._string_ == oldChild)
        {
            setString((PStringValue) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((TComma) newChild);
            return;
        }

        if(this._delimiter_ == oldChild)
        {
            setDelimiter((PStringValue) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((TComma) newChild);
            return;
        }

        if(this._limit_ == oldChild)
        {
            setLimit((TNumber) newChild);
            return;
        }

        if(this._closeParen_ == oldChild)
        {
            setCloseParen((TCloseParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
