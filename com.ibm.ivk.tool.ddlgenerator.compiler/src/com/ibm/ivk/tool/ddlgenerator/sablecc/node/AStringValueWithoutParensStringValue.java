/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AStringValueWithoutParensStringValue extends PStringValue
{
    private PStringValueWithoutParens _stringValueWithoutParens_;

    public AStringValueWithoutParensStringValue()
    {
        // Constructor
    }

    public AStringValueWithoutParensStringValue(
        @SuppressWarnings("hiding") PStringValueWithoutParens _stringValueWithoutParens_)
    {
        // Constructor
        setStringValueWithoutParens(_stringValueWithoutParens_);

    }

    @Override
    public Object clone()
    {
        return new AStringValueWithoutParensStringValue(
            cloneNode(this._stringValueWithoutParens_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStringValueWithoutParensStringValue(this);
    }

    public PStringValueWithoutParens getStringValueWithoutParens()
    {
        return this._stringValueWithoutParens_;
    }

    public void setStringValueWithoutParens(PStringValueWithoutParens node)
    {
        if(this._stringValueWithoutParens_ != null)
        {
            this._stringValueWithoutParens_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stringValueWithoutParens_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stringValueWithoutParens_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stringValueWithoutParens_ == child)
        {
            this._stringValueWithoutParens_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stringValueWithoutParens_ == oldChild)
        {
            setStringValueWithoutParens((PStringValueWithoutParens) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
