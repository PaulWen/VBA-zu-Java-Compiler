/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import java.util.*;
import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AWaitSub extends PWaitSub
{
    private TSubStart _subStart_;
    private TWait _wait_;
    private PParamList _paramList_;
    private TEndOfLine _endOfLine_;
    private final LinkedList<PFunctionStmt> _functionStmt_ = new LinkedList<PFunctionStmt>();
    private TSubEnd _subEnd_;

    public AWaitSub()
    {
        // Constructor
    }

    public AWaitSub(
        @SuppressWarnings("hiding") TSubStart _subStart_,
        @SuppressWarnings("hiding") TWait _wait_,
        @SuppressWarnings("hiding") PParamList _paramList_,
        @SuppressWarnings("hiding") TEndOfLine _endOfLine_,
        @SuppressWarnings("hiding") List<PFunctionStmt> _functionStmt_,
        @SuppressWarnings("hiding") TSubEnd _subEnd_)
    {
        // Constructor
        setSubStart(_subStart_);

        setWait(_wait_);

        setParamList(_paramList_);

        setEndOfLine(_endOfLine_);

        setFunctionStmt(_functionStmt_);

        setSubEnd(_subEnd_);

    }

    @Override
    public Object clone()
    {
        return new AWaitSub(
            cloneNode(this._subStart_),
            cloneNode(this._wait_),
            cloneNode(this._paramList_),
            cloneNode(this._endOfLine_),
            cloneList(this._functionStmt_),
            cloneNode(this._subEnd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWaitSub(this);
    }

    public TSubStart getSubStart()
    {
        return this._subStart_;
    }

    public void setSubStart(TSubStart node)
    {
        if(this._subStart_ != null)
        {
            this._subStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._subStart_ = node;
    }

    public TWait getWait()
    {
        return this._wait_;
    }

    public void setWait(TWait node)
    {
        if(this._wait_ != null)
        {
            this._wait_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._wait_ = node;
    }

    public PParamList getParamList()
    {
        return this._paramList_;
    }

    public void setParamList(PParamList node)
    {
        if(this._paramList_ != null)
        {
            this._paramList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramList_ = node;
    }

    public TEndOfLine getEndOfLine()
    {
        return this._endOfLine_;
    }

    public void setEndOfLine(TEndOfLine node)
    {
        if(this._endOfLine_ != null)
        {
            this._endOfLine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endOfLine_ = node;
    }

    public LinkedList<PFunctionStmt> getFunctionStmt()
    {
        return this._functionStmt_;
    }

    public void setFunctionStmt(List<PFunctionStmt> list)
    {
        this._functionStmt_.clear();
        this._functionStmt_.addAll(list);
        for(PFunctionStmt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TSubEnd getSubEnd()
    {
        return this._subEnd_;
    }

    public void setSubEnd(TSubEnd node)
    {
        if(this._subEnd_ != null)
        {
            this._subEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._subEnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._subStart_)
            + toString(this._wait_)
            + toString(this._paramList_)
            + toString(this._endOfLine_)
            + toString(this._functionStmt_)
            + toString(this._subEnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._subStart_ == child)
        {
            this._subStart_ = null;
            return;
        }

        if(this._wait_ == child)
        {
            this._wait_ = null;
            return;
        }

        if(this._paramList_ == child)
        {
            this._paramList_ = null;
            return;
        }

        if(this._endOfLine_ == child)
        {
            this._endOfLine_ = null;
            return;
        }

        if(this._functionStmt_.remove(child))
        {
            return;
        }

        if(this._subEnd_ == child)
        {
            this._subEnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._subStart_ == oldChild)
        {
            setSubStart((TSubStart) newChild);
            return;
        }

        if(this._wait_ == oldChild)
        {
            setWait((TWait) newChild);
            return;
        }

        if(this._paramList_ == oldChild)
        {
            setParamList((PParamList) newChild);
            return;
        }

        if(this._endOfLine_ == oldChild)
        {
            setEndOfLine((TEndOfLine) newChild);
            return;
        }

        for(ListIterator<PFunctionStmt> i = this._functionStmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFunctionStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._subEnd_ == oldChild)
        {
            setSubEnd((TSubEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
