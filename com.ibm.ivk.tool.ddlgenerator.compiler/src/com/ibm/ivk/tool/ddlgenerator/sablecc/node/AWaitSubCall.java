/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AWaitSubCall extends PWaitSubCall
{
    private TWait _wait_;
    private PIntValue _duration_;

    public AWaitSubCall()
    {
        // Constructor
    }

    public AWaitSubCall(
        @SuppressWarnings("hiding") TWait _wait_,
        @SuppressWarnings("hiding") PIntValue _duration_)
    {
        // Constructor
        setWait(_wait_);

        setDuration(_duration_);

    }

    @Override
    public Object clone()
    {
        return new AWaitSubCall(
            cloneNode(this._wait_),
            cloneNode(this._duration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWaitSubCall(this);
    }

    public TWait getWait()
    {
        return this._wait_;
    }

    public void setWait(TWait node)
    {
        if(this._wait_ != null)
        {
            this._wait_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._wait_ = node;
    }

    public PIntValue getDuration()
    {
        return this._duration_;
    }

    public void setDuration(PIntValue node)
    {
        if(this._duration_ != null)
        {
            this._duration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._duration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._wait_)
            + toString(this._duration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._wait_ == child)
        {
            this._wait_ = null;
            return;
        }

        if(this._duration_ == child)
        {
            this._duration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._wait_ == oldChild)
        {
            setWait((TWait) newChild);
            return;
        }

        if(this._duration_ == oldChild)
        {
            setDuration((PIntValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
