/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.ibm.ivk.tool.ddlgenerator.sablecc.node;

import com.ibm.ivk.tool.ddlgenerator.sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AWaitSubCallFunctionStmt extends PFunctionStmt
{
    private PWaitSubCall _waitSubCall_;
    private PGeneralStmt _generalStmt_;

    public AWaitSubCallFunctionStmt()
    {
        // Constructor
    }

    public AWaitSubCallFunctionStmt(
        @SuppressWarnings("hiding") PWaitSubCall _waitSubCall_,
        @SuppressWarnings("hiding") PGeneralStmt _generalStmt_)
    {
        // Constructor
        setWaitSubCall(_waitSubCall_);

        setGeneralStmt(_generalStmt_);

    }

    @Override
    public Object clone()
    {
        return new AWaitSubCallFunctionStmt(
            cloneNode(this._waitSubCall_),
            cloneNode(this._generalStmt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWaitSubCallFunctionStmt(this);
    }

    public PWaitSubCall getWaitSubCall()
    {
        return this._waitSubCall_;
    }

    public void setWaitSubCall(PWaitSubCall node)
    {
        if(this._waitSubCall_ != null)
        {
            this._waitSubCall_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._waitSubCall_ = node;
    }

    public PGeneralStmt getGeneralStmt()
    {
        return this._generalStmt_;
    }

    public void setGeneralStmt(PGeneralStmt node)
    {
        if(this._generalStmt_ != null)
        {
            this._generalStmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._generalStmt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._waitSubCall_)
            + toString(this._generalStmt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._waitSubCall_ == child)
        {
            this._waitSubCall_ = null;
            return;
        }

        if(this._generalStmt_ == child)
        {
            this._generalStmt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._waitSubCall_ == oldChild)
        {
            setWaitSubCall((PWaitSubCall) newChild);
            return;
        }

        if(this._generalStmt_ == oldChild)
        {
            setGeneralStmt((PGeneralStmt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
